<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="SWIFT_CONTROL" >
  <resultMap id="BaseResultMap" type="com.path.dbmaps.vo.SWIFT_CONTROLVO" >
    <result column="FILE_MODE" property="FILE_MODE" />
    <result column="SHOW_ERR_MSG" property="SHOW_ERR_MSG" />
    <result column="PERFORMANCE" property="PERFORMANCE" />
    <result column="PREVIEW_WITH_ERROR" property="PREVIEW_WITH_ERROR" />
    <result column="FORMAT_MSG" property="FORMAT_MSG" />
    <result column="RUN_EXT_PROG" property="RUN_EXT_PROG" />
    <result column="EXT_PROG_PATH" property="EXT_PROG_PATH" />
    <result column="ACK" property="ACK" />
    <result column="REQ_GEN_950" property="REQ_GEN_950" />
    <result column="AUTOMATIC_RECON" property="AUTOMATIC_RECON" />
    <result column="RMV_CHAR_BEGIN" property="RMV_CHAR_BEGIN" />
    <result column="CHECK_USER_ACCESS" property="CHECK_USER_ACCESS" />
    <result column="CHECK_950_TRX" property="CHECK_950_TRX" />
    <result column="LOG_PATH" property="LOG_PATH" />
    <result column="SAVE_PATH" property="SAVE_PATH" />
    <result column="DYNAMIC_PATH" property="DYNAMIC_PATH" />
    <result column="ARCHIVE_PATH" property="ARCHIVE_PATH" />
    <result column="LOG_IN_PATH" property="LOG_IN_PATH" />
    <result column="INWARD_PATH" property="INWARD_PATH" />
    <result column="INWARD_ACK_PATH" property="INWARD_ACK_PATH" />
    <result column="INWARD_NACK_PATH" property="INWARD_NACK_PATH" />
    <result column="TRIM_LINES" property="TRIM_LINES" />
    <result column="RMV_SPCAR" property="RMV_SPCAR" />
    <result column="UPPER_CASE" property="UPPER_CASE" />
    <result column="PROCESS_ALL_INWARD" property="PROCESS_ALL_INWARD" />
    <result column="PRINT_SWIFT" property="PRINT_SWIFT" />
    <result column="RECON_BY_TDATE" property="RECON_BY_TDATE" />
    <result column="RECON_BY_VDATE" property="RECON_BY_VDATE" />
    <result column="RECON_BY_DESC" property="RECON_BY_DESC" />
    <result column="ARCHIVE_PATH_JAVA" property="ARCHIVE_PATH_JAVA" />
    <result column="DYNAMIC_PATH_JAVA" property="DYNAMIC_PATH_JAVA" />
    <result column="INWARD_ACK_PATH_JAVA" property="INWARD_ACK_PATH_JAVA" />
    <result column="INWARD_NACK_PATH_JAVA" property="INWARD_NACK_PATH_JAVA" />
    <result column="INWARD_PATH_JAVA" property="INWARD_PATH_JAVA" />
    <result column="LOG_IN_PATH_JAVA" property="LOG_IN_PATH_JAVA" />
    <result column="LOG_PATH_JAVA" property="LOG_PATH_JAVA" />
    <result column="SAVE_PATH_JAVA" property="SAVE_PATH_JAVA" />
    <result column="FIRST_PARTIAL_REASON" property="FIRST_PARTIAL_REASON" />
    <result column="SECOND_PARTIAL_REASON" property="SECOND_PARTIAL_REASON" />
    <result column="THIRD_PARTIAL_REASON" property="THIRD_PARTIAL_REASON" />
    <result column="NOT_IN_CORE_REASON" property="NOT_IN_CORE_REASON" />
    <result column="NOT_IN_FILE_REASON" property="NOT_IN_FILE_REASON" />
    <result column="SWEN_OUT_TRACE" property="SWEN_OUT_TRACE" />
    <result column="GEN_FILES_YN" property="GEN_FILES_YN" />
    <result column="OUT_GEN_FILE_YN" property="OUT_GEN_FILE_YN" />
    <result column="QM_NAME" property="QM_NAME" />
    <result column="QM_PORT" property="QM_PORT" />
    <result column="HOST_NAME" property="HOST_NAME" />
    <result column="OUT_CHANNEL_NAME" property="OUT_CHANNEL_NAME" />
    <result column="OUT_QUEUE_NAME" property="OUT_QUEUE_NAME" />
    <result column="OUT_RETRY" property="OUT_RETRY" />
    <result column="IN_CHANNEL_NAME" property="IN_CHANNEL_NAME" />
    <result column="IN_QUEUE_NAME" property="IN_QUEUE_NAME" />
    <result column="DEAD_QUEUE_NAME" property="DEAD_QUEUE_NAME" />
    <result column="QUEUE_INT_YN" property="QUEUE_INT_YN" />
     <result column="QM_PASSWORD" property="QM_PASSWORD" />
    <result column="QM_USER_NAME" property="QM_USER_NAME" />
    <result column="OUT_MSG_FILE_EXT" property="OUT_MSG_FILE_EXT" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.path.dbmaps.vo.SWIFT_CONTROLVO" extends="BaseResultMap" >
    <result column="FULL_MATCH_EXPRESSION" property="FULL_MATCH_EXPRESSION" />
    <result column="FIRST_PARTIAL_MATCH" property="FIRST_PARTIAL_MATCH" />
    <result column="SECOND_PARTIAL_MATCH" property="SECOND_PARTIAL_MATCH" />
    <result column="THIRD_PARTIAL_MATCH" property="THIRD_PARTIAL_MATCH" />
  </resultMap>
  <sql id="Blob_Column_List" >
    FULL_MATCH_EXPRESSION, FIRST_PARTIAL_MATCH, SECOND_PARTIAL_MATCH, THIRD_PARTIAL_MATCH
  </sql>
  <insert id="insertSWIFT_CONTROL" parameterType="com.path.dbmaps.vo.SWIFT_CONTROLVO" >
    insert into SWIFT_CONTROL
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="FILE_MODE != null and !&quot;&quot;.equals(FILE_MODE)" >
        FILE_MODE,
      </if>
      <if test="SHOW_ERR_MSG != null and SHOW_ERR_MSG != emptyBigDecimalValue" >
        SHOW_ERR_MSG,
      </if>
      <if test="PERFORMANCE != null and PERFORMANCE != emptyBigDecimalValue" >
        PERFORMANCE,
      </if>
      <if test="PREVIEW_WITH_ERROR != null and PREVIEW_WITH_ERROR != emptyBigDecimalValue" >
        PREVIEW_WITH_ERROR,
      </if>
      <if test="FORMAT_MSG != null and FORMAT_MSG != emptyBigDecimalValue" >
        FORMAT_MSG,
      </if>
      <if test="RUN_EXT_PROG != null and RUN_EXT_PROG != emptyBigDecimalValue" >
        RUN_EXT_PROG,
      </if>
      <if test="EXT_PROG_PATH != null and !&quot;&quot;.equals(EXT_PROG_PATH)" >
        EXT_PROG_PATH,
      </if>
      <if test="ACK != null and ACK != emptyBigDecimalValue" >
        ACK,
      </if>
      <if test="REQ_GEN_950 != null and REQ_GEN_950 != emptyBigDecimalValue" >
        REQ_GEN_950,
      </if>
      <if test="AUTOMATIC_RECON != null and AUTOMATIC_RECON != emptyBigDecimalValue" >
        AUTOMATIC_RECON,
      </if>
      <if test="RMV_CHAR_BEGIN != null and !&quot;&quot;.equals(RMV_CHAR_BEGIN)" >
        RMV_CHAR_BEGIN,
      </if>
      <if test="CHECK_USER_ACCESS != null and CHECK_USER_ACCESS != emptyBigDecimalValue" >
        CHECK_USER_ACCESS,
      </if>
      <if test="CHECK_950_TRX != null and CHECK_950_TRX != emptyBigDecimalValue" >
        CHECK_950_TRX,
      </if>
      <if test="LOG_PATH != null and !&quot;&quot;.equals(LOG_PATH)" >
        LOG_PATH,
      </if>
      <if test="SAVE_PATH != null and !&quot;&quot;.equals(SAVE_PATH)" >
        SAVE_PATH,
      </if>
      <if test="DYNAMIC_PATH != null and !&quot;&quot;.equals(DYNAMIC_PATH)" >
        DYNAMIC_PATH,
      </if>
      <if test="ARCHIVE_PATH != null and !&quot;&quot;.equals(ARCHIVE_PATH)" >
        ARCHIVE_PATH,
      </if>
      <if test="LOG_IN_PATH != null and !&quot;&quot;.equals(LOG_IN_PATH)" >
        LOG_IN_PATH,
      </if>
      <if test="INWARD_PATH != null and !&quot;&quot;.equals(INWARD_PATH)" >
        INWARD_PATH,
      </if>
      <if test="INWARD_ACK_PATH != null and !&quot;&quot;.equals(INWARD_ACK_PATH)" >
        INWARD_ACK_PATH,
      </if>
      <if test="INWARD_NACK_PATH != null and !&quot;&quot;.equals(INWARD_NACK_PATH)" >
        INWARD_NACK_PATH,
      </if>
      <if test="TRIM_LINES != null and TRIM_LINES != emptyBigDecimalValue" >
        TRIM_LINES,
      </if>
      <if test="RMV_SPCAR != null and !&quot;&quot;.equals(RMV_SPCAR)" >
        RMV_SPCAR,
      </if>
      <if test="UPPER_CASE != null and UPPER_CASE != emptyBigDecimalValue" >
        UPPER_CASE,
      </if>
      <if test="PROCESS_ALL_INWARD != null and PROCESS_ALL_INWARD != emptyBigDecimalValue" >
        PROCESS_ALL_INWARD,
      </if>
      <if test="PRINT_SWIFT != null and PRINT_SWIFT != emptyBigDecimalValue" >
        PRINT_SWIFT,
      </if>
      <if test="RECON_BY_TDATE != null and RECON_BY_TDATE != emptyBigDecimalValue" >
        RECON_BY_TDATE,
      </if>
      <if test="RECON_BY_VDATE != null and RECON_BY_VDATE != emptyBigDecimalValue" >
        RECON_BY_VDATE,
      </if>
      <if test="RECON_BY_DESC != null and RECON_BY_DESC != emptyBigDecimalValue" >
        RECON_BY_DESC,
      </if>
      <if test="ARCHIVE_PATH_JAVA != null and !&quot;&quot;.equals(ARCHIVE_PATH_JAVA)" >
        ARCHIVE_PATH_JAVA,
      </if>
      <if test="DYNAMIC_PATH_JAVA != null and !&quot;&quot;.equals(DYNAMIC_PATH_JAVA)" >
        DYNAMIC_PATH_JAVA,
      </if>
      <if test="INWARD_ACK_PATH_JAVA != null and !&quot;&quot;.equals(INWARD_ACK_PATH_JAVA)" >
        INWARD_ACK_PATH_JAVA,
      </if>
      <if test="INWARD_NACK_PATH_JAVA != null and !&quot;&quot;.equals(INWARD_NACK_PATH_JAVA)" >
        INWARD_NACK_PATH_JAVA,
      </if>
      <if test="INWARD_PATH_JAVA != null and !&quot;&quot;.equals(INWARD_PATH_JAVA)" >
        INWARD_PATH_JAVA,
      </if>
      <if test="LOG_IN_PATH_JAVA != null and !&quot;&quot;.equals(LOG_IN_PATH_JAVA)" >
        LOG_IN_PATH_JAVA,
      </if>
      <if test="LOG_PATH_JAVA != null and !&quot;&quot;.equals(LOG_PATH_JAVA)" >
        LOG_PATH_JAVA,
      </if>
      <if test="SAVE_PATH_JAVA != null and !&quot;&quot;.equals(SAVE_PATH_JAVA)" >
        SAVE_PATH_JAVA,
      </if>
      <if test="FIRST_PARTIAL_REASON != null and !&quot;&quot;.equals(FIRST_PARTIAL_REASON)" >
        FIRST_PARTIAL_REASON,
      </if>
      <if test="SECOND_PARTIAL_REASON != null and !&quot;&quot;.equals(SECOND_PARTIAL_REASON)" >
        SECOND_PARTIAL_REASON,
      </if>
      <if test="THIRD_PARTIAL_REASON != null and !&quot;&quot;.equals(THIRD_PARTIAL_REASON)" >
        THIRD_PARTIAL_REASON,
      </if>
      <if test="NOT_IN_CORE_REASON != null and !&quot;&quot;.equals(NOT_IN_CORE_REASON)" >
        NOT_IN_CORE_REASON,
      </if>
      <if test="NOT_IN_FILE_REASON != null and !&quot;&quot;.equals(NOT_IN_FILE_REASON)" >
        NOT_IN_FILE_REASON,
      </if>
      <if test="SWEN_OUT_TRACE != null and SWEN_OUT_TRACE != emptyBigDecimalValue" >
        SWEN_OUT_TRACE,
      </if>
      <if test="GEN_FILES_YN != null and GEN_FILES_YN != emptyBigDecimalValue" >
        GEN_FILES_YN,
      </if>
      <if test="FIRST_PARTIAL_MATCH != null" >
        FIRST_PARTIAL_MATCH,
      </if>
      <if test="FULL_MATCH_EXPRESSION != null" >
        FULL_MATCH_EXPRESSION,
      </if>
      <if test="SECOND_PARTIAL_MATCH != null" >
        SECOND_PARTIAL_MATCH,
      </if>
      <if test="THIRD_PARTIAL_MATCH != null" >
        THIRD_PARTIAL_MATCH,
      </if>
         <if test="OUT_GEN_FILE_YN != null and OUT_GEN_FILE_YN != emptyBigDecimalValue" >
        OUT_GEN_FILE_YN,
      </if>
      <if test="QM_NAME != null and !&quot;&quot;.equals(QM_NAME)" >
        QM_NAME,
      </if>
      <if test="QM_PORT != null and QM_PORT != emptyBigDecimalValue" >
        QM_PORT,
      </if>
      <if test="HOST_NAME != null and !&quot;&quot;.equals(HOST_NAME)" >
        HOST_NAME,
      </if>
      <if test="OUT_CHANNEL_NAME != null and !&quot;&quot;.equals(OUT_CHANNEL_NAME)" >
        OUT_CHANNEL_NAME,
      </if>
      <if test="OUT_QUEUE_NAME != null and !&quot;&quot;.equals(OUT_QUEUE_NAME)" >
        OUT_QUEUE_NAME,
      </if>
      <if test="OUT_RETRY != null and OUT_RETRY != emptyBigDecimalValue" >
        OUT_RETRY,
      </if>
      <if test="IN_CHANNEL_NAME != null and !&quot;&quot;.equals(IN_CHANNEL_NAME)" >
        IN_CHANNEL_NAME,
      </if>
      <if test="IN_QUEUE_NAME != null and !&quot;&quot;.equals(IN_QUEUE_NAME)" >
        IN_QUEUE_NAME,
      </if>
      <if test="DEAD_QUEUE_NAME != null and !&quot;&quot;.equals(DEAD_QUEUE_NAME)" >
        DEAD_QUEUE_NAME,
      </if>
       <if test="QUEUE_INT_YN != null and QUEUE_INT_YN != emptyBigDecimalValue" >
        QUEUE_INT_YN,
      </if>
       <if test="QM_PASSWORD != null and !&quot;&quot;.equals(QM_PASSWORD)" >
        QM_PASSWORD,
      </if>
      <if test="QM_USER_NAME != null and !&quot;&quot;.equals(QM_USER_NAME)" >
        QM_USER_NAME,
      </if>
      <if test="OUT_MSG_FILE_EXT != null" >
        OUT_MSG_FILE_EXT,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="FILE_MODE != null and !&quot;&quot;.equals(FILE_MODE)" >
        #{FILE_MODE},
      </if>
      <if test="SHOW_ERR_MSG != null and SHOW_ERR_MSG != emptyBigDecimalValue" >
        #{SHOW_ERR_MSG},
      </if>
      <if test="PERFORMANCE != null and PERFORMANCE != emptyBigDecimalValue" >
        #{PERFORMANCE},
      </if>
      <if test="PREVIEW_WITH_ERROR != null and PREVIEW_WITH_ERROR != emptyBigDecimalValue" >
        #{PREVIEW_WITH_ERROR},
      </if>
      <if test="FORMAT_MSG != null and FORMAT_MSG != emptyBigDecimalValue" >
        #{FORMAT_MSG},
      </if>
      <if test="RUN_EXT_PROG != null and RUN_EXT_PROG != emptyBigDecimalValue" >
        #{RUN_EXT_PROG},
      </if>
      <if test="EXT_PROG_PATH != null and !&quot;&quot;.equals(EXT_PROG_PATH)" >
        #{EXT_PROG_PATH},
      </if>
      <if test="ACK != null and ACK != emptyBigDecimalValue" >
        #{ACK},
      </if>
      <if test="REQ_GEN_950 != null and REQ_GEN_950 != emptyBigDecimalValue" >
        #{REQ_GEN_950},
      </if>
      <if test="AUTOMATIC_RECON != null and AUTOMATIC_RECON != emptyBigDecimalValue" >
        #{AUTOMATIC_RECON},
      </if>
      <if test="RMV_CHAR_BEGIN != null and !&quot;&quot;.equals(RMV_CHAR_BEGIN)" >
        #{RMV_CHAR_BEGIN},
      </if>
      <if test="CHECK_USER_ACCESS != null and CHECK_USER_ACCESS != emptyBigDecimalValue" >
        #{CHECK_USER_ACCESS},
      </if>
      <if test="CHECK_950_TRX != null and CHECK_950_TRX != emptyBigDecimalValue" >
        #{CHECK_950_TRX},
      </if>
      <if test="LOG_PATH != null and !&quot;&quot;.equals(LOG_PATH)" >
        #{LOG_PATH},
      </if>
      <if test="SAVE_PATH != null and !&quot;&quot;.equals(SAVE_PATH)" >
        #{SAVE_PATH},
      </if>
      <if test="DYNAMIC_PATH != null and !&quot;&quot;.equals(DYNAMIC_PATH)" >
        #{DYNAMIC_PATH},
      </if>
      <if test="ARCHIVE_PATH != null and !&quot;&quot;.equals(ARCHIVE_PATH)" >
        #{ARCHIVE_PATH},
      </if>
      <if test="LOG_IN_PATH != null and !&quot;&quot;.equals(LOG_IN_PATH)" >
        #{LOG_IN_PATH},
      </if>
      <if test="INWARD_PATH != null and !&quot;&quot;.equals(INWARD_PATH)" >
        #{INWARD_PATH},
      </if>
      <if test="INWARD_ACK_PATH != null and !&quot;&quot;.equals(INWARD_ACK_PATH)" >
        #{INWARD_ACK_PATH},
      </if>
      <if test="INWARD_NACK_PATH != null and !&quot;&quot;.equals(INWARD_NACK_PATH)" >
        #{INWARD_NACK_PATH},
      </if>
      <if test="TRIM_LINES != null and TRIM_LINES != emptyBigDecimalValue" >
        #{TRIM_LINES},
      </if>
      <if test="RMV_SPCAR != null and !&quot;&quot;.equals(RMV_SPCAR)" >
        #{RMV_SPCAR},
      </if>
      <if test="UPPER_CASE != null and UPPER_CASE != emptyBigDecimalValue" >
        #{UPPER_CASE},
      </if>
      <if test="PROCESS_ALL_INWARD != null and PROCESS_ALL_INWARD != emptyBigDecimalValue" >
        #{PROCESS_ALL_INWARD},
      </if>
      <if test="PRINT_SWIFT != null and PRINT_SWIFT != emptyBigDecimalValue" >
        #{PRINT_SWIFT},
      </if>
      <if test="RECON_BY_TDATE != null and RECON_BY_TDATE != emptyBigDecimalValue" >
        #{RECON_BY_TDATE},
      </if>
      <if test="RECON_BY_VDATE != null and RECON_BY_VDATE != emptyBigDecimalValue" >
        #{RECON_BY_VDATE},
      </if>
      <if test="RECON_BY_DESC != null and RECON_BY_DESC != emptyBigDecimalValue" >
        #{RECON_BY_DESC},
      </if>
      <if test="ARCHIVE_PATH_JAVA != null and !&quot;&quot;.equals(ARCHIVE_PATH_JAVA)" >
        #{ARCHIVE_PATH_JAVA},
      </if>
      <if test="DYNAMIC_PATH_JAVA != null and !&quot;&quot;.equals(DYNAMIC_PATH_JAVA)" >
        #{DYNAMIC_PATH_JAVA},
      </if>
      <if test="INWARD_ACK_PATH_JAVA != null and !&quot;&quot;.equals(INWARD_ACK_PATH_JAVA)" >
        #{INWARD_ACK_PATH_JAVA},
      </if>
      <if test="INWARD_NACK_PATH_JAVA != null and !&quot;&quot;.equals(INWARD_NACK_PATH_JAVA)" >
        #{INWARD_NACK_PATH_JAVA},
      </if>
      <if test="INWARD_PATH_JAVA != null and !&quot;&quot;.equals(INWARD_PATH_JAVA)" >
        #{INWARD_PATH_JAVA},
      </if>
      <if test="LOG_IN_PATH_JAVA != null and !&quot;&quot;.equals(LOG_IN_PATH_JAVA)" >
        #{LOG_IN_PATH_JAVA},
      </if>
      <if test="LOG_PATH_JAVA != null and !&quot;&quot;.equals(LOG_PATH_JAVA)" >
        #{LOG_PATH_JAVA},
      </if>
      <if test="SAVE_PATH_JAVA != null and !&quot;&quot;.equals(SAVE_PATH_JAVA)" >
        #{SAVE_PATH_JAVA},
      </if>
      <if test="FIRST_PARTIAL_REASON != null and !&quot;&quot;.equals(FIRST_PARTIAL_REASON)" >
        #{FIRST_PARTIAL_REASON},
      </if>
      <if test="SECOND_PARTIAL_REASON != null and !&quot;&quot;.equals(SECOND_PARTIAL_REASON)" >
        #{SECOND_PARTIAL_REASON},
      </if>
      <if test="THIRD_PARTIAL_REASON != null and !&quot;&quot;.equals(THIRD_PARTIAL_REASON)" >
        #{THIRD_PARTIAL_REASON},
      </if>
      <if test="NOT_IN_CORE_REASON != null and !&quot;&quot;.equals(NOT_IN_CORE_REASON)" >
        #{NOT_IN_CORE_REASON},
      </if>
      <if test="NOT_IN_FILE_REASON != null and !&quot;&quot;.equals(NOT_IN_FILE_REASON)" >
        #{NOT_IN_FILE_REASON},
      </if>
      <if test="SWEN_OUT_TRACE != null and SWEN_OUT_TRACE != emptyBigDecimalValue" >
        #{SWEN_OUT_TRACE},
      </if>
      <if test="GEN_FILES_YN != null and GEN_FILES_YN != emptyBigDecimalValue" >
        #{GEN_FILES_YN},
      </if>
      <if test="FIRST_PARTIAL_MATCH != null" >
        #{FIRST_PARTIAL_MATCH},
      </if>
      <if test="FULL_MATCH_EXPRESSION != null" >
        #{FULL_MATCH_EXPRESSION},
      </if>
      <if test="SECOND_PARTIAL_MATCH != null" >
        #{SECOND_PARTIAL_MATCH},
      </if>
      <if test="THIRD_PARTIAL_MATCH != null" >
        #{THIRD_PARTIAL_MATCH},
      </if>
        <if test="OUT_GEN_FILE_YN != null and OUT_GEN_FILE_YN != emptyBigDecimalValue" >
        #{OUT_GEN_FILE_YN},
      </if>
      <if test="QM_NAME != null and !&quot;&quot;.equals(QM_NAME)"  >
        #{QM_NAME},
      </if>
      <if test="QM_PORT != null and QM_PORT != emptyBigDecimalValue" >
        #{QM_PORT},
      </if>
      <if test="HOST_NAME != null and !&quot;&quot;.equals(HOST_NAME)" >
        #{HOST_NAME},
      </if>
      <if test="OUT_CHANNEL_NAME != null and !&quot;&quot;.equals(OUT_CHANNEL_NAME)" >
        #{OUT_CHANNEL_NAME},
      </if>
      <if test="OUT_QUEUE_NAME != null and !&quot;&quot;.equals(OUT_QUEUE_NAME)" >
        #{OUT_QUEUE_NAME},
      </if>
      <if test="OUT_RETRY != null and OUT_RETRY != emptyBigDecimalValue" >
        #{OUT_RETRY},
      </if>
      <if test="IN_CHANNEL_NAME != null and !&quot;&quot;.equals(IN_CHANNEL_NAME)" >
        #{IN_CHANNEL_NAME},
      </if>
      <if test="IN_QUEUE_NAME != null and !&quot;&quot;.equals(IN_QUEUE_NAME)" >
        #{IN_QUEUE_NAME},
      </if>
      <if test="DEAD_QUEUE_NAME != null and !&quot;&quot;.equals(DEAD_QUEUE_NAME)" >
        #{DEAD_QUEUE_NAME},
      </if>
       <if test="QUEUE_INT_YN != null and QUEUE_INT_YN != emptyBigDecimalValue" >
        #{QUEUE_INT_YN},
      </if>
         <if test="QM_PASSWORD != null and !&quot;&quot;.equals(QM_PASSWORD)" >
        #{QM_PASSWORD},
      </if>
      <if test="QM_USER_NAME != null and !&quot;&quot;.equals(QM_USER_NAME)" >
        #{QM_USER_NAME},
      </if>
      <if test="OUT_MSG_FILE_EXT != null" >
        #{OUT_MSG_FILE_EXT},
      </if>
    </trim>
  </insert>
</mapper>