<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="commonLibMapper" >

	<update id="commitTrans">
		COMMIT
	</update>

	<update id="beginTrans">
		BEGIN TRANSACTION
	</update>

  <sql id="systemDate">
    <choose>
       <when test="isSybase == 1"> GETDATE()</when>
       <otherwise>SYSDATE</otherwise>
	</choose>
  </sql>
  <insert id="insertTempSessionDetails" parameterType="com.path.struts2.lib.common.BaseSC">
	   <choose> 
	    <when test="isSybase == 1">
	     DELETE FROM tempdb..TEMP_SESSION_DETAILS WHERE DB_SESSION_ID = @@spId
	     INSERT INTO tempdb..TEMP_SESSION_DETAILS 
	     (DB_SESSION_ID,DB_NODE,LANGUAGE
	     <if test="runningDate != null">,RUNNING_DATE</if>
	     <if test="userId != null">,USER_ID</if>
	     <if test="currAppName != null">,APP_NAME</if> 
	     ) VALUES
	      ( @@spId, '0', #{preferredLanguage}<if test="runningDate != null">,#{runningDate}</if><if test="userId != null">,#{userId}</if>
	      <if test="currAppName != null">,#{currAppName}</if> 
	      )
	    </when>
	    <otherwise>
	    BEGIN
	    DELETE FROM TEMP_SESSION_DETAILS WHERE DB_SESSION_ID = NVL(SYS_CONTEXT('USERENV','SID'),0);
	    INSERT INTO TEMP_SESSION_DETAILS 
	     (DB_SESSION_ID,DB_NODE,LANGUAGE
	     <if test="runningDate != null">,RUNNING_DATE</if>
	     <if test="userId != null">,USER_ID</if>
	     <if test="currAppName != null">,APP_NAME</if> 
	     ) VALUES
	      ( NVL(SYS_CONTEXT('USERENV','SID'),0), NVL(SYS_CONTEXT('USERENV','INSTANCE'),0), #{preferredLanguage}
	      <if test="runningDate != null">,#{runningDate}</if><if test="userId != null">,#{userId}</if>
	      <if test="currAppName != null">,#{currAppName}</if>);
 		END; 
	    </otherwise>
	    </choose>
  </insert>
   <resultMap id="returnDbSessionDetResultMap" type="com.path.vo.common.CommonLibCO" >
    <result column="sessionId" property="dbSessionId" />
    <result column="dbNode" property="dbNode" />
  </resultMap>
  <select id="returnDBSessionDetails" parameterType="commonLibSC" resultMap="returnDbSessionDetResultMap">
     <choose> 
	    <when test="isSybase == 1">
	      SELECT @@spId sessionId,'0' dbNode
	     </when>
	    <otherwise>
		    SELECT NVL(SYS_CONTEXT('USERENV','SID'),0) sessionId, NVL(SYS_CONTEXT('USERENV','INSTANCE'),0) dbNode
		    FROM DUAL
	     </otherwise>
	    </choose>
  </select>
  <select id="getCtsMessage" parameterType="commonLibSC" resultType="com.path.dbmaps.vo.CTSMESSAGESVO">
    SELECT CASE WHEN #{language} = 'EN' THEN T.ENG_MESSAGE 
       WHEN #{language} = 'AR' THEN T.ARAB_MESSAGE
       WHEN #{language} = 'RU' THEN T.RU_MESSAGE 
       WHEN #{language} = 'TK' THEN T.TK_MESSAGE 
       WHEN #{language} = 'FA' THEN T.FA_MESSAGE 
       WHEN #{language} = 'FR' THEN T.FR_MESSAGE ELSE T.ENG_MESSAGE END ENG_MESSAGE , 
     CASE WHEN #{language} = 'EN' THEN T.ENG_TITLE
       WHEN #{language} = 'AR' THEN T.ARAB_TITLE
       WHEN #{language} = 'RU' THEN T.RU_TITLE 
       WHEN #{language} = 'TK' THEN T.TK_TITLE 
       WHEN #{language} = 'FA' THEN T.FA_TITLE 
       WHEN #{language} = 'FR' THEN T.FR_TITLE ELSE T.ENG_TITLE END ENG_TITLE 
	FROM CTSMESSAGES T
	WHERE T.CODE = #{code}
  </select>
 <resultMap id="returnLOVResultMap" type="selectCO" >
    <result column="VALUE_CODE" property="code" />
    <result column="VALUE_DESC" property="descValue" />
    <result column="ICON_NAME" property="iconName" />
  </resultMap>   
 <select id="returnLOV" parameterType="selectSC" resultMap="returnLOVResultMap">
	SELECT LOVTRNS.VALUE_CODE, LOVTRNS.VALUE_DESC  VALUE_DESC, LOVTRNS.ICON_NAME
	FROM SYS_PARAM_LOV_TRANS LOVTRNS 
	WHERE LOVTRNS.LOV_TYPE_ID = #{lovTypeId}
        AND LOVTRNS.LANG_CODE = #{language, jdbcType=VARCHAR}
	 <if test="lovCodesExclude != null">
	 	AND LOVTRNS.VALUE_CODE NOT IN (${lovCodesExclude})
	 </if>
	 <if test="lovCodesInlude != null">
	 	AND LOVTRNS.VALUE_CODE IN (${lovCodesInlude})
	 </if>
	<choose>
	<when test="orderCriteria == null || orderCriteria == 'CODE'"> 
	 ORDER BY LOVTRNS.VALUE_CODE ASC
	</when>
	<when test="orderCriteria == 'VALUE'">
	  ORDER BY LOVTRNS.VALUE_DESC ASC
	</when>
	<when test="orderCriteria == 'ORDER'">
	  ORDER BY LOV_ORDER ASC
	</when>
	</choose>
  </select>
  
  <select id="returnSystemDate"  resultType="date" parameterType="commonLibSC">
     SELECT 
      <choose>
	       <when test="isSybase == 1"> GETDATE()</when>
	       <otherwise>SYSDATE FROM DUAL</otherwise>
       </choose>
</select>

 

<update id="updateDummyCTSCTR" parameterType="com.path.dbmaps.vo.CTSCTRVO">
update CTSCTR
    <set >
        TRS_NO = TRS_NO
    </set>
    where BRANCH_CODE = #{BRANCH_CODE}
      and CB_IND = #{CB_IND}
      and COMP_CODE = #{COMP_CODE}
      and TRS_TYPE = #{TRS_TYPE}
</update>

<update id="updateDumyIbsCounter" parameterType="com.path.dbmaps.vo.IBISCOUNTERVO">
	UPDATE IBISCOUNTER
	SET LAST_NO = LAST_NO
	WHERE COMP_CODE = #{COMP_CODE}
	AND BRANCH_CODE = #{BRANCH_CODE}
	AND TRX_TYPE = #{TRX_TYPE}
</update>

<update id="updateDummyCOUNTER" parameterType="com.path.dbmaps.vo.COUNTERVO">
	UPDATE COUNTER    
	SET	LAST_NUMBER  =  LAST_NUMBER 
	WHERE  COMP_CODE = #{COMP_CODE}
		AND	BRANCH_CODE = #{BRANCH_CODE}
		AND	TRX_TYPE  	= #{TRX_TYPE}
</update>

<!--************************************** SADS CONTROL RECORD (PTH_CTRL)**************************************-->
<resultMap id="pthCtrlResultMap" type="pthCtrlVO" >
    <id column="FIELD1" property="FIELD1" />
    <result column="FIELD2" property="FIELD2" />
    <result column="DEBUG" property="DEBUG" />
    <result column="SHARED_LIB" property="SHARED_LIB" />
    <result column="PERCENTAGE_DEC" property="PERCENTAGE_DEC" />
    <result column="AVERAGE_DEC" property="AVERAGE_DEC" />
    <result column="SERVICE" property="SERVICE" />
    <result column="SERVICE1" property="SERVICE1" />
    <result column="MARKET_VALUE_DEC" property="MARKET_VALUE_DEC" />
    <result column="AUTO_SETT" property="AUTO_SETT" />
    <result column="FIELD3" property="FIELD3" />
    <result column="FIELD4" property="FIELD4" />
    <result column="USER_ID_SIZE" property="USER_ID_SIZE" />
    <result column="PWD_SIZE" property="PWD_SIZE" />
    <result column="SUSPEND_PERIOD" property="SUSPEND_PERIOD" />
    <result column="AUDIT_UNSUCCESSFUL_LOGINS" property="AUDIT_UNSUCCESSFUL_LOGINS" />
    <result column="NUM_UNSUCCESS_LOGINS" property="NUM_UNSUCCESS_LOGINS" />
    <result column="TODO_X" property="TODO_X" />
    <result column="TODO_Y" property="TODO_Y" />
    <result column="TODO_WIDTH" property="TODO_WIDTH" />
    <result column="TODO_HEIGHT" property="TODO_HEIGHT" />
    <result column="TODO_PITCH" property="TODO_PITCH" />
    <result column="TODO_STYLE" property="TODO_STYLE" />
    <result column="TODO_COLOR_BACKGROUND" property="TODO_COLOR_BACKGROUND" />
    <result column="TODO_COLOR_TEXT" property="TODO_COLOR_TEXT" />
    <result column="CIF_BRIEF_NAME_DETAILS" property="CIF_BRIEF_NAME_DETAILS" />
    <result column="CIF_LONG_NAME_DETAILS" property="CIF_LONG_NAME_DETAILS" />
    <result column="SIG_UTI_AMT" property="SIG_UTI_AMT" />
    <result column="SIG_EXC_AMT" property="SIG_EXC_AMT" />
    <result column="SIG_CUR_AMT" property="SIG_CUR_AMT" />
    <result column="SIG_CHANG_AMT" property="SIG_CHANG_AMT" />
    <result column="SIG_LEVEL" property="SIG_LEVEL" />
    <result column="EOD_VERSION" property="EOD_VERSION" />
    <result column="EOD_EPORT" property="EOD_EPORT" />
    <result column="CALC_EXCH_RATE" property="CALC_EXCH_RATE" />
    <result column="SD_IIS_TRADE_DEAL" property="SD_IIS_TRADE_DEAL" />
    <result column="SD_IIS_REP_PLAN" property="SD_IIS_REP_PLAN" />
    <result column="SD_IIS_PAY_REC_INST" property="SD_IIS_PAY_REC_INST" />
    <result column="SD_IIS_PROF_DEC" property="SD_IIS_PROF_DEC" />
    <result column="SD_IIS_INV_DEAL" property="SD_IIS_INV_DEAL" />
    <result column="SD_TFA_DOC" property="SD_TFA_DOC" />
    <result column="SD_FMS_APPLICATION" property="SD_FMS_APPLICATION" />
    <result column="SD_FMS_MANAGEMENT" property="SD_FMS_MANAGEMENT" />
    <result column="SD_FMS_DRAW_DOWN" property="SD_FMS_DRAW_DOWN" />
    <result column="SD_PMS_TRS" property="SD_PMS_TRS" />
    <result column="SD_CTS_TRS" property="SD_CTS_TRS" />
    <result column="SD_ACC_MAT_DTE" property="SD_ACC_MAT_DTE" />
    <result column="SD_ACC_JV" property="SD_ACC_JV" />
    <result column="SD_RET_TRS" property="SD_RET_TRS" />
    <result column="SYS_ERROR" property="SYS_ERROR" />
    <result column="LANGUAGE" property="LANGUAGE" />
    <result column="SYSTEM_NAME" property="SYSTEM_NAME" />
    <result column="SYSTEM_NAME_LONG" property="SYSTEM_NAME_LONG" />
    <result column="DISABLE_PRINTSCR" property="DISABLE_PRINTSCR" />
    <result column="SERVER_PATH" property="SERVER_PATH" />
    <result column="SAFE_APP" property="SAFE_APP" />
    <result column="PWD_LETTER_CASE" property="PWD_LETTER_CASE" />
    <result column="PWD_SIZE_MIN" property="PWD_SIZE_MIN" />
    <result column="PWD_SIZE_MAX" property="PWD_SIZE_MAX" />
    <result column="PWD_ALPHA_NUMERIC" property="PWD_ALPHA_NUMERIC" />
    <result column="LOW_STAT_CHG_DATE" property="LOW_STAT_CHG_DATE" />
    <result column="REJECT_BIRTHDATE" property="REJECT_BIRTHDATE" />
    <result column="SHOW_WELCOME_MESSAGE" property="SHOW_WELCOME_MESSAGE" />
    <result column="UNIT_STATUS" property="UNIT_STATUS" />
    <result column="DEFAULT_IDLE" property="DEFAULT_IDLE" />
    <result column="SHOW_ATM_INFO" property="SHOW_ATM_INFO" />
    <result column="CAPTURE_SIGN" property="CAPTURE_SIGN" />
    <result column="MANDATORY_COLOR" property="MANDATORY_COLOR" />
    <result column="ADD_REF_MASK" property="ADD_REF_MASK" />
    <result column="TRACK_HIST_PWD" property="TRACK_HIST_PWD" />
    <result column="NO_PWD_TRACK" property="NO_PWD_TRACK" />
    <result column="ENC_TYPE" property="ENC_TYPE" />
    <result column="REJECT_USERID" property="REJECT_USERID" />
    <result column="AXS_MGMT" property="AXS_MGMT" />
    <result column="INTERBRANCH_BOOKING" property="INTERBRANCH_BOOKING" />
    <result column="CHARGES_BOOKING" property="CHARGES_BOOKING" />
    <result column="REVERSE_TRX_METHOD" property="REVERSE_TRX_METHOD" />
    <result column="EXCEP_PROCESS" property="EXCEP_PROCESS" />
    <result column="N_TRANS_MIN_MAX_FLAG" property="n_TRANS_MIN_MAX_FLAG" />
    <result column="CLEARING_VDATE_BOOKING" property="CLEARING_VDATE_BOOKING" />
    <result column="TODO_SHOW_HIDE_TREEVIEW" property="TODO_SHOW_HIDE_TREEVIEW" />
    <result column="ENABLE_AUDIT" property="ENABLE_AUDIT" />
    <result column="REJECT_REPEAT" property="REJECT_REPEAT" />
    <result column="SHOW_REF_STMT" property="SHOW_REF_STMT" />
    <result column="DB_VERSION" property="DB_VERSION" />
    <result column="TRANSFER_ACCESS" property="TRANSFER_ACCESS" />
    <result column="POP_PROF_MOD_ACCESS" property="POP_PROF_MOD_ACCESS" />
    <result column="UPDATE_EXE" property="UPDATE_EXE" />
    <result column="GLOBAL_CIF" property="GLOBAL_CIF" />
    <result column="GLOBAL_COMP_CIF" property="GLOBAL_COMP_CIF" />
    <result column="POSITION_ONE_CY" property="POSITION_ONE_CY" />
    <result column="MAINTAIN_HIJIRI_DATE" property="MAINTAIN_HIJIRI_DATE" />
    <result column="CHECK_ON_ACTIVE_ALERTS" property="CHECK_ON_ACTIVE_ALERTS" />
    <result column="ECC_COMP_CODE" property="ECC_COMP_CODE" />
    <result column="CHARGES_BR_BOOKING" property="CHARGES_BR_BOOKING" />
    <result column="SHOW_SIGN_DOC" property="SHOW_SIGN_DOC" />
    <result column="SHOW_SIGN_PHO" property="SHOW_SIGN_PHO" />
    <result column="SD_PMS_OTRX" property="SD_PMS_OTRX" />
    <result column="SHOW_SIGN_ANN" property="SHOW_SIGN_ANN" />
    <result column="AUT_MANUAL_SCRIPT" property="AUT_MANUAL_SCRIPT" />
    <result column="VIEW_SIGN_DET" property="VIEW_SIGN_DET" />
    <result column="SIGN_SMALL_NOTE" property="SIGN_SMALL_NOTE" />
    <result column="SIGN_NOTE_MAND" property="SIGN_NOTE_MAND" />
    <result column="USR_AUT" property="USR_AUT" />
    <result column="RUN_EOD_HOLIDAY" property="RUN_EOD_HOLIDAY" />
    <result column="SVR_PHOENIX" property="SVR_PHOENIX" />
    <result column="TODO_REFRESH_TIME" property="TODO_REFRESH_TIME" />
    <result column="SHOW_RENEWED_ACC" property="SHOW_RENEWED_ACC" />
    <result column="MULTISESSION" property="MULTISESSION" />
    <result column="BIC_CODE_LIMIT" property="BIC_CODE_LIMIT" />
    <result column="LOCAL_FUND_TRANSFER_SYS_NAME" property="LOCAL_FUND_TRANSFER_SYS_NAME" />
    <result column="APPLY_YR_HOL" property="APPLY_YR_HOL" />
    <result column="REORDER_SEQ" property="REORDER_SEQ" />
    <result column="SIGN_DEF_AMT" property="SIGN_DEF_AMT" />
    <result column="GENEX_CLIENT" property="GENEX_CLIENT" />
    <result column="CIF_EMPLOYEE_FLAG" property="CIF_EMPLOYEE_FLAG" />
    <result column="ACCESS_PRIV_FORMAT" property="ACCESS_PRIV_FORMAT" />
    <result column="SHOW_CHANGE_NAME_FLAG" property="SHOW_CHANGE_NAME_FLAG" />
    <result column="DEFAULT_TRSF_DEBT_ACC" property="DEFAULT_TRSF_DEBT_ACC" />
    <result column="IDLE_BEHAVIOR" property="IDLE_BEHAVIOR" />
    <result column="CR_DR_CY_EXCH" property="CR_DR_CY_EXCH" />
    <result column="CHANG_RUN_DTE_AFTER_HOL" property="CHANG_RUN_DTE_AFTER_HOL" />
    <result column="SIGN_LIMIT_SIZE" property="SIGN_LIMIT_SIZE" />
    <result column="SIGN_LIMIT_SIZE_MAND" property="SIGN_LIMIT_SIZE_MAND" />
    <result column="ARCHIVES_EOD_ALERTS" property="ARCHIVES_EOD_ALERTS" />
    <result column="GEN_OFF_BS_ENTRIES" property="GEN_OFF_BS_ENTRIES" />
    <result column="HIDE_TRS_DEBIT_PAY" property="HIDE_TRS_DEBIT_PAY" />
    <result column="GLOBAL_AXS_PRIVILEGE" property="GLOBAL_AXS_PRIVILEGE" />
    <result column="RESTRICT_GL_JV" property="RESTRICT_GL_JV" />
    <result column="DOT_MATRIX" property="DOT_MATRIX" />
    <result column="ENABLE_START_END_DAY" property="ENABLE_START_END_DAY" />
    <result column="ENABLE_LOC_NATIONALITY" property="ENABLE_LOC_NATIONALITY" />
    <result column="ATM_RECONNECT_TIME" property="ATM_RECONNECT_TIME" />
    <result column="ATM_LOG_800" property="ATM_LOG_800" />
    <result column="ATM_LOG_ECHO" property="ATM_LOG_ECHO" />
    <result column="ATM_LOG_REC_MSG" property="ATM_LOG_REC_MSG" />
    <result column="ATM_LOG_SENT_MSG" property="ATM_LOG_SENT_MSG" />
    <result column="ATM_LOG_FILE" property="ATM_LOG_FILE" />
    <result column="ATM_LOG_SENT_FILE" property="ATM_LOG_SENT_FILE" />
    <result column="ATM_LOG_REC_FILE" property="ATM_LOG_REC_FILE" />
    <result column="SHOW_SIGN_LIMITSCHEMA" property="SHOW_SIGN_LIMITSCHEMA" />
    <result column="UPDATE_CTSCTR_MAN" property="UPDATE_CTSCTR_MAN" />
    <result column="ENABLE_SEND_MAIL" property="ENABLE_SEND_MAIL" />
    <result column="ENABLE_SHOW_ONLY_SUSPEND_SYS" property="ENABLE_SHOW_ONLY_SUSPEND_SYS" />
    <result column="OVERDRAFT_DETAILS" property="OVERDRAFT_DETAILS" />
    <result column="SMART_FIELD_MAND" property="SMART_FIELD_MAND" />
    <result column="REGION_MAND" property="REGION_MAND" />
    <result column="CHECKSUM" property="CHECKSUM" />
    <result column="AXS_MGMT_PROF_MOD" property="AXS_MGMT_PROF_MOD" />
    <result column="CHECK_P_FILL_MIN_MAX" property="CHECK_P_FILL_MIN_MAX" />
    <result column="PCS_LOCK_TYPE" property="PCS_LOCK_TYPE" />
    <result column="SINGLE_SIGNON" property="SINGLE_SIGNON" />
    <result column="SIGN_MODE" property="SIGN_MODE" />
    <result column="SAFE_TRF" property="SAFE_TRF" />
    <result column="ARAB_ENG_CALENDAR" property="ARAB_ENG_CALENDAR" />
    <result column="INTMAN_APP" property="INTMAN_APP" />
    <result column="AUTHORIZE_REACTIVATION" property="AUTHORIZE_REACTIVATION" />
    <result column="SIGN_CAPT_MODE" property="SIGN_CAPT_MODE" />
    <result column="TMP_DB_NAME" property="TMP_DB_NAME" />
    <result column="ARCH_PURGE_LIMIT_DAYS" property="ARCH_PURGE_LIMIT_DAYS" />
    <result column="ENABLE_LANGUAGE" property="ENABLE_LANGUAGE" />
    <result column="FILTER_SIGN" property="FILTER_SIGN" />
    <result column="GROUP_ID_CHECK" property="GROUP_ID_CHECK" />
    <result column="IBAN_VALIDATION_ACTION" property="IBAN_VALIDATION_ACTION" />
    <result column="IBAN_VALIDATION" property="IBAN_VALIDATION" />
    <result column="TOTAL_POSITION_ACC" property="TOTAL_POSITION_ACC" />
    <result column="TFA_CHARGES_BALANCE" property="TFA_CHARGES_BALANCE" />
    <result column="CENSUS_HOLIDAY" property="CENSUS_HOLIDAY" />
    <result column="ENABLE_SMART_FUNC" property="ENABLE_SMART_FUNC" />
    <result column="ACTIVATE_MCASH_OVERDRAFT" property="ACTIVATE_MCASH_OVERDRAFT" />
    <result column="DUES_DEDUCT_FRM_AVLBAL" property="DUES_DEDUCT_FRM_AVLBAL" />
    <result column="AD_AUTH_YN" property="AD_AUTH_YN" />
    <result column="AD_SERVER" property="AD_SERVER" />
    <result column="PWD_CHNG_PER_DAY_NO" property="PWD_CHNG_PER_DAY_NO" />
    <result column="PWD_RESTRICT_MIRROR_YN" property="PWD_RESTRICT_MIRROR_YN" />
    <result column="PWD_RESTRICT_MIRROR_NO" property="PWD_RESTRICT_MIRROR_NO" />
    <result column="PWD_RESTRICT_MIRROR_LEFT_NO" property="PWD_RESTRICT_MIRROR_LEFT_NO" />
    <result column="PWD_RESTRICT_MIRROR_RIGTH_NO" property="PWD_RESTRICT_MIRROR_RIGTH_NO" />
    <result column="PWD_EXPIRY_NOTIFY_DAYS_NO" property="PWD_EXPIRY_NOTIFY_DAYS_NO" />
    <result column="DMS_EXIST" property="DMS_EXIST" />
    <result column="ENABLE_ALRT_ON_USER_LOGIN_YN" property="ENABLE_ALRT_ON_USER_LOGIN_YN" />
    <result column="ALRT_TIME_INTERVAL_HRS" property="ALRT_TIME_INTERVAL_HRS" />
    <result column="ALRT_TIME_INTERVAL_MINS" property="ALRT_TIME_INTERVAL_MINS" />
    <result column="ALRT_TIME_INTERVAL_SECS" property="ALRT_TIME_INTERVAL_SECS" />
    <!-- TP 396693 DCR 252771-->
    <result column="RJCT_PSWD_IF_NO_SPCIAL_CHAR_YN" property="RJCT_PSWD_IF_NO_SPCIAL_CHAR_YN" />
    <result column="RJCT_PSWD_MIN_SEQ_CHAR_NO" property="RJCT_PSWD_MIN_SEQ_CHAR_NO" />
    <!-- TP 440134 Translation Keys with Non Case Sensitivity BLME Issue -->
    <result column="DB_NOT_CASE_SENSITIVE_YN" property="DB_NOT_CASE_SENSITIVE_YN" />
    <result column="USER_LOGIN_CRITERIA"   property="USER_LOGIN_CRITERIA" />
    <result column="CONNECTIVITY_PROTOCOL" property="CONNECTIVITY_PROTOCOL" />
    <result column="AD_PORT"               property="AD_PORT" />
    <result column="AD_CON_USER_NAME"      property="AD_CON_USER_NAME"/>
    <result column="AD_CON_PWD"            property="AD_CON_PWD"/>
    <!-- TP 571957 -->
    <result column="REPORT_ORDERING"       property="REPORT_ORDERING"/>
<!-- TP 548862 -->
    <result column="AUTO_PWD_GENERATION_YN"  property="AUTO_PWD_GENERATION_YN"/>
    <result column="SMTP_SENDER"             property="SMTP_SENDER" />
    <result column="SMTP_IP"                 property="SMTP_IP" />
    <result column="SMPT_PORT"               property="SMPT_PORT" />
    <result column="SMTP_USER"               property="SMTP_USER" />
    <result column="SMTP_PASSWORD"           property="SMTP_PASSWORD" />
    <result column="PWD_CREATE_MSG_SUB"      property="PWD_CREATE_MSG_SUB" />
    <result column="PWD_CREATE_MSG_BODY"     property="PWD_CREATE_MSG_BODY" />
    <result column="PWD_REACTIVATE_MSG_SUB"  property="PWD_REACTIVATE_MSG_SUB" />
    <result column="PWD_REACTIVATE_MSG_BODY" property="PWD_REACTIVATE_MSG_BODY" />
    <result column="PWD_RESET_MSG_SUB"       property="PWD_RESET_MSG_SUB" />
    <result column="PWD_RESET_MSG_BODY"      property="PWD_RESET_MSG_BODY" />

    <result column="ENABLE_CAPTCHA_YN"        property="ENABLE_CAPTCHA_YN"/>
    <result column="NBR_BEF_CAPTCHA"          property="NBR_BEF_CAPTCHA"/>
    <result column="NOTIFY_PERIOD_EXPIRE_AXS" property="NOTIFY_PERIOD_EXPIRE_AXS"/>
    
    <result column="PWD_EXPIRY_MSG_CODE"       property="PWD_EXPIRY_MSG_CODE"/>
    <result column="LOGIN_SUCCESS_MSG"       property="LOGIN_SUCCESS_MSG"/>
    <result column="LOGIN_UNSUCCESS_MSG"       property="LOGIN_UNSUCCESS_MSG"/>
    
    <result column="DMS_TYPE"				property="DMS_TYPE"/>
    <result column="WS_LOCATION"			property="WS_LOCATION"/>
    <result column="LOGIN_VAL_MSG"			property="LOGIN_VAL_MSG"/>
    <result column="ENABLE_PORTLET_AXS_YN"			property="ENABLE_PORTLET_AXS_YN"/>
    
    <!-- User Story #684983 ARIBI180053 --> 
    <result column="AR_MNTH_BASED_ENG"	property="AR_MNTH_BASED_ENG"/>
    <result column="AD_DOMAIN"	property="AD_DOMAIN"/>
    <!--  -->
    <result column="DMS_TREE_ID"	property="DMS_TREE_ID"/>
    
    
    <!-- US 862320 RKIB190041 -->
    <result column="EXCL_SUPR_USR_NUM_LOGINS_YN"	property="EXCL_SUPR_USR_NUM_LOGINS_YN"/>
    <result column="EXCL_SUPR_USR_SUSPND_PERIOD_YN"	property="EXCL_SUPR_USR_SUSPND_PERIOD_YN"/>
    <result column="ENABLE_LICENSE_MGNT_YN"	        property="ENABLE_LICENSE_MGNT_YN"/>
    
  </resultMap>
  
 <select id="returnPthCtrl" resultMap="pthCtrlResultMap">
    SELECT 
    FIELD1, FIELD2, DEBUG, SHARED_LIB, PERCENTAGE_DEC, AVERAGE_DEC, SERVICE, SERVICE1, 
    MARKET_VALUE_DEC, AUTO_SETT, FIELD3, FIELD4, USER_ID_SIZE, PWD_SIZE, SUSPEND_PERIOD, 
    AUDIT_UNSUCCESSFUL_LOGINS, NUM_UNSUCCESS_LOGINS, TODO_X, TODO_Y, TODO_WIDTH, TODO_HEIGHT, 
    TODO_PITCH, TODO_STYLE, TODO_COLOR_BACKGROUND, TODO_COLOR_TEXT, CIF_BRIEF_NAME_DETAILS, 
    CIF_LONG_NAME_DETAILS, SIG_UTI_AMT, SIG_EXC_AMT, SIG_CUR_AMT, SIG_CHANG_AMT, SIG_LEVEL, 
    EOD_VERSION, EOD_EPORT, CALC_EXCH_RATE, SD_IIS_TRADE_DEAL, SD_IIS_REP_PLAN, SD_IIS_PAY_REC_INST, 
    SD_IIS_PROF_DEC, SD_IIS_INV_DEAL, SD_TFA_DOC, SD_FMS_APPLICATION, SD_FMS_MANAGEMENT, 
    SD_FMS_DRAW_DOWN, SD_PMS_TRS, SD_CTS_TRS, SD_ACC_MAT_DTE, SD_ACC_JV, SD_RET_TRS, 
    SYS_ERROR, LANGUAGE, SYSTEM_NAME, SYSTEM_NAME_LONG, DISABLE_PRINTSCR, SERVER_PATH, 
    SAFE_APP, PWD_LETTER_CASE, PWD_SIZE_MIN, PWD_SIZE_MAX, PWD_ALPHA_NUMERIC, LOW_STAT_CHG_DATE, 
    REJECT_BIRTHDATE, SHOW_WELCOME_MESSAGE, UNIT_STATUS, DEFAULT_IDLE, 
    SHOW_ATM_INFO, CAPTURE_SIGN, MANDATORY_COLOR, ADD_REF_MASK, TRACK_HIST_PWD, NO_PWD_TRACK, 
    ENC_TYPE, REJECT_USERID, AXS_MGMT, INTERBRANCH_BOOKING, CHARGES_BOOKING, REVERSE_TRX_METHOD, 
    EXCEP_PROCESS, N_TRANS_MIN_MAX_FLAG, CLEARING_VDATE_BOOKING, TODO_SHOW_HIDE_TREEVIEW, 
    ENABLE_AUDIT, REJECT_REPEAT, SHOW_REF_STMT, DB_VERSION, TRANSFER_ACCESS, POP_PROF_MOD_ACCESS, 
    UPDATE_EXE, GLOBAL_CIF, GLOBAL_COMP_CIF, POSITION_ONE_CY, MAINTAIN_HIJIRI_DATE, CHECK_ON_ACTIVE_ALERTS, 
    ECC_COMP_CODE, CHARGES_BR_BOOKING, SHOW_SIGN_DOC, SHOW_SIGN_PHO, SD_PMS_OTRX, SHOW_SIGN_ANN, 
    AUT_MANUAL_SCRIPT, VIEW_SIGN_DET, SIGN_SMALL_NOTE, SIGN_NOTE_MAND, USR_AUT, RUN_EOD_HOLIDAY, 
    SVR_PHOENIX, TODO_REFRESH_TIME, SHOW_RENEWED_ACC, MULTISESSION, BIC_CODE_LIMIT, LOCAL_FUND_TRANSFER_SYS_NAME, 
    APPLY_YR_HOL, REORDER_SEQ, SIGN_DEF_AMT, GENEX_CLIENT, CIF_EMPLOYEE_FLAG, ACCESS_PRIV_FORMAT, 
    SHOW_CHANGE_NAME_FLAG, DEFAULT_TRSF_DEBT_ACC, IDLE_BEHAVIOR, CR_DR_CY_EXCH, CHANG_RUN_DTE_AFTER_HOL, 
    SIGN_LIMIT_SIZE, SIGN_LIMIT_SIZE_MAND, ARCHIVES_EOD_ALERTS, GEN_OFF_BS_ENTRIES,  
    HIDE_TRS_DEBIT_PAY, GLOBAL_AXS_PRIVILEGE, RESTRICT_GL_JV, DOT_MATRIX, ENABLE_START_END_DAY, 
    ENABLE_LOC_NATIONALITY, ATM_RECONNECT_TIME, ATM_LOG_800, ATM_LOG_ECHO, ATM_LOG_REC_MSG, 
    ATM_LOG_SENT_MSG, ATM_LOG_FILE, ATM_LOG_SENT_FILE, ATM_LOG_REC_FILE, SHOW_SIGN_LIMITSCHEMA, 
    UPDATE_CTSCTR_MAN, ENABLE_SEND_MAIL, ENABLE_SHOW_ONLY_SUSPEND_SYS, OVERDRAFT_DETAILS, 
    SMART_FIELD_MAND, REGION_MAND, CHECKSUM, AXS_MGMT_PROF_MOD, CHECK_P_FILL_MIN_MAX, 
    PCS_LOCK_TYPE, SINGLE_SIGNON, SIGN_MODE, SAFE_TRF, ARAB_ENG_CALENDAR, INTMAN_APP, 
    AUTHORIZE_REACTIVATION, SIGN_CAPT_MODE, TMP_DB_NAME, ARCH_PURGE_LIMIT_DAYS, ENABLE_LANGUAGE, 
    FILTER_SIGN, GROUP_ID_CHECK, IBAN_VALIDATION_ACTION, IBAN_VALIDATION, TOTAL_POSITION_ACC, 
    TFA_CHARGES_BALANCE, CENSUS_HOLIDAY, ENABLE_SMART_FUNC, ACTIVATE_MCASH_OVERDRAFT,DUES_DEDUCT_FRM_AVLBAL,AD_AUTH_YN, AD_SERVER,
    PWD_CHNG_PER_DAY_NO ,PWD_RESTRICT_MIRROR_YN ,PWD_RESTRICT_MIRROR_NO ,PWD_RESTRICT_MIRROR_LEFT_NO ,PWD_RESTRICT_MIRROR_RIGTH_NO,
    PWD_EXPIRY_NOTIFY_DAYS_NO, DMS_EXIST, ENABLE_ALRT_ON_USER_LOGIN_YN, ALRT_TIME_INTERVAL_HRS, ALRT_TIME_INTERVAL_MINS, ALRT_TIME_INTERVAL_SECS
    ,RJCT_PSWD_IF_NO_SPCIAL_CHAR_YN,RJCT_PSWD_MIN_SEQ_CHAR_NO,DB_NOT_CASE_SENSITIVE_YN,USER_LOGIN_CRITERIA,CONNECTIVITY_PROTOCOL,AD_PORT
    ,AD_CON_USER_NAME,AD_CON_PWD,REPORT_ORDERING,AUTO_PWD_GENERATION_YN,SMTP_SENDER,SMTP_IP,SMPT_PORT,SMTP_USER,SMTP_PASSWORD,PWD_CREATE_MSG_SUB,PWD_CREATE_MSG_BODY,PWD_REACTIVATE_MSG_SUB,
    PWD_REACTIVATE_MSG_BODY,PWD_RESET_MSG_SUB,PWD_RESET_MSG_BODY,ENABLE_CAPTCHA_YN,NBR_BEF_CAPTCHA,PWD_EXPIRY_MSG_CODE,LOGIN_SUCCESS_MSG,LOGIN_UNSUCCESS_MSG,NOTIFY_PERIOD_EXPIRE_AXS
    ,DMS_TYPE, WS_LOCATION, LOGIN_VAL_MSG , AR_MNTH_BASED_ENG, ENABLE_PORTLET_AXS_YN,AD_DOMAIN,EXCL_SUPR_USR_NUM_LOGINS_YN,EXCL_SUPR_USR_SUSPND_PERIOD_YN, ENABLE_LICENSE_MGNT_YN, ENABLE_LICENSE_MGNT_YN, DMS_TREE_ID
    from PTH_CTRL
  </select>
  
 
<!--************************************** General CONTROL RECORD (PTH_CTRL1)**************************************--> 
    <resultMap id="pthCtrl1ResultMap" type="pthCtrl1VO" >
    <result column="COL_FWD" property="COL_FWD" />
    <result column="COL_BWD" property="COL_BWD" />
    <result column="REP_DB_LOCK" property="REP_DB_LOCK" />
    <result column="REP_DB_DBPARM" property="REP_DB_DBPARM" />
    <result column="REP_DB_CONNECT" property="REP_DB_CONNECT" />
    <result column="REP_DB_DBMS" property="REP_DB_DBMS" />
    <result column="REP_DB_DATABASE" property="REP_DB_DATABASE" />
    <result column="REP_DB_USERID" property="REP_DB_USERID" />
    <result column="REP_DB_DBPASS" property="REP_DB_DBPASS" />
    <result column="REP_DB_LOGID" property="REP_DB_LOGID" />
    <result column="REP_DB_LOGPASS" property="REP_DB_LOGPASS" />
    <result column="REP_DB_SVRNAME" property="REP_DB_SVRNAME" />
    <result column="SWEEP_COL" property="SWEEP_COL" />
    <result column="SCR_ENC_FLAG" property="SCR_ENC_FLAG" />
    <result column="CARD_LIMIT_TRX" property="CARD_LIMIT_TRX" />
    <result column="EOD_SCRIPT_LOG_FLAG" property="EOD_SCRIPT_LOG_FLAG" />
    <result column="PMS_AUTO_POST" property="PMS_AUTO_POST" />
    <result column="CTS_DOF_DESC" property="CTS_DOF_DESC" />
    <result column="HIDE_FLAG" property="HIDE_FLAG" />
    <result column="CORE_SCRIPT_VERSION" property="CORE_SCRIPT_VERSION" />
    <result column="BACKUP_LEVEL" property="BACKUP_LEVEL" />
    <result column="BACKUP_PATH" property="BACKUP_PATH" />
    <result column="BACKUP_DBNAME" property="BACKUP_DBNAME" />
    <result column="DEFAULT_TYPE_OF_ISSUE" property="DEFAULT_TYPE_OF_ISSUE" />
    <result column="ENABLE_IRISGUARD" property="ENABLE_IRISGUARD" />
    <result column="OVERDRAFT_WITH_INVST" property="OVERDRAFT_WITH_INVST" />
    <result column="CLIENT_REPORT_FLAG" property="CLIENT_REPORT_FLAG" />
    <result column="REP_ALLOW_AXS_YN" property="REP_ALLOW_AXS_YN" />
    <result column="CORE_IMAL_YN" property="CORE_IMAL_YN" />
    <result column="NBR_DISPLAYED_REP_ARG_PER_ROW" 	property="NBR_DISPLAYED_REP_ARG_PER_ROW" />
    <result column="FC_REVAL_EXEC_BY_TRANS_YN" 		property="FC_REVAL_EXEC_BY_TRANS_YN" />
    <result column="PRINT_REPORT_AUDIT_YN" 			property="PRINT_REPORT_AUDIT_YN" /> 
    <result column="AUTONOMOUS_TIMEOUT_CTSCTR" 		property="AUTONOMOUS_TIMEOUT_CTSCTR" />
    <result column="ENABLE_CTSCTR_DR" 				property="ENABLE_CTSCTR_DR" />
    <result column="FILE_LOCATION_BY_COMP_YN" 		property="FILE_LOCATION_BY_COMP_YN"/>
    <result column="REP_SHOW_PARENT_OPTS" 		    property="REP_SHOW_PARENT_OPTS"/>
    <result column="REP_PRINT_PDF_YN" 		    property="REP_PRINT_PDF_YN"/>
    <result column="ALRT_OMNI_YN" property="ALRT_OMNI_YN"/>
    <result column="EU_WEBSITE" property="EU_WEBSITE"/>
	<result column="CARD_ENC_YN" property="CARD_ENC_YN"/>
	<result column="OFAC_WEBSITE" property="OFAC_WEBSITE"/>
	<result column="UN_WEBSITE" property="UN_WEBSITE"/>
	<result column="HM_WEBSITE" property="HM_WEBSITE" />
	<result column="SMART_COMMON_CUSTOMIZATION_YN" property="SMART_COMMON_CUSTOMIZATION_YN"/>
  </resultMap>
  <select id="returnPthCtrl1" resultMap="pthCtrl1ResultMap">
    SELECT  COL_FWD, 
			COL_BWD, 
			REP_DB_CONNECT, 
			REP_DB_DBMS, 
			REP_DB_DATABASE, 
			REP_DB_USERID, 
			REP_DB_DBPASS, 
			REP_DB_LOGID, 
			REP_DB_LOGPASS, 
			REP_DB_SVRNAME, 
			REP_DB_DBPARM, 
			REP_DB_LOCK, 
			SWEEP_COL, 
			EOD_SCRIPT_LOG_FLAG, 
			CARD_LIMIT_TRX, 
			SCR_ENC_FLAG, 
			PMS_AUTO_POST, 
			CTS_DOF_DESC, 
			HIDE_FLAG, 
			CORE_SCRIPT_VERSION, 
			BACKUP_LEVEL, 
			BACKUP_PATH, 
			BACKUP_DBNAME, 
			DEFAULT_TYPE_OF_ISSUE, 
			ENABLE_IRISGUARD, 
			OVERDRAFT_WITH_INVST,
			OFAC_WEBSITE, 
			UN_WEBSITE,
			CLIENT_REPORT_FLAG,
			REP_ALLOW_AXS_YN,
			CORE_IMAL_YN,
			NBR_DISPLAYED_REP_ARG_PER_ROW,
			FC_REVAL_EXEC_BY_TRANS_YN,
			PRINT_REPORT_AUDIT_YN,
			AUTONOMOUS_TIMEOUT_CTSCTR,
			ENABLE_CTSCTR_DR,
			FILE_LOCATION_BY_COMP_YN,
			REP_SHOW_PARENT_OPTS,
			REP_PRINT_PDF_YN,
			ALRT_OMNI_YN,
			EU_WEBSITE,
			CARD_ENC_YN,
			HM_WEBSITE,
			SMART_COMMON_CUSTOMIZATION_YN
    FROM PTH_CTRL1
  </select>

<!--************************************** SWIFT CONTROL RECORD (SWIFT_CONTROL)**************************************-->
<resultMap id="swiftCtrlResultMap" type="swiftControlVO" >
    <result column="FILE_MODE" property="FILE_MODE" />
    <result column="SHOW_ERR_MSG" property="SHOW_ERR_MSG" />
    <result column="PERFORMANCE" property="PERFORMANCE" />
    <result column="PREVIEW_WITH_ERROR" property="PREVIEW_WITH_ERROR" />
    <result column="FORMAT_MSG" property="FORMAT_MSG" />
    <result column="RUN_EXT_PROG" property="RUN_EXT_PROG" />
    <result column="EXT_PROG_PATH" property="EXT_PROG_PATH" />
    <result column="ACK" property="ACK" />
    <result column="REQ_GEN_950" property="REQ_GEN_950" />
    <result column="AUTOMATIC_RECON" property="AUTOMATIC_RECON" />
    <result column="RMV_CHAR_BEGIN" property="RMV_CHAR_BEGIN" />
    <result column="CHECK_USER_ACCESS" property="CHECK_USER_ACCESS" />
    <result column="CHECK_950_TRX" property="CHECK_950_TRX" />
    <result column="CHECK_950_DATE" property="CHECK_950_DATE" />
    <result column="LOG_PATH" property="LOG_PATH" />
    <result column="SAVE_PATH" property="SAVE_PATH" />
    <result column="DYNAMIC_PATH" property="DYNAMIC_PATH" />
    <result column="ARCHIVE_PATH" property="ARCHIVE_PATH" />
    <result column="LOG_IN_PATH" property="LOG_IN_PATH" />
    <result column="INWARD_PATH" property="INWARD_PATH" />
    <result column="INWARD_ACK_PATH" property="INWARD_ACK_PATH" />
    <result column="INWARD_NACK_PATH" property="INWARD_NACK_PATH" />
    <result column="TRIM_LINES" property="TRIM_LINES" />
    <result column="RMV_SPCAR" property="RMV_SPCAR" />
    <result column="UPPER_CASE" property="UPPER_CASE" />
    <result column="PROCESS_ALL_INWARD" property="PROCESS_ALL_INWARD" />
    <result column="PRINT_SWIFT" property="PRINT_SWIFT" />
    <result column="RECON_BY_TDATE" property="RECON_BY_TDATE" />
    <result column="RECON_BY_VDATE" property="RECON_BY_VDATE" />
    <result column="RECON_BY_DESC" property="RECON_BY_DESC" />
    <result column="LOG_PATH_JAVA" property="LOG_PATH_JAVA" />
    <result column="SAVE_PATH_JAVA" property="SAVE_PATH_JAVA" />
    <result column="DYNAMIC_PATH_JAVA" property="DYNAMIC_PATH_JAVA" />
    <result column="ARCHIVE_PATH_JAVA" property="ARCHIVE_PATH_JAVA" />
    <result column="LOG_IN_PATH_JAVA" property="LOG_IN_PATH_JAVA" />
    <result column="INWARD_PATH_JAVA" property="INWARD_PATH_JAVA" />
    <result column="INWARD_ACK_PATH_JAVA" property="INWARD_ACK_PATH_JAVA" />
    <result column="INWARD_NACK_PATH_JAVA" property="INWARD_NACK_PATH_JAVA" />    
    <result column="FULL_MATCH_EXPRESSION" property="FULL_MATCH_EXPRESSION" />
    <result column="FIRST_PARTIAL_MATCH" property="FIRST_PARTIAL_MATCH" />
    <result column="SECOND_PARTIAL_MATCH" property="SECOND_PARTIAL_MATCH" />
    <result column="THIRD_PARTIAL_MATCH" property="THIRD_PARTIAL_MATCH" />
    <result column="FIRST_PARTIAL_REASON" property="FIRST_PARTIAL_REASON" />
    <result column="SECOND_PARTIAL_REASON" property="SECOND_PARTIAL_REASON" />
    <result column="THIRD_PARTIAL_REASON" property="THIRD_PARTIAL_REASON" />
    <result column="NOT_IN_CORE_REASON" property="NOT_IN_CORE_REASON" />
    <result column="NOT_IN_FILE_REASON" property="NOT_IN_FILE_REASON" />
  </resultMap>
 
  <select id="returnSwiftCtrl" resultMap="swiftCtrlResultMap">
    SELECT FILE_MODE, SHOW_ERR_MSG, PREVIEW_WITH_ERROR, PERFORMANCE,
  	FORMAT_MSG, RUN_EXT_PROG, EXT_PROG_PATH, ACK, REQ_GEN_950, 
  	AUTOMATIC_RECON, RMV_CHAR_BEGIN, CHECK_USER_ACCESS, CHECK_950_TRX,
  	CHECK_950_DATE, LOG_PATH, SAVE_PATH, DYNAMIC_PATH, ARCHIVE_PATH, LOG_IN_PATH, 
  	INWARD_PATH, INWARD_ACK_PATH, INWARD_NACK_PATH, TRIM_LINES, RMV_SPCAR,
  	UPPER_CASE, PROCESS_ALL_INWARD, PRINT_SWIFT, RECON_BY_TDATE, RECON_BY_VDATE,
  	RECON_BY_DESC , LOG_PATH_JAVA, SAVE_PATH_JAVA, DYNAMIC_PATH_JAVA, ARCHIVE_PATH_JAVA,
    LOG_IN_PATH_JAVA, INWARD_PATH_JAVA, INWARD_ACK_PATH_JAVA, INWARD_NACK_PATH_JAVA,
    FULL_MATCH_EXPRESSION, FIRST_PARTIAL_MATCH, SECOND_PARTIAL_MATCH, THIRD_PARTIAL_MATCH,
    FIRST_PARTIAL_REASON, SECOND_PARTIAL_REASON, THIRD_PARTIAL_REASON, NOT_IN_CORE_REASON, NOT_IN_FILE_REASON
  	FROM SWIFT_CONTROL
  </select>

  
  <select id="fetchMakerChecker"  parameterType="string" resultType="string">
		 
		SELECT APPROVE_OWN_TRX 
		FROM USR 
		WHERE USER_ID = #{userID} 
	
	</select>
	
	<resultMap type="sysParamScreenDisplayVO" id="returnRequiredDataMap">
   <result property="COMP_CODE"        column="COMP_CODE"/>
   <result property="PROG_REF"         column="PROG_REF"/>
   <result property="ELEMENT_NAME"     column="ELEMENT_NAME"/>
   <result property="ELEMENT_ID"       column="ELEMENT_ID"/>
   <result property="VO_PROPERTY_NAME" column="VO_PROPERTY_NAME"/>
   <result property="IS_MANDATORY"     column="IS_MANDATORY"/>
   <result property="IS_VISIBLE"       column="IS_VISIBLE"/>
   <result property="IS_READONLY"      column="IS_READONLY"/>
   <result property="ARABIC_DEPENDANT" column="ARABIC_DEPENDANT"/>
   <result property="MESSAGE_CODE"     column="MESSAGE_CODE"/>
   <result property="ZERO_NOT_ALLOWED" column="ZERO_NOT_ALLOWED"/>
   <result property="TRIM_STRING"      column="TRIM_STRING"/>
   <result property="VO_CO_REFERENCE"  column="VO_CO_REFERENCE"/>
   <result property="LABEL_KEY"        column="LABEL_KEY"/>
   <result property="MAX_LENGTH"       column="MAX_LENGTH"/>
   <result property="ZERO_NOT_ALLOWED" column="ZERO_NOT_ALLOWED"/>
   <result property="PB_FIELD_NAME"    column="PB_FIELD_NAME"/>
   <result property="READONLY_EXPR"    column="READONLY_EXPR"/>
   <result property="VISIBILITY_EXPR"  column="VISIBILITY_EXPR"/>
   <result property="MANDATORY_EXPR"   column="MANDATORY_EXPR"/>
   <result property="LABEL_KEY_EXPR"   column="LABEL_KEY_EXPR"/>
   <result property="ZERO_NOT_ALLOWED_EXPR"   column="ZERO_NOT_ALLOWED_EXPR"/>
   <result property="VALUE_VALID_EXPR"   column="VALUE_VALID_EXPR"/>
   <result property="KEYBOARD_SHORTCUT_KEY"   column="KEYBOARD_SHORTCUT_KEY"/>
   <result property="DEFAULT_VALUE"   	column="DEFAULT_VALUE"/>
   <result property="ACTIVITY_TYPE"   	column="ACTIVITY_TYPE"/>
   <result property="ACTIVITY_ID"   	column="ACTIVITY_ID"/>
   <result property="SCREEN_WIDTH"   	column="SCREEN_WIDTH"/>
   <result property="SCREEN_HEIGHT"   	column="SCREEN_HEIGHT"/>
   <result property="FLD_IDENTIFIER"   	column="FLD_IDENTIFIER"/>
   <result property="MIN_LENGTH"   		column="MIN_LENGTH"/>
   <result property="ENABLE_FIELD_AUDIT_YN"		column="ENABLE_FIELD_AUDIT_YN"/>
   <result property="DEFAULT_VALUE_EXPR"		column="DEFAULT_VALUE_EXPR"/>
   <result property="DFLT_VAL_EXPR_PRIORITY_YN"	column="DFLT_VAL_EXPR_PRIORITY_YN"/>
   <result property="BACKGROUND_COLOR"	column="BACKGROUND_COLOR"/>
   <result property="BACKGROUND_COLOR_EXPR"	column="BACKGROUND_COLOR_EXPR"/>
   <result property="activitiesCount" column="ACTIVITIES_COUNT"/>
 </resultMap>
 <select id="returnRequiredData" parameterType="requiredFieldsSC" resultMap="returnRequiredDataMap">
 <!-- To select display for parent progRef of parameter progRef for any company amd not Exist in Children  -->
SELECT     P.PROG_REF
          ,P.COMP_CODE
          ,TD.ELEMENT_NAME
          ,TD.ELEMENT_ID
          ,TD.VO_PROPERTY_NAME
          ,P.IS_MANDATORY
          ,P.MANDATORY_EXPR
          ,P.IS_VISIBLE
          ,P.VISIBILITY_EXPR
          ,P.IS_READONLY
          ,P.READONLY_EXPR
          ,P.ARABIC_DEPENDANT
          ,P.MESSAGE_CODE
          ,P.ZERO_NOT_ALLOWED
          ,P.TRIM_STRING
          ,TD.VO_CO_REFERENCE
          ,P.LABEL_KEY
          ,P.MAX_LENGTH
          ,P.ZERO_NOT_ALLOWED
          ,TD.PB_FIELD_NAME
          ,P.LABEL_KEY_EXPR
          ,P.ZERO_NOT_ALLOWED_EXPR
          ,P.VALUE_VALID_EXPR
          ,P.KEYBOARD_SHORTCUT_KEY
          ,P.DEFAULT_VALUE
          ,P.ACTIVITY_TYPE
          ,P.ACTIVITY_ID
          ,P.SCREEN_WIDTH
          ,P.SCREEN_HEIGHT
          ,P.FLD_IDENTIFIER
          ,P.MIN_LENGTH
          ,P.ENABLE_FIELD_AUDIT_YN
          ,P.DEFAULT_VALUE_EXPR
          ,P.DFLT_VAL_EXPR_PRIORITY_YN
          ,rtrim(P.BACKGROUND_COLOR)BACKGROUND_COLOR			
          ,P.BACKGROUND_COLOR_EXPR		
          ,(SELECT COUNT(1)
	FROM SYS_PARAM_ELEM_ACTIVITIES S
	 WHERE S.FLD_IDENTIFIER =TD.FLD_IDENTIFIER
	 AND S.APP_NAME = #{appName}
	 AND S.PROG_REF=	P.PROG_REF )ACTIVITIES_COUNT
      FROM SYS_PARAM_SCREEN_DISPLAY P , FIELD_TECH_DETAILS TD, OPT O
     WHERE P.PROG_REF    = O.PARENT_REF 
       AND P.APP_NAME    = O.APP_NAME
       AND P.PROG_REF    = O.PARENT_REF
       <choose>
          <!-- in case of SAVEAS and there is BUS_RELATED = 1 at the current ProgRef we will get it 
               else we will check the BUS_RELATED at the original and parent of the original in order to get the needed value 
                    with priority for the original progref-->
          <when test="originalProgRef!=null">
		   AND (
		         <!-- return the data from the parent of the current progRef in case there is no Data with BUS_RELATED = 1
		              at the parent of the original progRef -->
		         (O.PROG_REF = #{progRef,jdbcType=VARCHAR}
		          AND 
		          NOT EXISTS(SELECT 1
		                        FROM SYS_PARAM_SCREEN_DISPLAY SP2, OPT O2
		                       WHERE SP2.FLD_IDENTIFIER = TD.FLD_IDENTIFIER
		                         AND SP2.PROG_REF       = O2.PARENT_REF
		                         AND SP2.APP_NAME       = O2.APP_NAME
		                         AND SP2.COMP_CODE      = P.COMP_CODE
		                         AND SP2.BUS_RELATED    = 1
		                         AND SP2.APP_NAME       = #{appName}
		                         AND SP2.PROG_REF       = #{originalProgRef})
		         )
		         OR
		         <!-- return data from the parent of the original progRef
		              in case there is data with BUS_RELATED = 1 -->
		         (O.PROG_REF = #{originalProgRef}
		           AND EXISTS(SELECT 1
		                        FROM SYS_PARAM_SCREEN_DISPLAY SP2
		                       WHERE SP2.FLD_IDENTIFIER = TD.FLD_IDENTIFIER
		                         AND SP2.PROG_REF       = O.PARENT_REF
		                         AND SP2.APP_NAME       = O.APP_NAME
		                         AND SP2.COMP_CODE      = P.COMP_CODE
		                         AND SP2.BUS_RELATED    = 1
		                         AND SP2.APP_NAME       = #{appName}))
		       )
          </when>
          <otherwise>
           AND O.PROG_REF = #{progRef,jdbcType=VARCHAR}
          </otherwise>
       </choose>
       AND P.APP_NAME = #{appName}
       AND P.FLD_IDENTIFIER  = TD.FLD_IDENTIFIER
       <!-- [MarwanMaddah]exclude the current record from the parent progRef level,
            in case there is data for the current progRef on compCode =0 OR compCode = 1 -->
       AND NOT EXISTS(SELECT 1 
                        FROM SYS_PARAM_SCREEN_DISPLAY I
                       WHERE (I.COMP_CODE = #{compCode} OR  I.COMP_CODE  = 0)
		                 AND TD.FLD_IDENTIFIER = I.FLD_IDENTIFIER
		                 AND I.APP_NAME = P.APP_NAME
		                 AND I.PROG_REF = O.PROG_REF
                        <!--[MarwanMaddah] in case the is a record at the child level with the same BUS_RELATED value or BUS_RELATED =1 
                             so the priority is to exclude this value from here(parent level) and get the value from the children -->
                        <if test="originalProgRef!=null">
                         AND (I.BUS_RELATED = P.BUS_RELATED OR I.BUS_RELATED=1)     
                        </if>    
                     )
	   AND
		   (
		      <!-- [MarwanMaddah]exclude the data of from the parent progRef and compCode = 0
		          ,in case there is data on the parent ProgRef for the Current CompCode -->
		      (
		      P.COMP_CODE = 0
		      AND NOT EXISTS(SELECT 1
		                       FROM SYS_PARAM_SCREEN_DISPLAY I
		                      WHERE I.FLD_IDENTIFIER  = TD.FLD_IDENTIFIER
		                        AND I.APP_NAME        = O.APP_NAME 
		                        AND I.PROG_REF        = O.PARENT_REF
					            AND I.COMP_CODE       = #{compCode}
		                        AND O.PROG_REF        = #{progRef,jdbcType=VARCHAR})
		      )
		      <!-- [MarwanMaddah]is to include the data that are returned from the current compCode -->
		      OR
		      P.COMP_CODE = #{compCode}
		   )

  <!-- To select display for parameter progRef for any company and not Exist in parent -->          
          UNION ALL
            SELECT  P.PROG_REF
            ,P.COMP_CODE
            ,TD.ELEMENT_NAME
            ,TD.ELEMENT_ID
            ,TD.VO_PROPERTY_NAME
            ,P.IS_MANDATORY
            ,P.MANDATORY_EXPR
            ,P.IS_VISIBLE
            ,P.VISIBILITY_EXPR
            ,P.IS_READONLY
            ,P.READONLY_EXPR
            ,P.ARABIC_DEPENDANT
            ,P.MESSAGE_CODE
            ,P.ZERO_NOT_ALLOWED
            ,P.TRIM_STRING
            ,TD.VO_CO_REFERENCE
            ,P.LABEL_KEY
            ,P.MAX_LENGTH
            ,P.ZERO_NOT_ALLOWED
            ,TD.PB_FIELD_NAME
	        ,P.LABEL_KEY_EXPR
	        ,P.ZERO_NOT_ALLOWED_EXPR
	        ,P.VALUE_VALID_EXPR
	        ,P.KEYBOARD_SHORTCUT_KEY
	        ,P.DEFAULT_VALUE
	        ,P.ACTIVITY_TYPE
	        ,P.ACTIVITY_ID
	        ,P.SCREEN_WIDTH
	        ,P.SCREEN_HEIGHT
	        ,P.FLD_IDENTIFIER
	        ,P.MIN_LENGTH
			,P.ENABLE_FIELD_AUDIT_YN
            ,P.DEFAULT_VALUE_EXPR
            ,P.DFLT_VAL_EXPR_PRIORITY_YN
            ,P.BACKGROUND_COLOR			
            ,P.BACKGROUND_COLOR_EXPR			
            ,(SELECT COUNT(1)
	FROM SYS_PARAM_ELEM_ACTIVITIES S
	 WHERE S.FLD_IDENTIFIER =TD.FLD_IDENTIFIER
	 AND S.APP_NAME = #{appName}
	 AND S.PROG_REF=	P.PROG_REF ) ACTIVITIES_COUNT	
      FROM SYS_PARAM_SCREEN_DISPLAY P, FIELD_TECH_DETAILS TD
      WHERE  P.APP_NAME = #{appName}
            <choose>
	          <!-- in case of SAVEAS and there is BUS_RELATED = 1 at the current ProgRef we will get it 
	               else we will check the BUS_RELATED at the original and parent of the original in order to get the needed value 
	                    with priority for the original progref-->
             <when test="originalProgRef!=null">
			   AND (
			         <!-- return information from the current progRef 
			              in case there is no data with BUS_RELATED = 1 at the Original ProgRef -->
			         (P.PROG_REF = #{progRef,jdbcType=VARCHAR}
			          AND 
			          NOT EXISTS(SELECT 1
			                       FROM SYS_PARAM_SCREEN_DISPLAY SP1
			                      WHERE SP1.FLD_IDENTIFIER = TD.FLD_IDENTIFIER
			                        AND SP1.COMP_CODE   = P.COMP_CODE
			                        AND SP1.APP_NAME    = #{appName}
			                        AND SP1.BUS_RELATED = 1
			                        AND SP1.PROG_REF    = #{originalProgRef})
			         )
			         OR
			         <!-- return information from the Original progRef in case there is data at this level -->
			         (P.PROG_REF = #{originalProgRef} 
			          AND EXISTS(SELECT 1
			                       FROM SYS_PARAM_SCREEN_DISPLAY SP1
			                      WHERE SP1.FLD_IDENTIFIER = TD.FLD_IDENTIFIER
			                        AND SP1.COMP_CODE      = P.COMP_CODE
			                        AND SP1.APP_NAME       = #{appName}
			                        AND SP1.BUS_RELATED    = 1
			                        AND SP1.PROG_REF       = #{originalProgRef}))
			       )
             </when>
             <otherwise>
              AND P.PROG_REF = #{progRef,jdbcType=VARCHAR}
             </otherwise>
            </choose>
            AND P.FLD_IDENTIFIER  = TD.FLD_IDENTIFIER
	        AND (
	      		(P.COMP_CODE = 0
	        	 AND NOT EXISTS(SELECT 1  
	        	                  FROM SYS_PARAM_SCREEN_DISPLAY D
		                         WHERE D.FLD_IDENTIFIER = TD.FLD_IDENTIFIER
		                           AND D.APP_NAME       = P.APP_NAME
					               AND D.COMP_CODE      = #{compCode}
		                           AND D.PROG_REF       = #{progRef,jdbcType=VARCHAR}
	                         )
	            )
	            OR
	            (P.COMP_CODE = #{compCode} ) 
	           )   
   </select>
   <resultMap type="sysParamScreenDisplayVO" id="requiredDataByTrxTypeMap">
	   <result property="COMP_CODE"        column="COMP_CODE"/>
	   <result property="PROG_REF"        column="PROG_REF"/>
	   <result property="ELEMENT_NAME"     column="ELEMENT_NAME"/>
	   <result property="ELEMENT_ID"       column="ELEMENT_ID"/>
	   <result property="VO_PROPERTY_NAME" column="VO_PROPERTY_NAME"/>
	   <result property="IS_MANDATORY"     column="IS_MANDATORY"/>
	   <result property="IS_VISIBLE"       column="IS_VISIBLE"/>
	   <result property="IS_READONLY"      column="IS_READONLY"/>
	   <result property="VO_CO_REFERENCE"  column="VO_CO_REFERENCE"/>
	   <result property="LABEL_KEY"        column="LABEL_KEY"/>
	   <result property="labelKeyVal"      column="DISPLAY_LABEL_AR"/>
	   <result property="PB_FIELD_NAME"    column="FIELD_NAME"/>
	   <result property="ENABLE_FIELD_AUDIT_YN"    column="ENABLE_FIELD_AUDIT_YN"/>
	   <result property="MIN_LENGTH"    column="MIN_LENGTH"/>
	   <result property="MAX_LENGTH"    column="MAX_LENGTH"/>
	   <result property="FLD_IDENTIFIER"    column="FLD_IDENTIFIER"/>
		<result property="activitiesCount" column="ACTIVITIES_COUNT"/>
   </resultMap>
   <select id="requiredDataByTrxType" parameterType="requiredFieldsSC" resultMap="requiredDataByTrxTypeMap">
	SELECT
	       'D001' PROG_REF,
	       d.COMP_CODE        as COMP_CODE,
	       TD.ELEMENT_NAME    as ELEMENT_NAME,
	       TD.ELEMENT_ID      as ELEMENT_ID,
	       TD.VO_PROPERTY_NAME as VO_PROPERTY_NAME,
	       (CASE WHEN d.MANDATORY='N' THEN 0 ELSE 1 END) IS_MANDATORY,
	       <choose>
			   <when test="cifNo == 0 or cifNo == null or cifNo == emptyBigDecimalValue">
			   	(CASE WHEN d.HIDE_FIELD = 'N' THEN 1 ELSE 0 END) IS_VISIBLE,
			   <choose>
			   	<when test=" trsNo != null and trsNo != emptyBigDecimalValue ">
		            <!--  (
		              CASE WHEN
		                       EXISTS(
								SELECT 1 
								  FROM CTSTRS 
								 WHERE BRANCH_CODE = #{branchCode}
								   AND CB_IND      = #{cbInd}
								   AND COMP_CODE   = #{compCode}
								   AND TRS_NO      = #{trsNo}
								   AND TRS_TYPE    = #{trsType}
								   AND CREATED_BY  = #{loginUserId}
		                       )  
		                   THEN
		                       (CASE WHEN d.PROTECTED = 'N' THEN 0 ELSE 1 END) 
		                   ELSE
		                       (CASE WHEN d.BLOCK_MODIFY = 'N' AND d.PROTECTED = 'N' THEN 0 ELSE 1 END) 
		               END
		            )  --> 
		            (CASE WHEN d.BLOCK_MODIFY = 'N' AND d.PROTECTED = 'N' THEN 0 ELSE 1 END) 
                </when>
                <otherwise>
                  (CASE WHEN d.PROTECTED = 'N' THEN 0 ELSE 1 END)
                </otherwise>
               </choose>
           			IS_READONLY,
			   </when>
			   <otherwise>
			   (
			   	   SELECT
				   	 (CASE WHEN CTSTRXTYPE_DET.HIDE_FIELD = 'N' THEN 1 ELSE 0 END) IS_VISIBLE
				   	FROM CTSTRXTYPE_DET
				   	 WHERE CTSTRXTYPE_DET.COMP_CODE = d.COMP_CODE
				   	  AND  CTSTRXTYPE_DET.CODE      = d.CODE
				   	  AND  CTSTRXTYPE_DET.LINE_NBR  = d.LINE_NBR 
				   	  AND  CTSTRXTYPE_DET.CIF_NO    = 0
			   	) IS_VISIBLE,
			   	
			   	 (SELECT
			   <choose>
			   	<when test=" trsNo != null and trsNo != emptyBigDecimalValue ">
		             <!-- (
		              CASE WHEN
		                       EXISTS(
								SELECT 1 
								  FROM CTSTRS 
								 WHERE BRANCH_CODE = #{branchCode}
								   AND CB_IND      = #{cbInd}
								   AND COMP_CODE   = #{compCode}
								   AND TRS_NO      = #{trsNo}
								   AND TRS_TYPE    = #{trsType}
								   AND CREATED_BY  = #{loginUserId}
		                       )  
		                   THEN
		                       (CASE WHEN CTSTRXTYPE_DET.PROTECTED = 'N' THEN 0 ELSE 1 END) 
		                   ELSE
		                       (CASE WHEN CTSTRXTYPE_DET.BLOCK_MODIFY = 'N' AND CTSTRXTYPE_DET.PROTECTED = 'N' THEN 0 ELSE 1 END) 
		               END
		            ) --> 
		            (CASE WHEN d.BLOCK_MODIFY = 'N' AND d.PROTECTED = 'N' THEN 0 ELSE 1 END) 
                </when>
                <otherwise>
                  (CASE WHEN CTSTRXTYPE_DET.PROTECTED = 'N' THEN 0 ELSE 1 END)
                </otherwise>
               </choose>
			   	   	FROM CTSTRXTYPE_DET
				   	 WHERE CTSTRXTYPE_DET.COMP_CODE = d.COMP_CODE
				   	  AND  CTSTRXTYPE_DET.CODE      = d.CODE
				   	  AND  CTSTRXTYPE_DET.LINE_NBR  = d.LINE_NBR 
				   	  AND  CTSTRXTYPE_DET.CIF_NO    = 0)  IS_READONLY,
			   </otherwise>
			  
	   		</choose>
	       TD.VO_CO_REFERENCE  as VO_CO_REFERENCE,
	       (CASE WHEN #{preferredLanguage,jdbcType=VARCHAR}= 'A' THEN  d.DISPLAY_LABEL_AR else d.DISPLAY_LABEL end) LABEL_KEY,
	       <!-- DISPLAY_LABEL_AR IS USED TO DISPLAY ARABIC LABEL FROM FOM SCREEN (TRANSACTION DETAILS BUTTON) whatever the preferred language -->
	       d.DISPLAY_LABEL_AR,
	       d.FIELD_NAME,
	       20319 as MESSAGE_CODE,
	       (SELECT P.ENABLE_FIELD_AUDIT_YN
	          FROM SYS_PARAM_SCREEN_DISPLAY P
	         WHERE P.COMP_CODE = 0
	           AND P.APP_NAME = 'RET'
	           AND P.FLD_IDENTIFIER = TD.FLD_IDENTIFIER
	           AND P.PROG_REF = 'D001') ENABLE_FIELD_AUDIT_YN,
	       d.MIN_LENGTH,
		   d.MAX_LENGTH,
		   TD.FLD_IDENTIFIER,
		   0 ACTIVITIES_COUNT
	  FROM CTSTRXTYPE_DET d, CTSTRXTYPE_STD s, FIELD_TECH_DETAILS TD
	 WHERE d.COMP_CODE = #{compCode}
	   AND d.CODE      = #{trxType}
	   AND d.LINE_NBR  = s.LINE_NBR
	   AND TD.ENTITY_TYPE = 'CTSTRS'
	   AND TD.PB_FIELD_NAME = s.FIELD_NAME_DB
	   <choose>
		   <when test="cifNo != null">
		   		AND d.CIF_NO = #{cifNo,jdbcType=NUMERIC}
		   </when>
		   <otherwise>
		   		AND d.CIF_NO = 0
		   </otherwise>
	   </choose>
	    <if  test='"1".equals(allowModifyInFom)' >
	     and s.ALLOW_MODIFY_IN_FOM_YN = '1'
	   </if>
   </select>	
	     
   <select id="requiredDataByCifType" parameterType="requiredFieldsSC" resultMap="requiredDataByTrxTypeMap">
	     SELECT D.COMP_CODE as COMP_CODE,
		        TD.PB_FIELD_NAME,
		        TD.ELEMENT_NAME as ELEMENT_NAME,
		        TD.ELEMENT_ID as ELEMENT_ID,
		        TD.VO_PROPERTY_NAME as VO_PROPERTY_NAME,
		        D.IS_MANDATORY,  									   <!-- (CASE WHEN 'Y' = 'N' THEN 0 ELSE 1 END)  -->
		        (CASE WHEN 'N' = 'N' THEN 1 ELSE 0 END) IS_VISIBLE,    <!-- d.HIDE_FIELD -->
		        (CASE WHEN 'N' = 'N' THEN 0 ELSE 1 END) IS_READONLY,   <!-- d.PROTECTED -->
		        TD.VO_CO_REFERENCE  as VO_CO_REFERENCE,
		        NULL as LABEL_KEY,									   <!-- d.DISPLAY_LABEL -->
		        NULL as FIELD_NAME,									   <!-- d.FIELD_NAME -->
	       		20319 as MESSAGE_CODE,
	       		0 ACTIVITIES_COUNT
		  FROM RIFCTT_DET D, RIFCTT_STD S, FIELD_TECH_DETAILS TD
		 WHERE D.COMP_CODE = #{compCode}
		   AND D.TYPE_CODE = #{cifType}
		   AND D.FIELD_NO = S.FIELD_NO
		   AND TD.ENTITY_TYPE = 'CIF'
		   AND TD.PB_FIELD_NAME = S.DW_FIELD_NAME
   </select>	
<!--************************************** Common Privileges Query**************************************-->	
	<sql id="select_Common_Priveleges">
		<include refid="commonLibMapper.accessFromAXS"/>
		<if test='profType == "1"'>
			UNION
			<include refid="commonLibMapper.accessByUser"/>
			UNION
			<include refid="commonLibMapper.accessByGroup"/>
		</if>
	</sql>
	
	<sql id="accessFromAXS">
		SELECT AXS.PROG_REF
		  FROM AXS
		 WHERE (USER_ID    = #{userId}
		       AND
			   (
			     (
					(
						COMP_CODE = #{compCode} 
						AND  BRANCH_CODE = #{branchCode}
					)
					OR
					(
						COMP_CODE = 0 
						AND  BRANCH_CODE = 0 
					) 	
				 )
				 AND  APP_NAME    = #{appName}
				 AND  STATUS      = 'P'
			   )
			   AND ( ( ACCESS_FROM_DATE IS NULL OR ACCESS_FROM_DATE <![CDATA[ <= ]]> <choose><when test="isSybase == 1" >GETDATE()</when><otherwise>SYSDATE</otherwise></choose> ) AND ( ACCESS_TO_DATE IS NULL OR ACCESS_TO_DATE <![CDATA[ >= ]]> <choose><when test="isSybase == 1" >GETDATE()</when><otherwise>SYSDATE</otherwise></choose> ) )
		     )
	        <if test='"SADS" == appName'>
			 OR((SELECT PATH_STS FROM USR WHERE USER_ID = #{userId}) = '1'
			    AND
			     (
					(
						COMP_CODE = #{compCode} 
						AND  BRANCH_CODE = #{branchCode}
					)
					OR
					(
						COMP_CODE = 0 
						AND  BRANCH_CODE = 0 
					) 	
				 )
                AND
                EXISTS (SELECT 1 FROM OPT WHERE OPT.PROG_REF = AXS.PROG_REF AND OPT.APP_NAME = #{appName})
			   )
	        </if>
	</sql>
		
	<sql id="accessByUser">
		SELECT S_ROLE_DETAIL.PROG_REF
		FROM S_APPROLUSR, S_ROLE_DETAIL
		WHERE   S_APPROLUSR.ROLE_NAME = S_ROLE_DETAIL.ROLE_NAME
			AND S_APPROLUSR.APP_NAME = S_ROLE_DETAIL.APP_NAME 
			
			AND S_APPROLUSR.USER_ID     = #{userId}
			AND S_APPROLUSR.COMP_CODE   = #{compCode}
			AND S_APPROLUSR.BRANCH_CODE = #{branchCode}
			AND S_APPROLUSR.APP_NAME    = #{appName}
			AND S_APPROLUSR.STATUS      = 'P'			
			AND S_ROLE_DETAIL.STATUS    = 'P'
	</sql>         
		
	<sql id="accessByGroup">
		SELECT S_ROLE_DETAIL.PROG_REF
		FROM S_GROUP_USER, S_GROUP_PROFILE, S_ROLE_DETAIL
		WHERE   S_GROUP_USER.GROUP_ID = S_GROUP_PROFILE.GROUP_ID
			AND S_GROUP_PROFILE.ROLE_NAME = S_ROLE_DETAIL.ROLE_NAME
			AND S_GROUP_PROFILE.APP_NAME = S_ROLE_DETAIL.APP_NAME
			AND (S_GROUP_USER.COMP_CODE = CASE WHEN #{compCode} = 0 THEN S_GROUP_USER.COMP_CODE ELSE #{compCode} END
					OR S_GROUP_USER.COMP_CODE = 0)
			AND (S_GROUP_USER.BRANCH_CODE = CASE WHEN #{branchCode} = 0 THEN S_GROUP_USER.BRANCH_CODE ELSE #{branchCode} END
					OR S_GROUP_USER.BRANCH_CODE = 0 )
			AND S_GROUP_USER.USER_ID = #{userId}
			AND S_GROUP_USER.STATUS = 'P'
			AND ( ( S_GROUP_USER.FROM_DATE IS NULL OR S_GROUP_USER.FROM_DATE <![CDATA[ <= ]]> <choose><when test="isSybase == 1" >GETDATE()</when><otherwise>SYSDATE</otherwise></choose> ) AND ( S_GROUP_USER.TO_DATE IS NULL OR S_GROUP_USER.TO_DATE <![CDATA[ >= ]]> <choose><when test="isSybase == 1" >GETDATE()</when><otherwise>SYSDATE</otherwise></choose> ) )
			
			AND S_GROUP_PROFILE.APP_NAME = #{appName}
			AND S_GROUP_PROFILE.STATUS   = 'P'		
			AND S_ROLE_DETAIL.STATUS     = 'P'
			
			AND NOT EXISTS (SELECT 1 FROM S_GROUP_USER_EXCLUSION 
                                                WHERE S_GROUP_USER_EXCLUSION.USER_ID = S_GROUP_USER.USER_ID 
                                                      AND S_GROUP_USER_EXCLUSION.GROUP_ID = S_GROUP_USER.GROUP_ID
                                                      AND S_GROUP_USER_EXCLUSION.COMP_CODE = S_GROUP_USER.COMP_CODE
                                                      AND S_GROUP_USER_EXCLUSION.BRANCH_CODE = S_GROUP_USER.BRANCH_CODE
                                                      AND S_GROUP_USER_EXCLUSION.ROLE_NAME = S_GROUP_PROFILE.ROLE_NAME
                                                ) 
	</sql>
	
	<select id="checkAccessByProgRef" resultType="java.lang.String" parameterType="commonLibSC">
		SELECT ACCESSTBL.PROG_REF
		  FROM (
		         <choose>
		           <when test='"SADS" == appName'>
		               SELECT OPT.PROG_REF 
		                 FROM OPT 
		                WHERE OPT.PROG_REF = #{progRef} AND OPT.APP_NAME = #{appName}
		                  AND (SELECT PATH_STS FROM USR WHERE USER_ID = #{userId}) = '1'
		               UNION ALL
		               SELECT ACCTB.PROG_REF
		                 FROM
		                    (
		                      <include refid="commonLibMapper.select_Common_Priveleges"/>
		                    )ACCTB
		                WHERE (SELECT PATH_STS FROM USR WHERE USER_ID = #{userId}) <![CDATA[<>]]> '1'   
		           </when>
		           <otherwise>
		              <include refid="commonLibMapper.select_Common_Priveleges"/>
		           </otherwise>
		         </choose>
	 	       )ACCESSTBL
	 	 WHERE ACCESSTBL.PROG_REF = #{progRef,jdbcType=VARCHAR}
	</select>
		
<!--************************************** FISCAL YEAR (YRT)**************************************-->
  <resultMap id="yrtResultMap" type="yrtVO" >
    <id column="FISCAL_YEAR" property="FISCAL_YEAR" />
    <id column="MONTH" property="MONTH" />
    <result column="YEAR" property="YEAR" />
    <result column="STATUS" property="STATUS" />
  </resultMap>

  <select id="returnYrtDetails" parameterType="yrtSC"  resultMap="yrtResultMap">
	SELECT  FISCAL_YEAR, MONTH, YEAR, STATUS 
	FROM YRT  
	WHERE COMP_CODE  = #{compCode, mode=IN,jdbcType=NUMERIC}    
    AND  BRANCH_CODE = #{branchCode, mode=IN,jdbcType=NUMERIC} 	    
    AND  YEAR        = #{year, mode=IN,jdbcType=NUMERIC}		    
    AND  MONTH       = #{month, mode=IN,jdbcType=NUMERIC}
  </select> 

	<select id="selectExchangeRate" parameterType="commonLibSC" resultType="Double">
		<include refid="commonLibMapper.getExchangeRate" />		
	</select>
	
	<sql id="getExchangeRate">	
	
	  <choose>
		  <when test="isSybase == 1"> 
			<![CDATA[
				SELECT case when MAX(EX1.M_RATE) is null then 0 else MAX(EX1.M_RATE) end
				FROM EXCH_RAT EX1
				WHERE
				EX1.COMP_CODE 			= #{companyCode}
				AND EX1.CURRENCY_CODE 	= #{accCurrency}
				AND CONVERT(DATETIME, CONVERT(VARCHAR,DATE_RATE,103 ) + '' + TIME ,103) =
				(SELECT MAX(CONVERT(DATETIME,CONVERT(VARCHAR, DATE_RATE,103 ) + '' + TIME,103))
				FROM EXCH_RAT EX2
				WHERE EX2.COMP_CODE 	= #{companyCode}
				AND EX2.CURRENCY_CODE 	= EX1.CURRENCY_CODE
				AND EX2.DATE_RATE 		<= #{selectedDate}) 
			]]>	 
			</when>
			<otherwise>
				<![CDATA[
			  SELECT case when MAX(EX1.M_RATE) is null then 0 else MAX(EX1.M_RATE) end
				FROM EXCH_RAT EX1
				WHERE
				EX1.COMP_CODE 			= #{companyCode}
				AND EX1.CURRENCY_CODE 	= #{accCurrency}
			 AND    TO_DATE( TO_CHAR( DATE_RATE,'DD/MM/YYYY')||TIME, 'DD/MM/YYYYHH24:MI:SS') =
	         (select   MAX(TO_DATE( TO_CHAR( DATE_RATE , 'DD/MM/YYYY')||TIME, 'DD/MM/YYYYHH24:MI:SS'))
			 FROM EXCH_RAT EX2
				WHERE EX2.COMP_CODE 	= #{companyCode}
				AND EX2.CURRENCY_CODE 	= EX1.CURRENCY_CODE
				AND EX2.DATE_RATE 		<= #{selectedDate}) 
			]]>	 
			</otherwise>
		 </choose>
		
		
	</sql>
	
	


	<update id="updateAccountsDetails" parameterType="accountCO">
	
	UPDATE  AMF
		      <set> 
		    	
			   
			       			      
			       <if  test='updateStatusToOldStatus.equals("1")' >
			        STATUS = OLD_STATUS ,
			       </if>    
			        <if test="amfVO.STATUS!=null ">	
			        STATUS =  #{amfVO.STATUS,jdbcType=VARCHAR},
			        </if>
			        
			        <if  test='updateOldStatusToStatus.equals("1")' >
			        OLD_STATUS = STATUS ,
			        </if>
			        <if test="amfVO.OLD_STATUS!=null">		  
				    OLD_STATUS        =#{amfVO.OLD_STATUS,jdbcType=VARCHAR},
				    </if>
			       		 
			       		 
			        <if test='nullOldStatus.equals("1")' >	
				    OLD_STATUS     = Null ,
				    </if> 
				  
				     <if test='nullSuspendBy.equals("1")' >	
				    SUSPENDED_BY     = Null,
				    </if> 
			       	 <if test='nullDateSuspended.equals("1")' >	
				    DATE_SUSPENDED     = Null,
				    </if> 
			       	<if test='nullSuspendReason.equals("1")' >	
				    SUSPEND_REASON     = Null,
				    </if> 	 	 
			      
			     	 
			       	<if test="amfVO.SUSPENDED_BY!=null">		  
				    SUSPENDED_BY        =#{amfVO.SUSPENDED_BY,jdbcType=VARCHAR},
				    </if>
				    <if test="amfVO.DATE_SUSPENDED!=null">
				    DATE_SUSPENDED      =#{amfVO.DATE_SUSPENDED},
				    </if>
				      <if test="amfVO.SUSPEND_REASON!=null">
				    SUSPEND_REASON      = #{amfVO.SUSPEND_REASON,jdbcType=NUMERIC},
				    </if>
				    
				     <if test="amfVO.REINSTATED_BY!=null">	
				    REINSTATED_BY      	= #{amfVO.REINSTATED_BY,jdbcType=VARCHAR} , 
				    </if>
				    <if test="amfVO.DATE_REINSTATED!=null">	
				    DATE_REINSTATED     = #{amfVO.DATE_REINSTATED} ,	
				    </if>
				    
				    
				    
				    
				    
				    
		       </set>
		   <where>
		   
			 <if test="amfSC.COMP_CODE!=null">	
			  COMP_CODE 	 	= #{amfSC.COMP_CODE,jdbcType=NUMERIC}
			  </if>
			  <if test="amfSC.BRANCH_CODE!=null">		    
			AND 	BRANCH_CODE 	= #{amfSC.BRANCH_CODE,jdbcType=NUMERIC}
			 </if>
			 <if test="amfSC.CURRENCY_CODE!=null">	
			AND 	CURRENCY_CODE 	= #{amfSC.CURRENCY_CODE,jdbcType=NUMERIC}
			</if>
			  <if test="amfSC.GL_CODE!=null">	
			AND 	GL_CODE_CODE 	= #{amfSC.GL_CODE,jdbcType=NUMERIC}
			</if>	
			<if test="amfSC.CIF_SUB_NO!=null">
			AND 	CIF_SUB_NO 	 	= #{amfSC.CIF_SUB_NO,jdbcType=NUMERIC}
			</if>		   
			 <if test="amfSC.SL_NO!=null">
			AND 	SL_NO 			= #{amfSC.SL_NO,jdbcType=NUMERIC}
			</if>
		   
		    <if test="gmiList.size() > 0"> 
             and GMI_FLAG  IN 
                <foreach item="item" index="index" open="(" close=")" separator="," collection="gmiList" > 
                 #{item} 
                 </foreach>
           </if> 
			
			<if test="statusList.size() > 0"> 
             and STATUS  IN 
                <foreach item="item" index="index" open="(" close=")" separator="," collection="statusList" > 
                 #{item} 
                 </foreach>
           </if> 
           
           <if test="oldStatusList.size() > 0"> 
             and OLD_STATUS  IN 
                <foreach item="item" index="index" open="(" close=")" separator="," collection="oldStatusList" > 
                 #{item} 
                 </foreach>
           </if> 
           
           
           
              <if test="amfSC.DATE_SUSPENDED!=null">	
				and    DATE_SUSPENDED     = #{amfSC.DATE_SUSPENDED,jdbcType=DATE} 
			 </if>
						
		
		   </where>
	
	</update>
	
	
	 <select id="checkAccountValidation" parameterType="accountSC" resultType="accountVO" >
	
		select 
		
		 <choose >
	        <when test="isSybase == 1" >
	       TOP 1 
	        </when>
            </choose>
		<include refid="AMF.Base_Column_List" />
		
		  from AMF 
		 <where>
		 
		   <if test="compCode != null and compCode != emptyBigDecimalValue"> 
		   and COMP_CODE     = #{compCode, jdbcType=NUMERIC}
		   </if>
		   <if test="branchCode != null and branchCode != emptyBigDecimalValue"> 		    
		   AND 	BRANCH_CODE 	= #{branchCode,jdbcType=NUMERIC}
		    </if>
		 
		   <if test="currencyCode != null and currencyCode != emptyBigDecimalValue"> 
		   and CURRENCY_CODE = #{currencyCode, jdbcType=NUMERIC}
		   </if>
		     <if test="glCode != null and glCode != emptyBigDecimalValue"> 
		   and GL_CODE       = #{glCode, jdbcType=NUMERIC}
		   </if>
		   <if test="cifCode != null and cifCode != emptyBigDecimalValue"> 
		   and CIF_SUB_NO    = #{cifCode, jdbcType=NUMERIC}
		    </if>
		   <if test="slNbr != null and slNbr != emptyBigDecimalValue"> 
		   and SL_NO         = #{slNbr, jdbcType=NUMERIC}
		   </if>
		   
		   <if test="gmiList.size() > 0"> 
             and GMI_FLAG  IN 
                <foreach item="item" index="index" open="(" close=")" separator="," collection="gmiList" > 
                 #{item} 
                 </foreach>
           </if>
           
            <if test="statusIncludeList.size() > 0"> 
             and STATUS IN 
                <foreach item="item" index="index" open="(" close=")" separator="," collection="statusIncludeList" > 
                 #{item} 
                 </foreach>
           </if>
           
           <if test="statusExcludeList.size() > 0"> 
             and STATUS NOT IN 
                <foreach item="item" index="index" open="(" close=")" separator="," collection="statusExcludeList" > 
                 #{item} 
                 </foreach>
           </if>
           
           
              <choose >
	        <when test="isOracle == 1" >
	         AND ROWNUM=1
	        </when>
            </choose>
		   
		   </where> 
		   
	</select>
	
	
	 <select id="returnConvertDateGregoHijri" parameterType="trsHijriDetailCalendarVO"
		resultType="trsHijriDetailCalendarVO">
		SELECT HIJRI_YEAR,HIJRI_MONTH,HIJRI_DAY, GREGORIAN_DATE   
		FROM TRSHIJRI_DETAIL_CALENDAR
		WHERE COMP_CODE = #{COMP_CODE} 
		
		  <choose>
          <when test="GREGORIAN_DATE != null" >
           <choose>
             <when test="isSybase == 1">										
               AND CONVERT(DATETIME, CONVERT(VARCHAR,GREGORIAN_DATE,103),103) = CONVERT(DATETIME, CONVERT(VARCHAR,#{GREGORIAN_DATE, jdbcType=TIMESTAMP },103),103) 
             </when>
           <otherwise>
               AND TO_DATE(TO_CHAR( GREGORIAN_DATE,'DD/MM/YYYY'), 'DD/MM/YYYY') = TO_DATE(TO_CHAR(#{GREGORIAN_DATE, jdbcType=TIMESTAMP},'DD/MM/YYYY') , 'DD/MM/YYYY')
           </otherwise>
           </choose>
          </when>
          <otherwise>
            AND HIJRI_YEAR   = #{HIJRI_YEAR}
			AND HIJRI_MONTH  = #{HIJRI_MONTH}
			AND HIJRI_DAY    = #{HIJRI_DAY}
          </otherwise>
        </choose>
	</select>
	
	<select id="getChequeBookStatus" parameterType="chequeSC"		
		resultType="java.lang.String">
		SELECT 	STATUS 
		FROM  	CTSCHEQUEBOOK_STATUS 
		WHERE	CTSCHEQUEBOOK_STATUS.COMP_CODE   =  #{compCode,jdbcType=NUMERIC}
			AND		CTSCHEQUEBOOK_STATUS.ACC_CIF =  #{ACC_CIF,jdbcType=NUMERIC}
			AND 	CTSCHEQUEBOOK_STATUS.ACC_BR  =  #{ACC_BR,jdbcType=NUMERIC}
			AND 	CTSCHEQUEBOOK_STATUS.ACC_CY  =  #{ACC_CY,jdbcType=NUMERIC}
			AND 	CTSCHEQUEBOOK_STATUS.ACC_GL  =  #{ACC_GL,jdbcType=NUMERIC}
			AND		CTSCHEQUEBOOK_STATUS.ACC_SL  =  #{ACC_SL,jdbcType=NUMERIC}
		
		<if test="fromNumber != null">
			
			<if test="toNumber != null">
			AND		CTSCHEQUEBOOK_STATUS.CHQ_NUM BETWEEN #{fromNumber,jdbcType=NUMERIC} AND #{toNumber,jdbcType=NUMERIC}
			</if>
			
			<if test="toNumber == null">
			AND		CTSCHEQUEBOOK_STATUS.CHQ_NUM = #{fromNumber,jdbcType=NUMERIC}
			</if>
			
		</if>
		
		<if test="inStatusList != null and inStatusList.size() > 0"> 
	        AND 	CTSCHEQUEBOOK_STATUS.STATUS IN
	        <foreach item="item" index="index" open="(" close=")" separator="," collection="inStatusList" >
	        #{item} 
	        </foreach>
	    </if>
		
		<if test="notInStatusList != null and notInStatusList.size() > 0"> 
	        AND 	CTSCHEQUEBOOK_STATUS.STATUS NOT IN
	        <foreach item="item" index="index" open="(" close=")" separator="," collection="notInStatusList" >
	        #{item} 
	        </foreach>
	    </if>
	    
	</select>
	
	<sql id="chequeAlreadyDrawnSelect">
		<![CDATA[	
		SELECT COUNT(1)	
		FROM CTSTRS, CTSTRXTYPE
		WHERE  CTSTRS.COMP_CODE = #{compCode,jdbcType=NUMERIC}
		AND  CTSTRS.TRS_TYPE = 'R'					
		AND	 CTSTRS.CB_IND = 'C'				
		AND  (#{transactionNO,jdbcType=NUMERIC} = 0 OR CTSTRS.TRS_NO  <>  #{transactionNO,jdbcType=NUMERIC}) 		
		AND	 CTSTRS.CHQ_NUM	BETWEEN #{fromNumber,jdbcType=NUMERIC} AND #{toNumber,jdbcType=NUMERIC}	
		AND  CTSTRS.COMP_CODE = CTSTRXTYPE.COMP_CODE
		AND	 CTSTRS.TRX_TYPE = CTSTRXTYPE.CODE
		]]>	
	</sql>
	
	<select id="chequeAlreadyDrawn" parameterType="chequeSC" resultType="BigDecimal">
	 
		 <include refid="commonLibMapper.chequeAlreadyDrawnSelect"/>
		 
		 <if test="inStatusList != null and inStatusList.size() > 0"> 
	         AND CTSTRS.STATUS IN
	         <foreach item="item" index="index" open="(" close=")" separator="," collection="inStatusList" > 
	         #{item} 
	         </foreach>
	     </if>
			   
		 <if test='	chequeUnique != null and chequeUnique == "A"'>
		 	AND	CTSTRS.TO_TRS_AC_BR		= #{ACC_BR,jdbcType=NUMERIC}
			AND	CTSTRS.TO_TRS_AC_CY		= #{ACC_CY,jdbcType=NUMERIC}	
			AND	CTSTRS.TO_TRS_AC_GL		= #{ACC_GL,jdbcType=NUMERIC}	
			AND	CTSTRS.TO_TRS_AC_CIF	= #{ACC_CIF,jdbcType=NUMERIC}	
			AND	CTSTRS.TO_TRS_AC_SL		= #{ACC_SL,jdbcType=NUMERIC}
			
			<if test="flag == null">
			AND	((CTSTRXTYPE.TYPE 		= 'D' AND	CTSTRXTYPE.CHQ_RELATED  = 'H' )
				OR 	 (CTSTRXTYPE.TYPE 		= 'T'	AND 	CTSTRXTYPE.UTILITY_PAYMENT = '1' AND CTSTRS.TRSFR_METHOD = 'Q'))
			</if>
			
			<if test='flag != null and flag == "0"'>
			AND	((CTSTRXTYPE.TYPE 	= 'W' AND  (CTSTRXTYPE.CHQ_RELATED = 'H' 	OR CTSTRXTYPE.CHQ_RELATED = 'C' ))
				OR  (CTSTRXTYPE.TYPE 	= 'T'	AND 	CTSTRXTYPE.UTILITY_PAYMENT = '1' AND CTSTRS.TRSFR_METHOD = 'Q'))
			</if>
			 
		 </if>
		 
	 	 <if test='	chequeUnique != null and chequeUnique == "B" '>
		 	AND	CTSTRS.TO_TRS_AC_BR		= #{ACC_BR,jdbcType=NUMERIC}
		 	
		 	<if test="flag == null">
		 	AND	CTSTRXTYPE.TYPE		= 'W' and CTSTRXTYPE.CHQ_RELATED in ('H','C')
		 	</if>
			
			<if test='flag != null and flag == "0"'>
			AND	CTSTRXTYPE.TYPE		= 'D' and CTSTRXTYPE.CHQ_RELATED = 'H'
			</if> 
			
		 </if>
		 
		 <if test='	chequeUnique != null and chequeUnique == "C" '>
		 	AND ((CTSTRXTYPE.TYPE		= 'D' and CTSTRXTYPE.CHQ_RELATED = 'H') 
			OR	  (CTSTRXTYPE.TYPE		= 'W' and CTSTRXTYPE.CHQ_RELATED in ('H','C')) )
		 </if>
		
	</select>
	
	<select id="getAddHolidayToSbRenewValue" parameterType="dateParamSC" resultType="java.lang.String">
		SELECT ADD_HOLIDAYS_TO_SB_RENEW 
			FROM CTSCONTROL 
				WHERE COMP_CODE	=#{compCode} AND	BRANCH_CODE	=#{branchCode}
	</select>
	
	<select id="getCompanyCountryCode" parameterType="BigDecimal" resultType="BigDecimal">
		SELECT CASE WHEN COMP_COUNTRY IS NULL THEN  0 ELSE COMP_COUNTRY END 
			FROM  COMPANIES
				WHERE COMPANIES.COMP_CODE  = #{compCode}
	</select>
	
	<select id="getCountryHolidays" parameterType="dateParamSC" resultType="com.path.dbmaps.vo.COUNTRY_HOLIDAYVO">
		SELECT DD_HOL,MM_HOL,DESCRIPTION
			FROM <if test='"OADM" == currAppName'>OC_ETL_</if>COUNTRY_HOLIDAY			
			WHERE COUNTRY_HOLIDAY.COMP_CODE	=#{compCode,jdbcType=NUMERIC}	AND   COUNTRY_HOLIDAY.COUNTRY_CODE	=#{compCountryCode,jdbcType=NUMERIC}
			<if test="toDateCalendar != null" >
			  AND	MM_HOL = #{toDateMonth}
			  AND	DD_HOL = #{toDateDay} 
		      AND  ((YYYY_HOL = #{toDateYear} AND #{applyYearHoliday,jdbcType=VARCHAR} = '1' )OR	(YYYY_HOL = 0 AND #{applyYearHoliday,jdbcType=VARCHAR} = '0'))  			
			 </if>
	</select>

	<select id="getBranchHolidays" parameterType="dateParamSC" resultType="com.path.dbmaps.vo.BRANCH_HOLIDAYVO">
		SELECT BRANCH_HOLIDAY.DESCRIPTION 
			FROM  BRANCH_HOLIDAY 
			WHERE	 (BRANCH_HOLIDAY.COMP_CODE   	=  	#{compCode})
	 			AND	(BRANCH_HOLIDAY.BRANCH_CODE  	=  	#{branchCode})
	 			AND	(BRANCH_HOLIDAY.MM_HOL  		= 	#{toDateMonth})
	 			AND	(BRANCH_HOLIDAY.DD_HOL  		= 	#{toDateDay})
	 			AND  ((BRANCH_HOLIDAY.YYYY_HOL      = 	#{toDateYear} AND #{applyYearHoliday,jdbcType=VARCHAR} = '1') 
				OR  
				(BRANCH_HOLIDAY.YYYY_HOL = 0 AND #{applyYearHoliday,jdbcType=VARCHAR} = '0' )) 	
	</select>
	
	<select id="getCountryWeekends" parameterType="dateParamSC" resultType="com.path.dbmaps.vo.COUNTRY_CALENDARVO">
		SELECT	COUNTRY_CALENDAR.COMP_CODE,
				COUNTRY_CALENDAR.COUNTRY_CODE,
				COUNTRY_CALENDAR.HOL1,
				COUNTRY_CALENDAR.HOL2,
				COUNTRY_CALENDAR.HOL3,
				COUNTRY_CALENDAR.HOL4	
		  FROM  COUNTRY_CALENDAR 
		 WHERE  COUNTRY_CALENDAR.COMP_CODE     = #{compCode,jdbcType=NUMERIC} 
		   AND	COUNTRY_CALENDAR.COUNTRY_CODE  = #{compCountryCode,jdbcType=NUMERIC} 
	</select>
	
	<select id="getCompanyHolidays" parameterType="dateParamSC" resultType="com.path.dbmaps.vo.COMPANIESVO">
		SELECT	HOL1,HOL2,HOL3,	HOL4
			FROM COMPANIES 
			WHERE COMP_CODE  = #{compCode} 
	</select>
	
	<select id="getBranchWeekends" parameterType="dateParamSC" resultType="com.path.dbmaps.vo.BRANCHESVO">
		SELECT HOL1,HOL2,HOL3,HOL4 
			FROM  BRANCHES 
			WHERE	BRANCHES.COMP_CODE  	= #{compCode}
	 		AND		BRANCHES.BRANCH_CODE  	= #{branchCode}
	</select>
	
	<select id="returnPriorityCode" parameterType="commonLibSC" resultType="BigDecimal">
		SELECT
		   <if test='"1".equals(flag)'>
			   (CASE (SELECT PRIORITY_CODE
                           FROM CIF
                          WHERE COMP_CODE = #{compCode,jdbcType=NUMERIC}
                            AND CIF_NO    = #{CIF_NO,jdbcType=NUMERIC}) 
                WHEN NULL THEN
                      (SELECT DEFAULT_PRIORITY
                         FROM RIFCTT
                        WHERE COMP_CODE = #{compCode}
                          AND TYPE_CODE = (SELECT CIF_TYPE
                                             FROM CIF
                                            WHERE COMP_CODE = #{compCode,jdbcType=NUMERIC}
                                              AND CIF_NO    = #{CIF_NO,jdbcType=NUMERIC})) 
                ELSE
                    (SELECT PRIORITY_CODE
                       FROM CIF
                      WHERE COMP_CODE = #{compCode,jdbcType=NUMERIC}
                        AND CIF_NO    = #{CIF_NO,jdbcType=NUMERIC})
                END)
		   </if>
		   <if test='"2".equals(flag)'>
		   		(SELECT DEFAULT_PRIORITY
                   FROM RIFCTT
                  WHERE COMP_CODE = #{compCode,jdbcType=NUMERIC}
                    AND TYPE_CODE = #{CIF_NO,jdbcType=NUMERIC})
		   </if>
		FROM DUAL
	</select>
	
	<select id="returnVipAlert" parameterType="commonLibSC"  resultType="rankingVO">
		SELECT RIFPCT.VIP_ALERT, 
		       RIFPCT.LONG_DESC_ENG, 
		       RIFPCT.LONG_DESC_ARAB
		  FROM RIFPCT
		 WHERE RIFPCT.COMP_CODE 	= #{compCode,jdbcType=NUMERIC}
		   AND RIFPCT.PRIORITY_CODE = #{priorityCode,jdbcType=NUMERIC}
		   <if test="VIP_ALERT != null">
		   AND RIFPCT.VIP_ALERT 	= #{VIP_ALERT}
		   </if>
	</select>
	
	<select  id="getCompanyExtendFlag" parameterType="BigDecimal" resultType="com.path.dbmaps.vo.COMPANIESVO">
	SELECT COMPANIES.EXTEND_MAT_DTE_HOL, COMPANIES.COMP_COUNTRY  
		FROM COMPANIES  
		WHERE COMPANIES.COMP_CODE = #{compCode}   
	</select>
	
	<!--******************************************************************************************-->
	<select id="selectAccessPrivilegesForUser" parameterType="commonLibSC" resultType ="String">
		SELECT
		       privelegesTbl.PROG_REF
		  FROM
		     (
		         <choose>
		           <when test='"SADS" == appName'>
		               SELECT OPT.PROG_REF 
		                 FROM OPT 
		                WHERE (SELECT PATH_STS FROM USR WHERE USER_ID = #{userId}) = '1'
		                  AND OPT.APP_NAME = #{appName}
		                <if test="progRef != null">
		                  AND OPT.PROG_REF = #{progRef}
		                </if>  
		               UNION ALL
		               SELECT ACCTB.PROG_REF
		                 FROM
		                    (
		                      <include refid="commonLibMapper.select_Common_Priveleges"/>
		                    )ACCTB
		                WHERE (SELECT (CASE WHEN PATH_STS IS NULL THEN '2' ELSE PATH_STS END) FROM USR WHERE USER_ID = #{userId}) <![CDATA[<>]]> '1'   
		           </when>
		           <otherwise>
		              <include refid="commonLibMapper.select_Common_Priveleges"/>
		           </otherwise>
		         </choose>
		     ) privelegesTbl
		WHERE privelegesTbl.PROG_REF IN 
			<foreach item="progRefCurr" index="index" collection="privilegesToCheck" open="(" separator="," close=")"> 
					#{progRefCurr} 
			</foreach>
	</select>
	<!-- 
	<sql id="checkAccessPrivilegesForUser">
		SELECT AXS.PROG_REF
		FROM   AXS
		WHERE USER_ID    = #{userId}
			AND  COMP_CODE   = #{compCode} 
			AND  BRANCH_CODE = #{branchCode} 
			AND  APP_NAME    = #{appName}
			AND  STATUS      = 'P'
			AND	 AXS.PROG_REF IN 
			<foreach item="progRef" index="index" collection="privilegesToCheck" open="(" separator="," close=")"> 
					#{progRef} 
			</foreach> 
				
		UNION
		
		SELECT S_ROLE_DETAIL.PROG_REF
		FROM S_APPROLUSR, S_ROLE_DETAIL
		WHERE   S_APPROLUSR.ROLE_NAME = S_ROLE_DETAIL.ROLE_NAME
			AND S_APPROLUSR.APP_NAME = S_ROLE_DETAIL.APP_NAME 
			
			AND S_APPROLUSR.USER_ID     = #{userId}
			AND S_APPROLUSR.COMP_CODE   = #{compCode}
			AND S_APPROLUSR.BRANCH_CODE = #{branchCode}
			AND S_APPROLUSR.APP_NAME    = #{appName}			    
			AND S_APPROLUSR.STATUS      = 'P'			
			AND S_ROLE_DETAIL.STATUS    = 'P'
		    AND	S_ROLE_DETAIL.PROG_REF IN 
			<foreach item="progRef" index="index" collection="privilegesToCheck" open="(" separator="," close=")"> 
					#{progRef} 
			</foreach>        
		UNION
		
		SELECT S_ROLE_DETAIL.PROG_REF
		FROM S_GROUP_USER, S_GROUP_PROFILE, S_ROLE_DETAIL
		WHERE   S_GROUP_USER.GROUP_ID = S_GROUP_PROFILE.GROUP_ID
			AND S_GROUP_PROFILE.ROLE_NAME = S_ROLE_DETAIL.ROLE_NAME
			AND S_GROUP_PROFILE.APP_NAME = S_ROLE_DETAIL.APP_NAME
			
			AND (S_GROUP_USER.COMP_CODE = CASE WHEN #{compCode} = 0 THEN S_GROUP_USER.COMP_CODE ELSE #{compCode} END
					OR S_GROUP_USER.COMP_CODE = 0)
			AND (S_GROUP_USER.BRANCH_CODE = CASE WHEN #{branchCode} = 0 THEN S_GROUP_USER.BRANCH_CODE ELSE #{branchCode} END
					OR S_GROUP_USER.BRANCH_CODE = 0 )
			AND S_GROUP_USER.USER_ID = #{userId}
			AND S_GROUP_USER.STATUS = 'P'
			AND S_GROUP_PROFILE.APP_NAME = #{appName}	
			AND S_GROUP_PROFILE.STATUS   = 'P'		
			AND S_ROLE_DETAIL.STATUS     = 'P'
			AND	S_ROLE_DETAIL.PROG_REF IN 
			<foreach item="progRef" index="index" collection="privilegesToCheck" open="(" separator="," close=")"> 
					#{progRef} 
			</foreach>  
	</sql>
	 -->
	<!--**********************************************************************************************-->
	<select id="returnFldBusinessTrans" parameterType="requiredFieldsSC" resultType="com.path.vo.common.FieldsBusTransCO">
		SELECT TD.ELEMENT_NAME MAP_KEY,BS.TOOLTIP_VALUE
		FROM SYS_PARAM_FIELD_BUS_TRANS BS,
			FIELD_TECH_DETAILS TD
		WHERE BS.APP_NAME = #{appName}
		<!--(Select PARENT_REF FROM OPT WHERE APP_NAME = #{appName} AND PROG_REF = #{progRef})  -->
		AND BS.PROG_REF = #{progRef}
		AND BS.LANG_CODE = #{langCode}
		AND BS.FLD_IDENTIFIER = TD.FLD_IDENTIFIER
	</select>
	
	<resultMap type="hashmap" id="optURLResultMap">
 		<result column="OPT_URL" property="OPT_URL" javaType="string" />
 		<result column="WINDOW_NAME" property="WINDOW_NAME" javaType="string" />
 		<result column="PARENT_REF" property="PARENT_REF" javaType="string" />
 		<result column="IV_CRUD" property="IV_CRUD" javaType="string" />
 		<result column="OPT_REFERENCE" property="OPT_REFERENCE" javaType="string" />
 		<result column="TARGET_APP_NAME" property="TARGET_APP_NAME" javaType="string" />
 		<result column="TARGET_PROG_REF" property="TARGET_PROG_REF" javaType="string" />
 		<result column="FOR_SERIES_PROG_REF" property="FOR_SERIES_PROG_REF" javaType="string" />
 		<result column="REPORT_SRC_APP_NAME" property="REPORT_SRC_APP_NAME" javaType="string" />
 		<result column="DYN_SCREEN_ID" property="DYN_SCREEN_ID" javaType="java.math.BigDecimal" />
	</resultMap>
	
	<select id="getOptUrl"  resultMap="optURLResultMap" parameterType="commonLibSC">
		 SELECT E.OPT_URL OPT_URL , E.IV_CRUD IV_CRUD , O.PARENT_REF PARENT_REF , O.WINDOW_NAME WINDOW_NAME , E.OPT_REFERENCE, E.TARGET_APP_NAME , E.TARGET_PROG_REF, E.FOR_SERIES_PROG_REF
		 , E.REPORT_SRC_APP_NAME,E.DYN_SCREEN_ID
		 FROM OPT_EXTENDED E, OPT O
		 WHERE E.APP_NAME = O.APP_NAME
		 AND E.PROG_REF = O.PROG_REF
		 AND E.APP_NAME = #{appName}
		 AND E.PROG_REF = #{progRef}
	</select>
	
	<select id="returnSeriesOptByRef"  resultType="java.lang.String" parameterType="commonLibSC"> 
		SELECT PROG_REF FROM OPT_EXTENDED WHERE FOR_SERIES_PROG_REF = #{progRef} AND APP_NAME = #{appName} AND OPT_REFERENCE = #{optReference}
	</select>
	
	<select id="returnLanguagesSYS_PARAMS" parameterType="selectSC" resultType="com.path.dbmaps.vo.SYS_PARAM_LANGUAGESVO">
	SELECT SPL.ISO_CODE ISO_CODE,
	(CASE WHEN SPLT.VALUE_DESC IS NULL THEN SPL.LANG_NAME ELSE SPLT.VALUE_DESC END) LANG_NAME,
	SPL.LANG_CODE
	FROM SYS_PARAM_LANGUAGES SPL
	LEFT OUTER JOIN SYS_PARAM_LOV_TRANS SPLT
	ON SPLT.VALUE_CODE = SPL.LANG_CODE
	AND SPLT.LOV_TYPE_ID = #{lovTypeId}
	AND SPLT.LANG_CODE = #{language}
	</select>
	
	<select id="returnDirection" parameterType="com.path.dbmaps.vo.SYS_PARAM_LANGUAGESVO" resultType="com.path.dbmaps.vo.SYS_PARAM_LANGUAGESVO">
	SELECT SPL.IS_RIGHT_LEFT_YN IS_RIGHT_LEFT_YN, 
	 SPL.LANG_CODE LANG_CODE
	 FROM SYS_PARAM_LANGUAGES SPL 
	 WHERE SPL.ISO_CODE = #{ISO_CODE}
	</select>	
	
	<select id="returnAllApplications" resultType="sAppVO">
	  SELECT APP_NAME,LONG_DESC,LONG_DESC_AR, LONG_DESC_FR,APP_DESC, APP_DESC_AR, APP_DESC_FR FROM S_APP
	</select>
	
	<select id="returnSequence" parameterType="dbSeqSC" resultType="java.math.BigDecimal">
	      SELECT ${sequenceName}.NEXTVAL FROM DUAL
	</select>
	<select id="insertTableIdentity" parameterType="dbSeqSC" resultType="java.math.BigDecimal">
		INSERT INTO ${tableName} VALUES(@@spid) 
		SELECT @@identity FROM DUMMY1
 	</select>
	<delete id="deleteTableIdentity" parameterType="dbSeqSC">
		DELETE FROM ${tableName} WHERE CODE = #{seqValue}
 	</delete>
	
	<select id="returnAmountFromRIFATD" parameterType="accountSC" resultType="BigDecimal">
		SELECT RIFATD.AMOUNT
		FROM RIFATD    
		WHERE ( RIFATD.COMP_CODE = #{compCode}  ) AND  
         ( RIFATD.TYPE_CODE = #{glCode}	) AND  
         ( RIFATD.DET_IND 	 = #{detInd} ) AND  
         ( RIFATD.CY_CODE   = #{currencyCode}	)
	</select>
	
	
<select id="returnCountryAmt" parameterType="commonLibSC" resultType="BigDecimal">
		<choose>
  			<when test="isSybase == 1" >
				SELECT SUM(CASE
	             WHEN TRSDEAL.DEAL_CY = #{bcaseCurrency} THEN
	              1
	             ELSE
	              CASE
	             WHEN TRSDEAL.DEAL_MULTDIV = 'M' THEN
	              TRSDEAL.DEAL_RATE / CONVERT(FLOAT, TRSDEAL.DEAL_UNIT)
	             ELSE
	              TRSDEAL.DEAL_UNIT / CONVERT(FLOAT, TRSDEAL.DEAL_RATE)
	           END END * (CASE
	             WHEN TRSPAYPLAN.TOTAL_AMT IS NULL THEN
	              0
	             ELSE
	              TRSPAYPLAN.TOTAL_AMT
	           END - CASE
	             WHEN TRSPAYPLAN.TOTAL_AMT_PAID IS NULL THEN
	              0
	             ELSE
	              TRSPAYPLAN.TOTAL_AMT_PAID
	           END)) ldec_countryamt
		</when>
		<otherwise>
				SELECT SUM(DECODE(TRSDEAL.DEAL_CY,
			                  #{bcaseCurrency},
			                  1,
			                  DECODE(TRSDEAL.DEAL_MULTDIV,
			                         'M',
			                         TRSDEAL.DEAL_RATE / TRSDEAL.DEAL_UNIT,
			                         TRSDEAL.DEAL_UNIT / TRSDEAL.DEAL_RATE)) *
			           (CASE
			              WHEN TRSPAYPLAN.TOTAL_AMT IS NULL THEN
			               0
			              ELSE
			               TRSPAYPLAN.TOTAL_AMT
			            END - CASE
			              WHEN TRSPAYPLAN.TOTAL_AMT_PAID IS NULL THEN
			               0
			              ELSE
			               TRSPAYPLAN.TOTAL_AMT_PAID
			            END)) ldec_countryamt

		</otherwise>
	 </choose>
	 FROM TRSDEAL, TRSPAYPLAN
	 WHERE (TRSDEAL.COMP_CODE = #{companyCode})
	   AND (TRSDEAL.COUNTRY_CODE IN
	       (SELECT COUNTRY LL_COUNTRY
	           FROM CIF
	          WHERE CIF.COMP_CODE = #{companyCode}
	            AND CIF.STATUS NOT IN ('S', 'D')
	            AND CIF.CIF_NO = #{CIF_NO}))
	   AND (TRSDEAL.STATUS = 'P')
	   AND (TRSDEAL.COMP_CODE = TRSPAYPLAN.COMP_CODE)
	   AND (TRSDEAL.BRANCH_CODE = TRSPAYPLAN.BRANCH)
	   AND (TRSDEAL.SERIAL_NO = TRSPAYPLAN.TRX_NBR)
	   AND (TRSPAYPLAN.STATUS = 'P')
</select>


<select id="checkUnclaimedAccount" parameterType="accountSC" resultType="Integer">
	SELECT COUNT(1)
	FROM AMF A, UNCLAIMED_AMF B
	WHERE A.COMP_CODE = B.COMP_CODE
	AND A.BRANCH_CODE = B.BRANCH_CODE
	AND A.CURRENCY_CODE = B.CURRENCY_CODE
	AND A.GL_CODE = B.GL_CODE
	AND A.CIF_SUB_NO = B.CIF_SUB_NO
	AND A.SL_NO = B.SL_NO
	AND A.COMP_CODE = #{compCode}
	AND A.BRANCH_CODE = #{branchCode}
	AND A.CURRENCY_CODE = #{currencyCode}
	AND A.GL_CODE = #{glCode}
	AND A.CIF_SUB_NO = #{cifCode}
	AND A.SL_NO = #{slNbr}
	AND A.STATUS = 'T' 
	AND B.STATUS = 'Y'
</select>

<select id="returnMaxTellerCashBalTrxNo" resultType="BigDecimal" parameterType="transferCashSC">
		SELECT MAX(CTSTELLER_CASH_BALANCE.TRX_NO)
	  FROM CTSTELLER_CASH_BALANCE, CTSTELLER
	 WHERE CTSTELLER_CASH_BALANCE.COMP_CODE = #{compCode}
	   AND CTSTELLER_CASH_BALANCE.BRANCH_CODE = #{branchCode}
	   AND CTSTELLER_CASH_BALANCE.TRADE_DATE = #{runningDate}
	   AND CTSTELLER_CASH_BALANCE.TELLER_CODE = #{tellerCode}
	   AND CTSTELLER_CASH_BALANCE.STATUS = 'P'
	   AND CTSTELLER.COMP_CODE = CTSTELLER_CASH_BALANCE.COMP_CODE
	   AND CTSTELLER.BRANCH_CODE = CTSTELLER_CASH_BALANCE.BRANCH_CODE
		<![CDATA[
			AND   ( (CTSTELLER.STATUS <> 'D' ) AND (CTSTELLER_CASH_BALANCE.TRSFR_TYPE  	= 'TV'))
		]]>
</select>

	
<resultMap id="returnShortOverMap" type="transferCashSubGridCashCO">
	<result property="ctstellerCashBalanceDetVO.VALUE" column="VALUE" />
	<result property="ctstellerCashBalanceDetVO.COUNTED_VALUE" column="COUNTED_VALUE" />
</resultMap>
<select id="returnShortOver" parameterType="transferCashSC" resultMap="returnShortOverMap">
		SELECT 
         CTSTELLER_CASH_BALANCE_DET.VALUE,   
         CTSTELLER_CASH_BALANCE_DET.COUNTED_VALUE
	 FROM CTSTELLER_CASH_BALANCE_DET LEFT OUTER JOIN CURRENCIES ON
	      CTSTELLER_CASH_BALANCE_DET.COMP_CODE  = CURRENCIES.COMP_CODE  AND  
	      CTSTELLER_CASH_BALANCE_DET.CURRENCY_CODE = CURRENCIES.CURRENCY_CODE
  	 WHERE     ( CTSTELLER_CASH_BALANCE_DET.COMP_CODE = #{compCode} ) AND  
               ( CTSTELLER_CASH_BALANCE_DET.BRANCH_CODE = #{branchCode} ) AND  
               ( CTSTELLER_CASH_BALANCE_DET.TRX_NO  = #{trxNo, jdbcType=NUMERIC} )
	AND ( CTSTELLER_CASH_BALANCE_DET.CURRENCY_CODE 	  	= #{currencyCode} )
</select>

<select id="returnOneObligor" parameterType="commonLibSC" resultType="BigDecimal">
		SELECT SUM(CASE
		             WHEN YTD_CV_BAL IS NULL THEN
		              0
		             ELSE
		              YTD_CV_BAL
		           END)
		  FROM AMF, CIF, GEN_LEDGER
		 WHERE (AMF.COMP_CODE = CIF.COMP_CODE)
		   AND (AMF.CIF_SUB_NO = CIF.CIF_NO)
		   AND (AMF.GMI_FLAG IN ('G', 'F'))
		   AND (AMF.COMP_CODE = GEN_LEDGER.COMP_CODE)
		   AND (AMF.GL_CODE = GEN_LEDGER.GL_CODE)
		   AND (GEN_LEDGER.GL_CATEGORY = 'A')
		   AND (CIF.COMP_CODE = #{companyCode})
		   AND CIF.STATUS NOT IN ('S', 'D')
		   AND CIF.CIF_NO = #{CIF_NO}
</select>

<select id="returnFMSTotalDealAmountCV" parameterType="commonLibSC" resultType="BigDecimal">
		SELECT SUM(CASE
	             WHEN FMSDRWDWN.TOTAL_DEAL_AMOUNT_CV IS NULL THEN
	              0
	             ELSE
	              TOTAL_DEAL_AMOUNT_CV
	           END)
	  FROM FMSDRWDWN, CURRENCIES, FMSFACILITY
	 WHERE FMSDRWDWN.COMP_CODE =  #{companyCode}
	   AND FMSDRWDWN.CIF = #{CIF_NO}
	   AND FMSDRWDWN.STATUS IN ('P', 'A', 'L')
	   AND CURRENCIES.COMP_CODE = FMSDRWDWN.COMP_CODE
	   AND CURRENCIES.CURRENCY_CODE = FMSDRWDWN.CURRENCY
	   AND FMSFACILITY.COMP_CODE = FMSDRWDWN.COMP_CODE
	   AND FMSFACILITY.BRANCH = FMSDRWDWN.FACILITY_BRANCH
	   AND FMSFACILITY.CODE = FMSDRWDWN.FROM_FACILITY
	   <![CDATA[
	   AND FMSFACILITY.STATUS <> 'C'
		]]>

</select>

	<select id="returnAllKeyLabelTrans" parameterType="commonLibSC" resultType="keyLabelTransCO">
	SELECT
	<choose>
	<when test="isSQLServer == 1">
	(#{language} + '_' + KL.APP_NAME + '_' + KL.PROG_REF) AS MAP_KEY,
	</when>
	<otherwise>
	(#{language}||'_'||KL.APP_NAME||'_'||KL.PROG_REF) AS MAP_KEY,
	</otherwise>
	</choose>
	
	<choose>
		<when test="caseSensitive == 1">
			lower(KL.KEY_LABEL_CODE)
	</when>
		<otherwise>
			KL.KEY_LABEL_CODE
	</otherwise>
	</choose>
		   AS KEY_LABEL_CODE,
	<choose>
	<when test="isSybase == 1">
	(CASE WHEN KL.KEY_GROUP_ID IS NULL THEN (CASE WHEN ISNULL(datalength(KLT.VALUE_TRANS),0)=0  THEN KL.KEY_LABEL_DESC ELSE KLT.VALUE_TRANS END) ELSE (CASE WHEN ISNULL(datalength(KGPT.VALUE_TRANS),0) = 0 THEN KGP.KEY_GROUP_DESC ELSE KGPT.VALUE_TRANS END) END) AS VALUE_TRANS
	</when>
	<otherwise>
	(CASE WHEN KL.KEY_GROUP_ID IS NULL THEN (CASE WHEN KLT.VALUE_TRANS IS NULL THEN KL.KEY_LABEL_DESC ELSE KLT.VALUE_TRANS END) ELSE (CASE WHEN KGPT.VALUE_TRANS IS NULL THEN KGP.KEY_GROUP_DESC ELSE KGPT.VALUE_TRANS END) END) AS VALUE_TRANS
	</otherwise>
	</choose>
	FROM SYS_PARAM_KEY_LABEL KL
	LEFT OUTER JOIN SYS_PARAM_KEY_LABEL_TRANS KLT
	ON KL.APP_NAME = KLT.APP_NAME
	AND KL.PROG_REF = KLT.PROG_REF
	AND KL.KEY_LABEL_CODE = KLT.KEY_LABEL_CODE
	AND KLT.LANG_CODE = #{language}
	LEFT OUTER JOIN SYS_PARAM_KEY_GROUP KGP
	ON KGP.KEY_GROUP_ID = KL.KEY_GROUP_ID
	LEFT OUTER JOIN SYS_PARAM_KEY_GROUP_TRANS KGPT
	ON KGP.KEY_GROUP_ID = KGPT.KEY_GROUP_ID
	AND KGPT.LANG_CODE = #{language}
	WHERE KL.APP_NAME = #{appName}
	AND KL.PROG_REF = #{progRef}
	<if test="isSybase == 1 and isSQLServer != 1">AT ISOLATION 0</if>
	</select>

	<select id="returnPrintSwiftAccessCount" parameterType="swiftOutwardSC" resultType="Integer">
		SELECT COUNT(1)
		  FROM SWIFT_PRINT_HDR
		 WHERE MODULE	= #{appName}
		   AND PROG_REF	= #{progRef}
	</select>

	<select id="returnLastRequestIdByProcess" parameterType="com.path.dbmaps.vo.CTS_EXCEPTIONS_TRACEVO" resultType="BigDecimal">
		SELECT MAX(CTS_EXCEPTIONS_TRACE.REQUEST_ID) 
		  FROM CTS_EXCEPTIONS_TRACE
		 WHERE CTS_EXCEPTIONS_TRACE.PROCESS_ID = #{PROCESS_ID}
		   AND CTS_EXCEPTIONS_TRACE.USER_ID    = #{USER_ID}
		   AND CTS_EXCEPTIONS_TRACE.PROG_REF   = #{PROG_REF}
	</select>

	<select id="returnCtsRepArgList" parameterType="ctsReportArgSC" resultType="ctsReportArgVO">
	 SELECT C.*
	  FROM CTS_REP_ARG C
	 WHERE C.COMP_CODE = #{compCode}
	   AND C.APP_NAME = #{appName}
	   <if test="argCodeList != null and argCodeList.size() > 0"> 
	         AND C.CODE IN 
	         <foreach item="item" index="index" open="(" close=")" separator="," collection="argCodeList" > 
	         #{item} 
	         </foreach>
	  </if>
	</select>
	
	<select id="returnCtsCitDet2Currency" resultType="java.math.BigDecimal" parameterType="ctsCitDet2VO">
		SELECT MIN(CURRENCY)	
		FROM   CTSCITDET2
		WHERE  COMP_CODE	  = #{COMP_CODE}
		AND	 PROFIT_GROUP  = #{PROFIT_GROUP}
		GROUP BY COMP_CODE,PROFIT_GROUP	
		HAVING COUNT(CURRENCY) = 1
	</select>
	
	<resultMap id="sessAttrMap" type="irpSessionAttributesVO" >
	    <result column="ATTRIBUTE_NAME" property="ATTRIBUTE_NAME" />
	    <result column="ATTRIBUTE_TYPE" property="ATTRIBUTE_TYPE" />
	    <result column="TECHNICAL_NAME" property="TECHNICAL_NAME" />
	</resultMap>
	<select id="returnSessionAttrList" resultMap="sessAttrMap" parameterType="irpSessionAttributesVO">
	    SELECT ATTRIBUTE_NAME, ATTRIBUTE_TYPE, TECHNICAL_NAME
	    FROM IRP_SESSION_ATTRIBUTES
	    <if test="LANG_INDEPENDENT_YN!=null">
	  		 WHERE LANG_INDEPENDENT_YN    = #{LANG_INDEPENDENT_YN} 
		</if>
		  ORDER BY ATTRIBUTE_NAME ASC
	</select>
 <update id="applyLocIBISProcess" parameterType="com.path.dbmaps.vo.IBIS_PROCESSVO">
	UPDATE IBIS_PROCESS
	SET PERIODICAL_PROCESS = PERIODICAL_PROCESS
	WHERE IBIS_PROCESS.COMP_CODE = #{COMP_CODE}
	AND IBIS_PROCESS.BRANCH_CODE =  #{BRANCH_CODE}
 </update>
 <resultMap id="returnBranchSessionMap" type="branchSessionVO">
    <result property="COMP_CODE"       column="COMP_CODE"/>
    <result property="BRANCH_CODE"     column="BRANCH_CODE"/>
    <result property="DATE_OPENED"     column="DATE_OPENED"/>
    <result property="DATE_CLOSED"     column="DATE_CLOSED"/>
    <result property="STATUS"          column="STATUS"/>
    <result property="SESSION_COUNTER" column="SESSION_COUNTER"/>
    <result property="OPENED_BY"       column="OPENED_BY"/>
    <result property="CLOSED_BY"       column="CLOSED_BY"/>
    <result property="IS_BRANCH"       column="IS_BRANCH"/>
    <result property="DATE_REOPENED"   column="DATE_REOPENED"/>
    <result property="REOPENED_BY"     column="REOPENED_BY"/>
 </resultMap>
 <select id="returnBranchSession" parameterType="commonLibSC" resultMap="returnBranchSessionMap">
	SELECT 
	COMP_CODE, 
	BRANCH_CODE, 
	DATE_OPENED, 
	DATE_CLOSED, 
	STATUS,
	SESSION_COUNTER,
	OPENED_BY, 
	CLOSED_BY, 
	IS_BRANCH,
	DATE_REOPENED,
	REOPENED_BY
	FROM BRANCH_SESSION 
	WHERE  COMP_CODE = #{companyCode}
	AND BRANCH_CODE  = #{branchCode}
	<if test="isBranch!=null">
	   AND IS_BRANCH    = #{isBranch} 
	</if>
	AND STATUS IN ('O','C')
	<choose>
     <when test="isOracle==1">
	AND TO_CHAR(DATE_OPENED , 'DD/MM/YYYY HH24:MI:SS') 
	    BETWEEN
	    to_char(TO_date((SELECT RUN_DATE FROM S_RUNDTE WHERE COMP_CODE = #{companyCode} AND BRANCH_CODE = #{branchCode} AND APP_NAME = 'RET')  , 'DD/MM/YY HH24:MI:SS'), 'DD/MM/YYYY HH24:MI:SS')
	    AND 
	    to_char(TO_date((SELECT RUN_DATE FROM S_RUNDTE WHERE COMP_CODE = #{companyCode} AND BRANCH_CODE = #{branchCode} AND APP_NAME = 'RET')  , 'DD/MM/YY HH24:MI:SS')+ (1439.99/1440), 'DD/MM/YYYY HH24:MI:SS')
	</when>
	<otherwise>
	AND DATE_OPENED between (SELECT RUN_DATE FROM S_RUNDTE WHERE COMP_CODE = #{companyCode} AND BRANCH_CODE = #{branchCode} AND APP_NAME = 'RET') and dateadd(hh, 24, (SELECT RUN_DATE FROM S_RUNDTE WHERE COMP_CODE = #{companyCode} AND BRANCH_CODE = #{branchCode} AND APP_NAME = 'RET')) 
	</otherwise>
	</choose>
 </select>
   <update id="reOpenBranchSession" parameterType="com.path.dbmaps.vo.BRANCH_SESSIONVO">
    update BRANCH_SESSION
    <set >
      <if test="DATE_CLOSED != null" >
        DATE_CLOSED = #{DATE_CLOSED},
      </if>
      <if test="SESSION_COUNTER != null" >
        <choose >
          <when test="SESSION_COUNTER == emptyBigDecimalValue" >
            SESSION_COUNTER = NULL ,
          </when>
          <otherwise >
            SESSION_COUNTER = #{SESSION_COUNTER},
          </otherwise>
        </choose>
      </if>
      <if test="OPENED_BY != null" >
        OPENED_BY = #{OPENED_BY},
      </if>
      <if test="CLOSED_BY != null" >
        CLOSED_BY = #{CLOSED_BY},
      </if>
      <if test="IS_BRANCH != null" >
        IS_BRANCH = #{IS_BRANCH},
      </if>
      <if test="REOPENED_BY != null" >
        REOPENED_BY = #{REOPENED_BY},
      </if>
      <if test="DATE_REOPENED != null" >
        DATE_REOPENED = #{DATE_REOPENED},
      </if>
      <if test="STATUS !=null">
        STATUS = #{STATUS}
      </if>
    </set>
    where BRANCH_CODE = #{BRANCH_CODE}
      and COMP_CODE   = #{COMP_CODE}
      and DATE_OPENED = #{DATE_OPENED}
      and STATUS = 'C'
  </update>
	  <resultMap id="returnAllActiveTransMap" type="activeTransCO">
	  <result property="title"   column="TITLE"/>
	  <result property="userID"  column="USER_ID"/>
	  <result property="trxNO"   column="TRX_NO"/>
	  <result property="strxNO"  column="STRX_NO"/>
	  <result property="status"  column="STATUS"/>
	  <result property="trsDate" column="T_DATE"/>
	  <result property="trsDesc" column="TRS_DESC"/>
	  <result property="accNO"   column="ACC_NO"/>
	  </resultMap>
	<select id="returnAllActiveTrans" resultMap="returnAllActiveTransMap"
		parameterType="commonLibSC">
		SELECT TITLE,
		USER_ID, 
		TRX_NO ,
		STRX_NO ,
		STATUS ,
		T_DATE,
		TRS_DESC ,
		ACC_NO
		 FROM 
		(
			SELECT 'CASH BOX' TITLE
				      ,CTSTELLER.USER_ID USER_ID
				      ,CTSTELLER_CASH_BALANCE.TRX_NO TRX_NO
				      ,'' STRX_NO
				      ,CTSTELLER_CASH_BALANCE.STATUS STATUS
				      ,CTSTELLER_CASH_BALANCE.TRADE_DATE T_DATE
				      ,'' TRS_DESC
				      ,'' ACC_NO
				  FROM CTSTELLER_CASH_BALANCE, CTSTELLER
				 WHERE CTSTELLER_CASH_BALANCE.COMP_CODE = #{compCode}
				   AND CTSTELLER_CASH_BALANCE.BRANCH_CODE = #{branchCode}
				   AND ((#{userId} = 'X') OR
				       (#{userId} != 'X' AND CTSTELLER_CASH_BALANCE.TELLER_CODE = #{code}))
				   AND CTSTELLER_CASH_BALANCE.STATUS = 'C'
				   AND CTSTELLER.COMP_CODE = CTSTELLER_CASH_BALANCE.COMP_CODE
				   AND CTSTELLER.BRANCH_CODE = CTSTELLER_CASH_BALANCE.BRANCH_CODE
				   AND CTSTELLER.CODE = CTSTELLER_CASH_BALANCE.TELLER_CODE
				UNION
				
				SELECT 'TRANSACTION' TITLE
				      ,CASE STATUS
				         WHEN 'A' THEN
				          CREATED_BY
				         WHEN 'Z' THEN
				          TO_CANCEL_BY
				         WHEN 'W' THEN
				          TO_REVERSE_BY
				         WHEN 'K' THEN
				          TO_RELEASE_BY
				         WHEN 'B' THEN
				          TO_BE_STOPPED_SO_BY
				         WHEN 'I' THEN
				          TO_VOID_BY
				         WHEN 'H' THEN
				          TO_VOID_BY
				         WHEN 'M' THEN
				          TO_VOID_BY
				         WHEN 'U' THEN
				          CLEARED_BY
				         WHEN '2' THEN
				          TO_BE_CLOSED_SO_BY
				       END USER_ID
				      ,TRS_NO TRX_NO
				      ,'' STRX_NO
				      ,STATUS STATUS
				      ,CASE STATUS
				         WHEN 'A' THEN
				          CREATED_DATE
				         WHEN 'Z' THEN
				          TO_CANCEL_DATE
				         WHEN 'W' THEN
				          TO_REVERSE_DATE
				         WHEN 'K' THEN
				          TO_RELEASE_DATE
				         WHEN 'B' THEN
				          TO_BE_STOPPED_SO_DATE
				         WHEN 'I' THEN
				          TO_VOID_DATE
				         WHEN 'H' THEN
				          TO_VOID_DATE
				         WHEN 'M' THEN
				          TO_VOID_DATE
				         WHEN 'U' THEN
				          DATE_CLEARED
				         WHEN '2' THEN
				          TO_BE_CLOSED_SO_DATE
				       END T_DATE
				      ,'' TRS_DESC
				      ,'' ACC_NO
				  FROM CTSTRS
				 WHERE COMP_CODE = #{compCode}
				   AND BRANCH_CODE = #{branchCode}
				   And ((#{userId} = 'X') OR
				       (#{userId} != 'X' AND #{userId} = CASE STATUS WHEN 'A' THEN
				        CREATED_BY WHEN 'Z' THEN TO_CANCEL_BY WHEN 'W' THEN TO_REVERSE_BY WHEN 'K' THEN
				        TO_RELEASE_BY WHEN 'B' THEN TO_BE_STOPPED_SO_BY WHEN 'I' THEN
				        TO_VOID_BY WHEN 'H' THEN TO_VOID_BY WHEN 'M' THEN TO_VOID_BY WHEN 'U' THEN
				        CLEARED_BY WHEN '2' THEN TO_BE_CLOSED_SO_BY END))
				   AND TRS_TYPE = 'R'
				   AND CB_IND = 'C'
				   AND STATUS IN ('A', 'Z', 'W', 'K', 'B', 'I', 'H', 'M', 'U', '2')
				UNION
				SELECT 'CASH TRANSFER' TITLE
				      ,CTSTELLER.USER_ID USER_ID
				      ,CTSTELLER_CASH_BALANCE.TRX_NO TRX_NO
				      ,'' STRX_NO
				      ,CTSTELLER_CASH_BALANCE.STATUS STATUS
				      ,CTSTELLER_CASH_BALANCE.TRADE_DATE T_DATE
				      ,'' TRS_DESC
				      ,'' ACC_NO
				  FROM CTSTELLER_CASH_BALANCE, CTSTELLER
				 WHERE (CTSTELLER_CASH_BALANCE.COMP_CODE = #{compCode})
				   AND (CTSTELLER_CASH_BALANCE.BRANCH_CODE = #{branchCode})
				   AND (((TRSFR_TYPE = 'TV' OR TRSFR_TYPE = 'TT' OR TRSFR_TYPE = 'PT') AND
				       TELLER_CODE = #{code}) OR
				       ((TRSFR_TYPE = 'VT' OR TRSFR_TYPE = 'TT') AND VAULT_NO = #{code}))
				   AND (CTSTELLER_CASH_BALANCE.STATUS = 'A' OR
				       (CTSTELLER_CASH_BALANCE.STATUS = 'P' AND
				       CTSTELLER_CASH_BALANCE.TRSFR_TYPE = 'PT'))
				   AND CTSTELLER.COMP_CODE = CTSTELLER_CASH_BALANCE.COMP_CODE
				   AND CTSTELLER.BRANCH_CODE = CTSTELLER_CASH_BALANCE.BRANCH_CODE
				   AND CTSTELLER.CODE = CTSTELLER_CASH_BALANCE.TELLER_CODE
				
				UNION
				SELECT 'CHEQUEBOOK' TITLE
				      ,CASE STATUS
				         WHEN 'A' THEN
				          CREATED_BY
				         WHEN 'V' THEN
				          TO_BE_DESTROYED_BY
				         WHEN 'Y' THEN
				          TO_CANCEL_BY
				         WHEN 'C' THEN
				          TO_BE_REVERSED_BY
				         WHEN 'T' THEN
				          APPLY_SUBMIT_BY
				       END USER_ID
				      ,CTSCHEQUEBOOK.CODE TRX_NO
				      ,'' STRX_NO
				      ,CTSCHEQUEBOOK.STATUS STATUS
				      ,CASE STATUS
				         WHEN 'A' THEN
				          DATE_CREATED
				         WHEN 'V' THEN
				          TO_BE_DESTROYED_DATE
				         WHEN 'Y' THEN
				          TO_CANCEL_DATE
				         WHEN 'C' THEN
				          TO_BE_REVERSED_DATE
				         WHEN 'T' THEN
				          APPLY_SUBMIT_DATE
				       END T_DATE
				      ,'' TRS_DESC
				      ,'' ACC_NO
				  FROM CTSCHEQUEBOOK
				 WHERE (CTSCHEQUEBOOK.COMP_CODE = #{compCode})
				   AND (CTSCHEQUEBOOK.BRANCH_CODE = #{branchCode})
				   AND (CTSCHEQUEBOOK.STATUS IN ('A', 'V', 'Y', 'C', 'T'))
				   AND ((#{userId} = 'X') OR (#{userId} != 'X' AND #{userId} = CASE STATUS WHEN 'A' THEN
				        CREATED_BY WHEN 'V' THEN TO_BE_DESTROYED_BY WHEN 'Y' THEN
				        TO_CANCEL_BY WHEN 'C' THEN TO_BE_REVERSED_BY WHEN 'T' THEN
				        APPLY_SUBMIT_BY END))
				
				UNION
				SELECT 'CARD' TITLE
				      ,CREATED_BY USER_ID
				      ,CTSCARDS_MGT.APPLICATION_ID TRX_NO
				      ,'' STRX_NO
				      ,CTSCARDS_MGT.STATUS STATUS
				      ,CTSCARDS_MGT.DATE_CREATED T_DATE
				      ,'' TRS_DESC
				      ,'' ACC_NO
				  FROM CTSCARDS_MGT
				 WHERE (CTSCARDS_MGT.COMP_CODE = #{compCode})
				   AND (CTSCARDS_MGT.BRANCH_CODE = #{branchCode})
				   AND (CTSCARDS_MGT.STATUS IN ('C', 'S' ))
				   AND ((#{userId} = 'X') OR
				       (#{userId} != 'X' AND CTSCARDS_MGT.CREATED_BY = #{userId}))
				
				UNION
				SELECT 'SAFEBOX' TITLE
				      ,CASE STATUS
				         WHEN 'A' THEN
				          CREATED_BY
				         WHEN 'F' THEN
				          TO_BE_BLOCKED_BY
				         WHEN 'H' THEN
				          TO_BE_ABANDONED_BY
				         WHEN 'C' THEN
				          TO_BE_CLOSED_BY
				         WHEN 'K' THEN
				          TO_BE_CANCELLED_BY
				       END USER_ID
				      ,CTS_SAFEBOX_TRX.TRX_NO TRX_NO
				      ,'' STRX_NO
				      ,CTS_SAFEBOX_TRX.STATUS STATUS
				      ,CASE STATUS
				         WHEN 'A' THEN
				          CREATED_DATE
				         WHEN 'F' THEN
				          TO_BE_BLOCKED_DATE
				         WHEN 'H' THEN
				          TO_BE_ABANDONED_DATE
				         WHEN 'C' THEN
				          TO_BE_CLOSED_DATE
				         WHEN 'K' THEN
				          TO_BE_CANCELLED_DATE
				       END T_DATE
				      ,'' TRS_DESC
				      ,'' ACC_NO
				  FROM CTS_SAFEBOX_TRX
				 WHERE COMP_CODE = #{compCode}
				   AND BRANCH_CODE = #{branchCode}
				   and ((#{userId} = 'X') OR
				       (#{userId} != 'X' AND #{userId} = CASE STATUS WHEN 'A' THEN
				        CREATED_BY WHEN 'F' THEN TO_BE_BLOCKED_BY WHEN 'H' THEN
				        TO_BE_ABANDONED_BY WHEN 'C' THEN TO_BE_CLOSED_BY WHEN 'K' THEN
				        TO_BE_CANCELLED_BY END))
				      
				   AND STATUS in ('A', 'F', 'H', 'C', 'K')
				
				UNION
				SELECT 'CIF' TITLE
				      ,CASE
				         WHEN MODIFIED_BY IS NULL THEN
				          CREATED_BY
				         ELSE
				          MODIFIED_BY
				       END USER_ID
				      ,CIF_NO TRX_NO
				      ,'' STRX_NO
				      ,STATUS STATUS
				      ,CASE
				         WHEN DATE_MODIFIED IS NULL THEN
				          DATE_CREATED
				         ELSE
				          DATE_MODIFIED
				       END T_DATE
				      ,'' TRS_DESC
				      ,'' ACC_NO
				  FROM CIF
				 WHERE COMP_CODE = #{compCode}
				   AND BRANCH_CODE = #{branchCode}
				   and ((#{userId} = 'X') OR
				       (#{userId} != 'X' AND #{userId} = CASE WHEN MODIFIED_BY IS NULL THEN
				        CREATED_BY ELSE MODIFIED_BY END))
				   AND STATUS in ('I')
				UNION
				SELECT 'ACCOUNT' TITLE
				      ,CASE STATUS
				         WHEN 'O' THEN
				          CASE
				         WHEN AUTH_REJ_USR IS NULL THEN
				          ENTERED_BY
				         ELSE
				          MODIFIED_BY
				       END WHEN 'X' THEN TO_REJECT_BY WHEN 'Y' THEN TO_REACTIVATE_BY WHEN 'Q' THEN TO_SUSPEND_BY WHEN 'P' THEN TO_CLOSE_BY END USER_ID
				      ,0 TRX_NO
				      ,ADDITIONAL_REFERENCE STRX_NO
				      ,AMF.STATUS STATUS
				      ,CASE STATUS
				         WHEN 'O' THEN
				          DATE_ENTERED
				         WHEN 'X' THEN
				          TO_REJECT_DATE
				         WHEN 'Y' THEN
				          TO_REACTIVATE_DATE
				         WHEN 'Q' THEN
				          TO_SUSPEND_DATE
				         WHEN 'P' THEN
				          TO_CLOSE_DATE
				       END T_DATE
				      ,'' TRS_DESC
				      ,ACCOUNT_NUMBER ACC_NO
				  FROM AMF
				 WHERE COMP_CODE = #{compCode}
				   AND BRANCH_CODE = #{branchCode}
				   and ((#{userId} = 'X') OR
				       (#{userId} != 'X' AND #{userId} = CASE STATUS WHEN 'O' THEN CASE WHEN
				        AUTH_REJ_USR IS NULL THEN ENTERED_BY ELSE MODIFIED_BY END WHEN 'X' THEN
				        TO_REJECT_BY WHEN 'Y' THEN TO_REACTIVATE_BY WHEN 'Q' THEN
				        TO_SUSPEND_BY WHEN 'P' THEN TO_CLOSE_BY END))
				   AND STATUS in ('O', 'X', 'Y', 'Q', 'P')
				   ) TBL 
		    WHERE NOT EXISTS 
            ( SELECT 1 FROM CTSCONTROL_EXCL_PEND_TRX_USERS CEPTU
                      WHERE CEPTU.COMP_CODE = #{compCode}  
                      AND CEPTU.BRANCH_CODE = #{branchCode}
                      AND TBL.USER_ID = CEPTU.USER_ID)
</select> 
  
<select id="returnUserCompanyBranch" parameterType="commonLibSC" resultType="locVO">
 	SELECT COMP_CODE, BRANCH_CODE
	FROM LOC WHERE USER_ID = #{userId}
</select>
 <select id="returnDealInformation"  resultType="trsdealVO" parameterType="trsdealVO" >
	SELECT CASE WHEN FOREX_TYPE = 'P' THEN OTHER_CY ELSE DEAL_CY END DEAL_CY, 
			  CASE WHEN FOREX_TYPE = 'P' THEN OTHER_AMOUNT ELSE DEAL_AMOUNT END DEAL_AMOUNT
	  FROM TRSDEAL
	 WHERE COMP_CODE = #{COMP_CODE} 
	   AND BRANCH_CODE = #{BRANCH_CODE} 
		AND CIF_NO =#{CIF_NO}
		AND VALUE_DATE = #{VALUE_DATE}
		AND STATUS IN ('A','P')
		AND DEAL_TYPE = #{DEAL_TYPE}
 </select>
 <select id="returnUserProfiles" parameterType="commonLibSC" resultType="String">
	SELECT <if test="compCode == null">DISTINCT</if> ROLE_NAME 
	FROM S_APPROLUSR
	WHERE USER_ID = #{userId}
	<if test="appName != null"> 
	AND APP_NAME = #{appName}
	</if>
	<if test="compCode != null">
	AND COMP_CODE = #{compCode} AND BRANCH_CODE = #{branchCode}
	</if>
	AND STATUS = 'A'
	</select>
	
	<select id="returnSQLSyntaxResultFirstRow" parameterType="commonLibSC" resultType="java.util.LinkedHashMap">
	<if test="!dynamicSQLSyntax.trim().toUpperCase().startsWith('EXEC')">
	SELECT <if test="isSybase == 1">TOP 1</if> TBL.*
	FROM
	(
	</if>
	${dynamicSQLSyntax}
	<if test="!dynamicSQLSyntax.trim().toUpperCase().startsWith('EXEC')">
	) TBL
	<if test="isSybase != 1"> WHERE ROWNUM = 1</if>
	</if>
	</select>

	<select id="returnUsrbranchMgrByLoc" parameterType="commonLibSC"
		resultType="String">
		SELECT USER_IS_BRANCH_MANAGER
		FROM CTSTELLER
		WHERE EXISTS (SELECT 1
		FROM LOC S
		WHERE S.USER_ID = CTSTELLER.USER_ID
		AND CTSTELLER.COMP_CODE= S.COMP_CODE
		AND CTSTELLER.BRANCH_CODE = S.BRANCH_CODE)
		AND CTSTELLER.STATUS = 'A'
		AND CTSTELLER.COMP_CODE = #{compCode}
		AND CTSTELLER.BRANCH_CODE = #{branchCode}
		AND CTSTELLER.USER_ID =#{userId}
	</select>
	
	<select id="returnUsrCSMAccs" parameterType="commonLibSC"
		resultType="Integer">
	SELECT   1
    FROM   LOC
    WHERE LOC.COMP_CODE = #{compCode}
    AND   LOC.BRANCH_CODE = #{branchCode}
    AND   LOC.USER_ID     = #{userId}
    AND (
      EXISTS   ( SELECT 1
              FROM AXS
              WHERE AXS.COMP_CODE = LOC.COMP_CODE
              AND AXS.BRANCH_CODE = LOC.BRANCH_CODE
              AND AXS.APP_NAME    = 'RET'
              AND AXS.STATUS      = 'P'
              AND AXS.USER_ID     = LOC.USER_ID
			  AND ( ( AXS.ACCESS_FROM_DATE IS NULL OR AXS.ACCESS_FROM_DATE <![CDATA[ <= ]]> <choose><when test="isSybase == 1" >GETDATE()</when><otherwise>SYSDATE</otherwise></choose> ) AND ( AXS.ACCESS_TO_DATE IS NULL OR AXS.ACCESS_TO_DATE <![CDATA[ >= ]]> <choose><when test="isSybase == 1" >GETDATE()</when><otherwise>SYSDATE</otherwise></choose> ) )	
              )
      OR EXISTS (SELECT 1
              FROM S_APPROLUSR, S_ROLE_DETAIL
              WHERE S_ROLE_DETAIL.ROLE_NAME = S_APPROLUSR.ROLE_NAME
              AND S_ROLE_DETAIL.APP_NAME    = S_APPROLUSR.APP_NAME
              AND S_APPROLUSR.APP_NAME      = 'RET'
              AND S_APPROLUSR.STATUS        = 'P'
                    AND S_APPROLUSR.USER_ID       = LOC.USER_ID
             ) 
      OR EXISTS (SELECT 1
              FROM S_GROUP_USER, S_GROUP_PROFILE, S_ROLE_DETAIL
              WHERE S_ROLE_DETAIL.ROLE_NAME = S_GROUP_PROFILE.ROLE_NAME
              AND S_GROUP_PROFILE.GROUP_ID  = S_GROUP_USER.GROUP_ID
              AND S_ROLE_DETAIL.APP_NAME    = S_GROUP_PROFILE.APP_NAME
              AND S_GROUP_USER.STATUS       = 'P'
              AND ( ( S_GROUP_USER.FROM_DATE IS NULL OR S_GROUP_USER.FROM_DATE <![CDATA[ <= ]]> <choose><when test="isSybase == 1" >GETDATE()</when><otherwise>SYSDATE</otherwise></choose> ) AND ( S_GROUP_USER.TO_DATE IS NULL OR S_GROUP_USER.TO_DATE <![CDATA[ >= ]]> <choose><when test="isSybase == 1" >GETDATE()</when><otherwise>SYSDATE</otherwise></choose> ) )
              
              AND S_GROUP_PROFILE.APP_NAME  = 'RET'
              AND S_GROUP_PROFILE.STATUS    = 'P'
              AND S_ROLE_DETAIL.STATUS      = 'P'
						  AND S_GROUP_USER.USER_ID      = LOC.USER_ID
						  AND NOT EXISTS (SELECT 1 FROM S_GROUP_USER_EXCLUSION 
                                                WHERE S_GROUP_USER_EXCLUSION.USER_ID = S_GROUP_USER.USER_ID 
                                                      AND S_GROUP_USER_EXCLUSION.GROUP_ID = S_GROUP_USER.GROUP_ID
                                                      AND S_GROUP_USER_EXCLUSION.COMP_CODE = S_GROUP_USER.COMP_CODE
                                                      AND S_GROUP_USER_EXCLUSION.BRANCH_CODE = S_GROUP_USER.BRANCH_CODE
                                                      AND S_GROUP_USER_EXCLUSION.ROLE_NAME = S_GROUP_PROFILE.ROLE_NAME
                                                )  
						  
						  )
			 )
	</select>
	
<select id="returnOptionSerial" parameterType="com.path.dbmaps.vo.S_ADDITIONS_OPTIONSVO" resultType="string">
 	SELECT <if test="isSybase == 1">TOP 1 </if>OPTION_SERIAL
	  FROM S_ADDITIONS_OPTIONS
	 WHERE (BRIEF_NAME_ENG  = #{BRIEF_NAME_ENG} OR BRIEF_NAME_ARAB = #{BRIEF_NAME_ENG})
	<if test="isSybase != 1"> AND ROWNUM = 1</if>
</select>
<resultMap id="usrBranchManagerMap" type="usrVO">
	<result property="FIRST_NAME_ARABIC" column="FIRST_NAME_ARABIC" />
	<result property="LAST_NAME_ARABIC" column="LAST_NAME_ARABIC" />
	<result property="FIRST_NAME" column="FIRST_NAME" />
	<result property="LAST_NAME" column="LAST_NAME" />
</resultMap>
<select id="returnBranchManagerDetails" parameterType="ctsTellerVO" resultMap="usrBranchManagerMap"> 
	SELECT USR.FIRST_NAME_ARABIC, USR.LAST_NAME_ARABIC,USR.FIRST_NAME, USR.LAST_NAME
	FROM USR, CTSTELLER
	WHERE CTSTELLER.COMP_CODE = #{COMP_CODE}
	AND	CTSTELLER.BRANCH_CODE = #{BRANCH_CODE} 
	AND	CTSTELLER.USER_ID	  = USR.USER_ID
	AND	CTSTELLER.CODE 	= ( SELECT MIN(CTSTELLER.CODE)
								FROM	CTSTELLER
								 WHERE CTSTELLER.COMP_CODE  = #{COMP_CODE}
								 AND CTSTELLER.BRANCH_CODE 	= #{BRANCH_CODE}
								AND	 CTSTELLER.USER_IS_BRANCH_MANAGER 	= '1')	
</select>

<resultMap type="hashmap" id="maxLengthsMap">
	<result column="colName" javaType="string" property="colName"/>
	<result column="maxLen" javaType="BigDecimal" property="maxLen"/>
</resultMap>
<select id="returnMaxLengths" resultMap="maxLengthsMap" parameterType="additionalFieldSC">
	<choose>
       <when test="isSybase == 1">
       		SELECT name colName,length maxLen FROM syscolumns WHERE id 
       		IN (SELECT id from sysobjects where name IN( SELECT M.TABLE_NAME FROM SYS_PARAM_ADD_FIELDS_TBL_MAP M 
			WHERE M.PROG_REFERENCE = #{progRef}))
			AND name  
	   </when>
<!--**the correct max length of a column is based on the value of NLS_LENGTH_SEMANTICS (CHAR,BYTE) in NLS_DATABASE_PARAMETERS
		if "CHAR" (iMAL default) then use "CHAR_LENGTH" else if "BYTE" then use DATA_LENGTH **-->
       <otherwise>
       		SELECT C.COLUMN_NAME colName, C.CHAR_LENGTH maxLen FROM USER_TAB_COLUMNS C WHERE TABLE_NAME = (SELECT M.TABLE_NAME FROM SYS_PARAM_ADD_FIELDS_TBL_MAP M 
			WHERE M.PROG_REFERENCE = #{progRef})
			AND COLUMN_NAME
	   </otherwise>
	</choose>
	IN('ADD_STRING1','ADD_STRING10','ADD_STRING11','ADD_STRING12','ADD_STRING13','ADD_STRING14','ADD_STRING15','ADD_STRING2','ADD_STRING3','ADD_STRING4','ADD_STRING5','ADD_STRING6','ADD_STRING7','ADD_STRING8','ADD_STRING9')
</select>

<select id="returnHelpPathFromOpt" parameterType="commonLibSC" resultType="string">
	SELECT HELP_PATH FROM OPT WHERE APP_NAME = #{appName} AND PROG_REF = #{progRef}
</select>
<insert id="saveGridColumnsOrder" parameterType="com.path.dbmaps.vo.SYS_PARAM_USER_PREFERENCESVO">
	BEGIN
		DELETE 
		  FROM SYS_PARAM_USER_PREFERENCES 
		 WHERE APP_NAME  = #{APP_NAME}
		   AND USER_ID   = #{USER_ID}
		   AND PROG_REF  = #{PROG_REF}
		   AND OBJECT_ID   = #{OBJECT_ID}
		   AND IS_DEFAULT = #{IS_DEFAULT}
	       AND OBJECT_TYPE = #{OBJECT_TYPE}<if test="isOracle == 1">;</if>
		INSERT INTO SYS_PARAM_USER_PREFERENCES(APP_NAME, USER_ID, PROG_REF, OBJECT_ID, IS_DEFAULT, OBJECT_TYPE, USER_PREFERENCES)
		VALUES(#{APP_NAME},#{USER_ID},#{PROG_REF},#{OBJECT_ID}, #{IS_DEFAULT},#{OBJECT_TYPE}, #{USER_PREFERENCES})<if test="isOracle == 1">;</if>
	END<if test="isOracle == 1">;</if>
</insert>
<insert id="saveDefaultGridColumnsOrder" parameterType="com.path.dbmaps.vo.SYS_PARAM_USER_PREFERENCESVO">
	BEGIN
	<!-- delete operation is just to ensure that no incorrect data available, since only one record/grid with IS_DEFAULT='Y' should exist -->
		DELETE 
		  FROM SYS_PARAM_USER_PREFERENCES 
		 WHERE APP_NAME  = #{APP_NAME}
		   AND PROG_REF  = #{PROG_REF}
		   AND OBJECT_ID   = #{OBJECT_ID}
	       AND OBJECT_TYPE = #{OBJECT_TYPE}
	       AND IS_DEFAULT = #{IS_DEFAULT}<if test="isOracle == 1">;</if>
		INSERT INTO SYS_PARAM_USER_PREFERENCES(APP_NAME, USER_ID, PROG_REF, OBJECT_ID, IS_DEFAULT, OBJECT_TYPE, USER_PREFERENCES)
		VALUES(#{APP_NAME},#{USER_ID},#{PROG_REF},#{OBJECT_ID},#{IS_DEFAULT}, #{OBJECT_TYPE}, #{USER_PREFERENCES})<if test="isOracle == 1">;</if>
	END<if test="isOracle == 1">;</if>
</insert>
<select id="returnGridColumnsOrder" parameterType="com.path.dbmaps.vo.SYS_PARAM_USER_PREFERENCESVO" resultType="com.path.dbmaps.vo.SYS_PARAM_USER_PREFERENCESVO">
SELECT <if test="isSybase == 1">TOP 1</if> 
	   APP_NAME
      ,USER_ID
      ,PROG_REF
      ,OBJECT_ID
      ,USER_PREFERENCES
  FROM SYS_PARAM_USER_PREFERENCES 
 WHERE (APP_NAME = #{APP_NAME}
   AND USER_ID = #{USER_ID}
   AND PROG_REF = #{PROG_REF}
   AND OBJECT_ID = #{OBJECT_ID}
   AND IS_DEFAULT = 'N'
   AND UPPER(OBJECT_TYPE) = UPPER(#{OBJECT_TYPE}))
   OR
   (APP_NAME = #{APP_NAME}
   AND PROG_REF = #{PROG_REF}
   AND OBJECT_ID = #{OBJECT_ID}
   AND IS_DEFAULT = 'Y'
   AND UPPER(OBJECT_TYPE) = UPPER(#{OBJECT_TYPE})
   AND NOT EXISTS (SELECT 1
  FROM SYS_PARAM_USER_PREFERENCES 
 WHERE APP_NAME = #{APP_NAME}
   AND USER_ID = #{USER_ID}
   AND PROG_REF = #{PROG_REF}
   AND OBJECT_ID = #{OBJECT_ID}
   AND IS_DEFAULT = 'N'
   AND UPPER(OBJECT_TYPE) = UPPER(#{OBJECT_TYPE})))
   <if test="isOracle == 1">
   AND ROWNUM=1
   </if> 
</select>

<delete id="resetGridColumnsOrder" parameterType="com.path.dbmaps.vo.SYS_PARAM_USER_PREFERENCESVO">
DELETE 
  FROM SYS_PARAM_USER_PREFERENCES 
 WHERE APP_NAME = #{APP_NAME}
   AND USER_ID  = #{USER_ID}
   AND PROG_REF = #{PROG_REF}
   AND OBJECT_ID  = #{OBJECT_ID}
   AND UPPER(OBJECT_TYPE) = UPPER(#{OBJECT_TYPE})
</delete>
<delete id="deleteAllPrinters">
DELETE FROM SYS_WEB_PRINTERS 
</delete>
<update id="resetUSRDefPrinter">
	BEGIN
		DELETE 
		FROM USER_PRINTERS 
		WHERE PRINTER_NAME NOT IN (SELECT PRINTER_NAME FROM SYS_WEB_PRINTERS)<if test="isOracle == 1">;</if>
		
		UPDATE USR SET DEFAULT_PRINTER = Null 
		WHERE DEFAULT_PRINTER NOT IN (SELECT PRINTER_NAME FROM SYS_WEB_PRINTERS)<if test="isOracle == 1">;</if>
	END<if test="isOracle == 1">;</if>
</update>

<select id="returnNumInWordsByLang" resultType="com.path.dbmaps.vo.SYS_CONVERT_NUMBER_TO_WORDSVO" parameterType="string">
	SELECT 
	<include refid="SYS_CONVERT_NUMBER_TO_WORDS.Base_Column_List"/>
	FROM SYS_CONVERT_NUMBER_TO_WORDS
	WHERE LANG_CODE = #{lang}
</select>

<resultMap type="com.path.vo.common.CurrencyToWordsCO" id="returnCurrenciesInWordsByLangMap">
	<result column="CURRENCY_NAME" property="currToWordsVO.CURRENCY_NAME"/>
	<result column="DECIMAL_NAME" property="currToWordsVO.DECIMAL_NAME"/>
	<result column="PLURAL_CURRENCY_NAME" property="currToWordsVO.PLURAL_CURRENCY_NAME"/>
	<result column="PLURAL_DECIMAL_NAME" property="currToWordsVO.PLURAL_DECIMAL_NAME"/>
	<result column="DUAL_CURRENCY_NAME" property="currToWordsVO.DUAL_CURRENCY_NAME"/>
	<result column="DUAL_DECIMAL_NAME" property="currToWordsVO.DUAL_DECIMAL_NAME"/>
	<result column="APPENDED_CURRENCY_NAME" property="currToWordsVO.APPENDED_CURRENCY_NAME"/>
	<result column="APPENDED_DECIMAL_NAME" property="currToWordsVO.APPENDED_DECIMAL_NAME"/>
	<result column="CY_ISO_CODE" property="isoCurrVO.CY_ISO_CODE"/>
	<result column="IS_FEMALE_NOUN_YN" property="isoCurrVO.IS_FEMALE_NOUN_YN"/>
	<result column="IS_DECIMAL_FEMALE_NOUN_YN" property="isoCurrVO.IS_DECIMAL_FEMALE_NOUN_YN"/>
</resultMap>
<select id="returnCurrenciesInWordsByLang" resultMap="returnCurrenciesInWordsByLangMap" parameterType="commonLibSC">
	SELECT I.CY_ISO_CODE, W.CURRENCY_NAME, W.DECIMAL_NAME, W.PLURAL_CURRENCY_NAME,
	W.PLURAL_DECIMAL_NAME, W.DUAL_CURRENCY_NAME, W.DUAL_DECIMAL_NAME,
	W.APPENDED_CURRENCY_NAME,
	W.APPENDED_DECIMAL_NAME, I.IS_FEMALE_NOUN_YN, I.IS_DECIMAL_FEMALE_NOUN_YN
	FROM SYS_PARAM_ISO_CURRENCIES I, SYS_CONVERT_CURRENCY_TO_WORDS W
	WHERE W.CY_ISO_CODE = I.CY_ISO_CODE 
	AND I.CY_ISO_CODE = #{cyIsoCode}
	AND W.LANG_CODE = #{language}
</select>
<select id="checkReportDisplayArgs" parameterType="commonLibSC" resultType="int">
SELECT count(*) 
  FROM IRP_REP_ARGUMENTS
 WHERE REPORT_ID = #{reportId}
   AND ARGUMENT_SOURCE <![CDATA[<>]]> 2
   AND DISPLAY_FLAG = 'Y'
</select>
<sql id="sql_updateBRANCH_SESSION" >
  update BRANCH_SESSION
  <set >
    <if test="DATE_CLOSED != null" >
      DATE_CLOSED = #{DATE_CLOSED},
    </if>
    <if test="SESSION_COUNTER != null" >
      <choose >
        <when test="SESSION_COUNTER == emptyBigDecimalValue" >
          SESSION_COUNTER = NULL ,
        </when>
        <otherwise >
          SESSION_COUNTER = #{SESSION_COUNTER},
        </otherwise>
      </choose>
    </if>
    <if test="OPENED_BY != null" >
      OPENED_BY = #{OPENED_BY},
    </if>
    <if test="CLOSED_BY != null" >
      CLOSED_BY = #{CLOSED_BY},
    </if>
    <if test="IS_BRANCH != null" >
      IS_BRANCH = #{IS_BRANCH},
    </if>
    <if test="REOPENED_BY != null" >
      REOPENED_BY = #{REOPENED_BY},
    </if>
    <if test="DATE_REOPENED != null" >
      DATE_REOPENED = #{DATE_REOPENED},
    </if>
    <if test="STATUS != null" >
      STATUS = 'C',
    </if>
  </set>
  where BRANCH_CODE = #{BRANCH_CODE}
    and COMP_CODE = #{COMP_CODE}
    and DATE_OPENED = #{DATE_OPENED}
    and STATUS = #{STATUS}
</sql>
<update id="updateBRANCH_SESSION" parameterType="com.path.dbmaps.vo.BRANCH_SESSIONVO" >
  <include refid="commonLibMapper.sql_updateBRANCH_SESSION" />
</update>

<resultMap type="hashmap" id="convertLikeLangResMap">
<result javaType="string" property="LANG_CODE" column="LANG_CODE"/>
<result javaType="string" property="CONVERT_LIKE_LANG" column="CONVERT_LIKE_LANG"/>
<result javaType="string" property="CONVERSION_METHOD_ID" column="CONVERSION_METHOD_ID"/>
</resultMap>
<select id="returnConvertLikeLangMap" resultMap="convertLikeLangResMap">
	SELECT
	<include refid="SYS_PARAM_LANGUAGES.Base_Column_List"></include>
	FROM SYS_PARAM_LANGUAGES
</select>

<resultMap type="hashmap" id="convertLikeCurrencyResMap">
<result javaType="string" property="CY_ISO_CODE" column="CY_ISO_CODE"/>
<result javaType="string" property="CONVERT_LIKE_CURRENCY" column="CONVERT_LIKE_CURRENCY"/>
</resultMap>
<select id="returnConvertLikeCurrencyMap" resultMap="convertLikeCurrencyResMap">
	SELECT
	<include refid="SYS_PARAM_ISO_CURRENCIES.Base_Column_List"></include>
	FROM SYS_PARAM_ISO_CURRENCIES
</select>

<resultMap type="com.path.dbmaps.vo.SYS_PARAM_BTN_CUSTVO" id="returnToolBarButtonCustMap">
	<result property="BTN_ID" column="BTN_ID"/>
	<result property="LABEL_KEY" column="LABEL_KEY"/>
	<result property="APPLY_FORM_VALIDATION_YN" column="APPLY_FORM_VALIDATION_YN"/>
	<result property="ACCESS_PROG_REF" column="ACCESS_PROG_REF"/>
	<result property="ICON_IMAGE" column="ICON_IMAGE"/>
	<result property="MODIFIED_DATE" column="MODIFIED_DATE"/>
	<result property="VISIBILITY_EXPRESSION" column="VISIBILITY_EXPRESSION"/>
</resultMap>

<select id="returnToolBarButtonCust" resultMap="returnToolBarButtonCustMap" parameterType="com.path.dbmaps.vo.SYS_PARAM_BTN_CUSTVO">

	SELECT BTN_ID,
	       LABEL_KEY,
	       APPLY_FORM_VALIDATION_YN,
	       ACCESS_PROG_REF,
	       VISIBILITY_EXPRESSION,
	       ICON_IMAGE ,
	       MODIFIED_DATE
	FROM SYS_PARAM_BTN_CUST S
	WHERE S.APP_NAME = #{APP_NAME,jdbcType=VARCHAR}
			AND S.COMP_CODE  = 0
			AND S.PROG_REF = #{PROG_REF,jdbcType=VARCHAR}
			<if test=' TOOLBAR_ID != null and !"".equals(TOOLBAR_ID) '>
				AND S.TOOLBAR_ID = #{TOOLBAR_ID,jdbcType=VARCHAR}
			</if>	
	ORDER BY BTN_ORDER ASC

</select>

<resultMap type="customActionParamCO" id="returnButtonCustActionDataMap">
	<result column="BTN_ID" 		property="btnId"/>
	<result column="OP_ID" 			property="operationId"/>
	<result column="OP_TYPE" 		property="operationType"/>
	<result column="OP_DESC" 		property="operationDesc"/>
	<result column="APP_NAME" 		property="appName"/>
	<result column="PROG_REF" 		property="progRef"/>
	<result column="API_CODE" 		property="actionId"/>
	<result column="API_TYPE" 		property="apiType"/>
	<result column="PROCEDURE_NAME" property="procedureName"/>
	<result column="COMPONENT_ID" 	property="componentId"/>
	<result column="SERVICE_TYPE" 	property="apiType"/>
	<result column="ARG_ID" 		property="argId"/>
	<result column="ARG_DESC" 		property="argDesc"/>
	<result column="ARG_NAME" 		property="argName"/>
	<result column="ARG_TYPE" 		property="argType"/>
	<result column="STATUS" 		property="status"/>
	<result column="MAP_TYPE" 		property="mapType"/>
	<result column="DELIMITER" 		property="delimiter"/>
	<result column="SELECTION_TYPE" property="selectionType"/>
	<result column="MAP_VALUE" 		property="mapValue"/>
	<result column="NESTED" 		property="nestedArg"/>
	<result column="MAP_EXPRESSION" property="mapExpression"/>
	<result column="LINK_OP_ID" 	property="linkActionId"/>
	<result column="LINK_ARG_ID" 	property="linkArgId"/>
	<result column="RESULT" 		property="condResult"/>
	<result column="RESULT_OP_ID" 	property="condResultOpId"/>
	<result column="COND_EXPR" 		property="condExpr"/>
	<!--TP#983067 Option to load JS Method to be called from js File located on the server-->
	<result column="SCRIPT_URL" 		property="scriptUrl"/>
	<!--end: baaz_end_tp3-->
	<result column="SCREEN_WIDTH" 	property="screenWidth"/>
	<result column="SCREEN_HEIGHT" 	property="screenHeight"/>
	<result column="SCREEN_TITLE" 	property="screenTitle"/>
	<result column="LINE_NO" 		property="condLineNo"/>
	<result column="PARENT_OP_ID" 	property="parentOpId"/>
	<result column="MAP_DIRECTION" 	property="mapDirection"/>
	<result column="INITIAL_LOAD_PARAM" 	property="initialLoadParam"/>
	
	<result column="DEFAULT_VALUE" 	property="argDefaultVal"/>
	<result column="REQ_ARG" 		property="requiredArg"/>
	
	<result column="WS_ACCEPT_TYPE" 	property="acceptType"/>
	<result column="WS_CONTENT_TYPE" 	property="contentType"/>
	
	<result column="SOAP_OPERATION" 			property="soapOperation"/>
	<result column="SOAP_OPERATION_LOCAL_PART" 	property="soapOperationLocalPart"/>
	<result column="SOAP_MESSAGE_PREFIX" 		property="soapMessagePrefix"/>
	<result column="SOAP_NAMESPACES" 			property="soapNamespaces"/>
	<result column="SOAP_ACTION" 				property="soapAction"/>

	<result column="DYN_PARAM_TYPE" 			property="dynParamType"/>
	<result column="FROM_SOURCE" 				property="fromSource"/>

</resultMap>

<select id="returnButtonCustActionData" resultMap="returnButtonCustActionDataMap" parameterType="buttonCustomizationSC">

  SELECT
   	   'I' INITIAL_LOAD_PARAM,
  	   S.BTN_ID,
       S.OP_ID,
       S.OP_TYPE,
       S.PARENT_OP_ID,
       S.OP_DESC,
       S.API_CODE,
       S.ARG_ID,
       S.ARG_DESC,
       S.DEFAULT_VALUE,
       S.REQ_ARG,
       S.ARG_NAME,
       (CASE
         WHEN P.MAP_TYPE = '1' THEN
          (SELECT DISTINCT E.FIELD_ID
             FROM SYS_PARAM_SCREEN_ELEMENTS E
            WHERE E.APP_NAME = S.APP_NAME
              AND (E.PROG_REF = #{progRef,jdbcType=VARCHAR}
               OR E.PROG_REF = (SELECT PARENT_REF FROM OPT WHERE PROG_REF = #{progRef,jdbcType=VARCHAR} AND APP_NAME =  E.APP_NAME AND PARENT_REF IS NOT NULL)
                )
              <choose >
 				<when test="isSybase == 1" >
    				AND E.FLD_IDENTIFIER = CONVERT(NUMERIC,P.MAP_VALUE))
 				</when>
 				<otherwise >
    				AND E.FLD_IDENTIFIER = TO_NUMBER(P.MAP_VALUE))
				</otherwise>
		     </choose>
	     ELSE
          P.MAP_VALUE
       END) MAP_VALUE,
      P.MAP_EXPRESSION,
       Q.RESULT_OP_ID
       <if test=' showArgDetails != null and "1".equals(showArgDetails) '>
       ,
       S.APP_NAME,
       S.PROG_REF,
       S.PROCEDURE_NAME,
       S.SERVICE_TYPE,
       S.WS_ACCEPT_TYPE,
       S.WS_CONTENT_TYPE,
       S.ARG_TYPE,
       S.STATUS,
       S.COND_EXPR,
       <!--TP#983067 Option to load JS Method to be called from js File located on the server-->
       SCRIPT_URL,
       <!--end: baaz_end_tp3-->
       S.SCREEN_WIDTH,
       S.SCREEN_HEIGHT,
       S.SCREEN_TITLE,
	   S.SOAP_OPERATION,
       S.SOAP_OPERATION_LOCAL_PART,
       S.SOAP_MESSAGE_PREFIX,
       S.SOAP_NAMESPACES,
       S.SOAP_ACTION,
       P.NESTED,
       P.MAP_TYPE,
       P.LINK_OP_ID,
       P.LINK_ARG_ID,
       Q.LINE_NO,
       Q.RESULT
       </if>
  FROM (SELECT M.BTN_ID,
               M.APP_NAME,
               M.PROG_REF,
               M.API_CODE,
               M.OP_ID,
               M.OP_TYPE,
               M.PARENT_OP_ID,
               M.COND_EXPR,
               <!--TP#983067 Option to load JS Method to be called from js File located on the server-->
       	     SCRIPT_URL,
               <!--end: baaz_end_tp3-->
               M.SCREEN_WIDTH,
               M.SCREEN_HEIGHT,
               M.SCREEN_TITLE,
               M.OP_DESC,
               M.PROCEDURE_NAME,
               M.SERVICE_TYPE,
               M.WS_ACCEPT_TYPE,
               M.WS_CONTENT_TYPE,
               M.SOAP_OPERATION,
               M.SOAP_OPERATION_LOCAL_PART,
               M.SOAP_MESSAGE_PREFIX,
               M.SOAP_NAMESPACES,
               M.SOAP_ACTION,
               R.ARG_ID,
               R.ARG_NAME,
               R.ARG_TYPE,
               R.STATUS,
               R.DESCRIPTION ARG_DESC,
               R.DEFAULT_VALUE,
               R.REQ_ARG
          FROM (SELECT B.BTN_ID,
                       B.APP_NAME,
                       B.PROG_REF,
                       A.OP_ID,
                       A.OP_TYPE,
                       A.PARENT_OP_ID,
                       A.COND_EXPR,
                       <!--TP#983067 Option to load JS Method to be called from js File located on the server-->
       		   case WHEN A.SCRIPT_URL IS NULL THEN 'false' else 'true' END as "SCRIPT_URL",
      		   <!--end: baaz_end_tp3-->
                       A.SCREEN_WIDTH,
                       A.SCREEN_HEIGHT,
                       A.SCREEN_TITLE,
                       A.DESCRIPTION OP_DESC,
                       (CASE WHEN C.SERVICE_TYPE = 'P' THEN C.PROCEDURE_NAME ELSE C.WS_ENDPOINT END) PROCEDURE_NAME,
                       (CASE WHEN A.API_TYPE = '3' THEN 'D' ELSE C.SERVICE_TYPE END) SERVICE_TYPE,
                       C.WS_ACCEPT_TYPE,
                       C.WS_CONTENT_TYPE,
                       A.API_CODE,
                       C.SOAP_OPERATION,
                       C.SOAP_OPERATION_LOCAL_PART,
                       C.SOAP_MESSAGE_PREFIX,
                       C.SOAP_NAMESPACES,
                       C.SOAP_ACTION
                  FROM SYS_PARAM_BTN_CUST B INNER JOIN SYS_PARAM_BTN_CUST_ACTIONS A ON B.BTN_ID = A.BTN_ID AND (A.API_TYPE <![CDATA[ <> ]]> '2' OR A.API_TYPE IS NULL) <!-- 2 means report, null means condition not action -->
                       LEFT JOIN IM_IMAL_API C ON A.API_CODE = C.API_CODE
                 WHERE B.BTN_ID = #{buttonId,jdbcType=NUMERIC}
                   ) M
          LEFT JOIN IM_API_ARGUMENT R ON R.API_CODE = M.API_CODE) S
  LEFT JOIN SYS_PARAM_ACTION_ARG_MAP P ON P.ARG_ID = S.ARG_ID
                                       AND P.OP_ID = S.OP_ID
                                       AND P.BTN_ID = S.BTN_ID
  LEFT JOIN SYS_PARAM_ACTION_COND_MAP Q ON Q.OP_ID = S.OP_ID
                                       AND Q.BTN_ID = S.BTN_ID                                        
  <if test=' onBtnLoad != null and !"".equals(onBtnLoad) '>
	 WHERE ( P.MAP_TYPE = '1' OR S.OP_TYPE = 'C' ) 
  </if>		
  ORDER BY S.PARENT_OP_ID DESC, S.OP_ID ASC, S.ARG_ID ASC

</select>

<select id="returnGlobalActivityCommonData" resultMap="returnButtonCustActionDataMap" parameterType="buttonCustomizationSC">

 
SELECT 'G' INITIAL_LOAD_PARAM,
       B.BTN_ID,
       B.OP_ID,
       S.API_TYPE,
       (CASE
         WHEN S.API_TYPE = '3' THEN
          B.DYN_ELEM_IDENTIFIER
         ELSE
          B.ARG_ID
       END) ARG_ID,
       B.ARG_ID MY_ARG_ID,
       (CASE
         WHEN B.MAP_TYPE = '1' THEN
         	<choose>
				<when test='dynScreenId != null and dynElementId != null'>
					( SELECT S.PROPERTY_VALUE FROM SYS_DYN_SCREEN_ELEMENTS_DET S
		       		  WHERE S.ELEMENT_ID = B.SCREEN_FLD_IDENTIFIER AND S.PROPERTY_CODE = 'id' ) 
         		</when>
         		<otherwise>	
			          (SELECT E.FIELD_ID
			             FROM SYS_PARAM_SCREEN_ELEMENTS E
			            WHERE E.APP_NAME = B.APP_NAME
			              AND (E.PROG_REF = B.SCREEN_ELEM_PROG_REF OR E.PROG_REF = (SELECT PARENT_REF FROM OPT WHERE PROG_REF = B.SCREEN_ELEM_PROG_REF AND APP_NAME =  #{currAppName,jdbcType=VARCHAR} AND PARENT_REF IS NOT NULL))
			              AND E.FLD_IDENTIFIER = B.SCREEN_FLD_IDENTIFIER)
                </otherwise>
           	</choose>
         ELSE
          B.MAP_VALUE
       END) MAP_VALUE,
       (CASE
         WHEN B.MAP_TYPE = '1' THEN
          (SELECT E.FROM_SOURCE
             FROM SYS_PARAM_SCREEN_ELEMENTS E
            WHERE E.APP_NAME = B.APP_NAME
              AND (E.PROG_REF = B.SCREEN_ELEM_PROG_REF OR E.PROG_REF = (SELECT PARENT_REF FROM OPT WHERE PROG_REF = B.SCREEN_ELEM_PROG_REF AND APP_NAME =  #{currAppName,jdbcType=VARCHAR} AND PARENT_REF IS NOT NULL))
              AND E.FLD_IDENTIFIER = B.SCREEN_FLD_IDENTIFIER)
         ELSE
          ''
       END) FROM_SOURCE,
       B.MAP_TYPE,
       B.MAP_DIRECTION,
       B.DELIMITER,
       B.SELECTION_TYPE,
       B.PROG_REF,
       S.APP_NAME,
       S.API_CODE,
       S.OP_TYPE,
       S.ARG_NAME,
       S.ARG_TYPE,
       S.PARENT_OP_ID,
       S.COND_EXPR,
       S.SCREEN_WIDTH,
       S.SCREEN_HEIGHT,
       S.SCREEN_TITLE,
       S.OP_DESC,
       S.PROCEDURE_NAME,
       S.SERVICE_TYPE,
       S.WS_ACCEPT_TYPE,
       S.WS_CONTENT_TYPE,
       S.SOAP_OPERATION,
       S.SOAP_OPERATION_LOCAL_PART,
       S.SOAP_MESSAGE_PREFIX,
       S.SOAP_NAMESPACES,
       S.SOAP_ACTION,
       S.STATUS,
       S.DEFAULT_VALUE,
       S.REQ_ARG,
       B.DYN_PARAM_TYPE
  FROM SYS_PARAM_GLOBAL_ACT_ARG_MAP B
  LEFT JOIN (SELECT M.BTN_ID,
                    M.APP_NAME,
                    M.PROG_REF,
                    M.API_CODE,
                    M.OP_ID,
                    M.OP_TYPE,
                    M.ARG_ID,
                    M.ARG_NAME,
                    M.ARG_TYPE,
                    M.PARENT_OP_ID,
                    M.COND_EXPR,
                    M.SCREEN_WIDTH,
                    M.SCREEN_HEIGHT,
                    M.SCREEN_TITLE,
                    M.OP_DESC,
                    M.PROCEDURE_NAME,
                    M.SERVICE_TYPE,
                    M.WS_ACCEPT_TYPE,
                    M.WS_CONTENT_TYPE,
                    M.SOAP_OPERATION,
                    M.SOAP_OPERATION_LOCAL_PART,
                    M.SOAP_MESSAGE_PREFIX,
                    M.SOAP_NAMESPACES,
                    M.SOAP_ACTION,
                    M.STATUS,
                    M.ARG_DESC,
                    M.DEFAULT_VALUE,
                    M.REQ_ARG,
                    M.API_TYPE
               FROM (
               
                    SELECT B.BTN_ID,
                            B.APP_NAME,
                            B.PROG_REF,
                            A.OP_ID,
                            A.OP_TYPE,
                            A.PARENT_OP_ID,
                            A.COND_EXPR,
                            A.SCREEN_WIDTH,
                            A.SCREEN_HEIGHT,
                            A.SCREEN_TITLE,
                            A.DESCRIPTION OP_DESC,
                            (CASE
                              WHEN C.SERVICE_TYPE = 'P' THEN
                               C.PROCEDURE_NAME
                              ELSE
                               C.WS_ENDPOINT
                            END) PROCEDURE_NAME,
                            (CASE
                              WHEN A.API_TYPE = '3' THEN
                               'D'
                              ELSE
                               C.SERVICE_TYPE
                            END) SERVICE_TYPE,
                            C.WS_ACCEPT_TYPE,
                            C.WS_CONTENT_TYPE,
                            A.API_CODE,
                            C.SOAP_OPERATION,
                            C.SOAP_OPERATION_LOCAL_PART,
                            C.SOAP_MESSAGE_PREFIX,
                            C.SOAP_NAMESPACES,
                            C.SOAP_ACTION,
                            A.API_TYPE,
                            R.REQ_ARG,
                            R.DESCRIPTION ARG_DESC,
                            R.DEFAULT_VALUE,
                            R.STATUS,
                            R.ARG_ID,
                            R.ARG_NAME,
                            R.ARG_TYPE
                       FROM SYS_PARAM_BTN_CUST B
                       LEFT OUTER JOIN SYS_PARAM_BTN_CUST_ACTIONS A ON B.BTN_ID =
                                                                       A.BTN_ID
                                                                   AND A.API_TYPE = '1'
                       LEFT JOIN IM_IMAL_API C ON A.API_CODE = C.API_CODE 
                       LEFT JOIN IM_API_ARGUMENT R ON R.API_CODE = C.API_CODE
                      WHERE B.BTN_ID = #{buttonId,jdbcType=NUMERIC}
                      
                      
                      
                      UNION ALL
                      
                      
                      SELECT B.BTN_ID,
                            B.APP_NAME,
                            B.PROG_REF,
                            A.OP_ID,
                            A.OP_TYPE,
                            A.PARENT_OP_ID,
                            A.COND_EXPR,
                            A.SCREEN_WIDTH,
                            A.SCREEN_HEIGHT,
                            A.SCREEN_TITLE,
                            A.DESCRIPTION OP_DESC,
                            NULL PROCEDURE_NAME,
                            'D' SERVICE_TYPE,
                            NULL WS_ACCEPT_TYPE,
                            NULL WS_CONTENT_TYPE,
                            A.API_CODE,
                            NULL SOAP_OPERATION,
                            NULL SOAP_OPERATION_LOCAL_PART,
                            NULL SOAP_MESSAGE_PREFIX,
                            NULL SOAP_NAMESPACES,
                            NULL SOAP_ACTION,
                            A.API_TYPE,
                            NULL REQ_ARG,
                            NULL ARG_DESC,
                            NULL DEFAULT_VALUE,
                            NULL STATUS,
                            R.ELEMENT_ID ARG_ID,
                            NULL ARG_NAME,
                            NULL ARG_TYPE
                       FROM SYS_PARAM_BTN_CUST B
                       LEFT OUTER JOIN SYS_PARAM_BTN_CUST_ACTIONS A ON B.BTN_ID =
                                                                       A.BTN_ID
                                                                      AND A.API_TYPE = '3'
                       LEFT JOIN SYS_DYN_SCREEN_DEF C ON A.API_CODE = C.DYN_SCREEN_ID
                       LEFT JOIN SYS_DYN_SCREEN_ELEMENTS R ON R.DYN_SCREEN_ID = C.DYN_SCREEN_ID 
                      WHERE B.BTN_ID = #{buttonId,jdbcType=NUMERIC}
                      
                      
                      UNION ALL
                      
                      
                      SELECT B.BTN_ID,
                            B.APP_NAME,
                            B.PROG_REF,
                            A.OP_ID,
                            A.OP_TYPE,
                            A.PARENT_OP_ID,
                            A.COND_EXPR,
                            A.SCREEN_WIDTH,
                            A.SCREEN_HEIGHT,
                            A.SCREEN_TITLE,
                            A.DESCRIPTION OP_DESC,
                            A.REPORT_PROG_REF PROCEDURE_NAME,
                            'I' SERVICE_TYPE,
                            NULL WS_ACCEPT_TYPE,
                            NULL WS_CONTENT_TYPE,
                            R.REPORT_ID API_CODE,
                            NULL SOAP_OPERATION,
                            NULL SOAP_OPERATION_LOCAL_PART,
                            NULL SOAP_MESSAGE_PREFIX,
                            NULL SOAP_NAMESPACES,
                            NULL SOAP_ACTION,
                            A.API_TYPE,
                            NULL REQ_ARG,
                            NULL ARG_DESC,
                            NULL DEFAULT_VALUE,
                            NULL STATUS,
                            R.ARGUMENT_ID ARG_ID,
                            R.ARGUMENT_NAME ARG_NAME,
                            (CASE
                 				WHEN R.ARGUMENT_TYPE = 'NUMBER' THEN
				                'N'
				                WHEN R.ARGUMENT_TYPE = 'VARCHAR2' THEN
				                'V'
				                WHEN R.ARGUMENT_TYPE = 'DATE' THEN
				                'T'
				                WHEN R.ARGUMENT_TYPE = 'DATETIME' THEN
				                'T'
				             END) ARG_TYPE
                       FROM SYS_PARAM_BTN_CUST B
                       LEFT OUTER JOIN SYS_PARAM_BTN_CUST_ACTIONS A ON B.BTN_ID =
                                                                       A.BTN_ID
                                                                   AND A.REPORT_PROG_REF IS NOT NULL
                                                                   AND A.API_TYPE = '2' 
                       LEFT JOIN IRP_AD_HOC_REPORT C ON C.PROG_REF =
                                                   A.REPORT_PROG_REF
                                                   AND (C.APP_NAME =
                                                        A.REPORT_APP_NAME or A.REPORT_APP_NAME = 'IMAL' )
                       LEFT JOIN IRP_REP_ARGUMENTS R ON R.REPORT_ID =
                                                              C.REPORT_ID
                      WHERE B.BTN_ID = #{buttonId,jdbcType=NUMERIC}
                      
                      
                      ) M
                ) S ON B.BTN_ID =
                        S.BTN_ID
                    and B.OP_ID =
                        S.OP_ID
                    and ( (B.ARG_ID = S.ARG_ID AND S.API_TYPE = '1') OR (B.DYN_ELEM_IDENTIFIER = S.ARG_ID AND S.API_TYPE = '3') OR
                          (B.ARG_ID = S.ARG_ID AND S.API_TYPE = '2'))                                                       
                                                                        
	WHERE B.BTN_ID = #{buttonId,jdbcType=NUMERIC}
	<choose>
			<when test='dynScreenId != null and dynElementId != null'> 
				AND B.DYN_SCREEN_ID  = #{dynScreenId,jdbcType=NUMERIC}
				AND B.DYN_SCREEN_ELEMENT_ID  = #{dynElementId,jdbcType=NUMERIC}
			</when>
			<otherwise> 
			  	AND B.APP_NAME = #{currAppName,jdbcType=VARCHAR}
			  	AND B.PROG_REF = (SELECT PARENT_REF FROM OPT WHERE PROG_REF = #{btnProgRef,jdbcType=VARCHAR} AND APP_NAME =  #{currAppName,jdbcType=VARCHAR} AND PARENT_REF IS NOT NULL)
				 AND 
			     NOT EXISTS(SELECT 1
			                FROM SYS_PARAM_GLOBAL_ACT_ARG_MAP
			                  	WHERE APP_NAME = #{currAppName,jdbcType=VARCHAR}
								<if test = 'fldIdentifier != null'> 
									AND ELEM_FLD_IDENTIFIER = #{fldIdentifier,jdbcType=NUMERIC}
								</if>
								AND PROG_REF=	#{btnProgRef,jdbcType=VARCHAR}
					)
				<if test = 'fldIdentifier != null'>
			  		AND B.ELEM_FLD_IDENTIFIER = #{fldIdentifier,jdbcType=NUMERIC}
			  	</if>
			  	AND B.ELEM_SEQUENCE_ID  = #{elemSequenceId,jdbcType=NUMERIC}
  			</otherwise>
  	</choose>
  	
  	
  	UNION ALL
  	
  	SELECT 'G' INITIAL_LOAD_PARAM,
       B.BTN_ID,
       B.OP_ID,
       S.API_TYPE,
       (CASE
         WHEN S.API_TYPE = '3' THEN
          B.DYN_ELEM_IDENTIFIER
         ELSE
          B.ARG_ID
       END) ARG_ID,
       B.ARG_ID MY_ARG_ID,
       (CASE
         WHEN B.MAP_TYPE = '1' THEN
             <choose>
				<when test='dynScreenId != null and dynElementId != null'>
					( SELECT S.PROPERTY_VALUE FROM SYS_DYN_SCREEN_ELEMENTS_DET S
		       		  WHERE S.ELEMENT_ID = B.SCREEN_FLD_IDENTIFIER AND S.PROPERTY_CODE = 'id' ) 
         		</when>
         		<otherwise>	
			          (SELECT E.FIELD_ID
			             FROM SYS_PARAM_SCREEN_ELEMENTS E
			            WHERE E.APP_NAME = B.APP_NAME
			              AND (E.PROG_REF = B.SCREEN_ELEM_PROG_REF OR E.PROG_REF = (SELECT PARENT_REF FROM OPT WHERE PROG_REF = B.SCREEN_ELEM_PROG_REF AND APP_NAME =  #{currAppName,jdbcType=VARCHAR} AND PARENT_REF IS NOT NULL))
			              AND E.FLD_IDENTIFIER = B.SCREEN_FLD_IDENTIFIER)
                </otherwise>
           	</choose>
         ELSE
          B.MAP_VALUE
       END) MAP_VALUE,
       (CASE
         WHEN B.MAP_TYPE = '1' THEN
          (SELECT E.FROM_SOURCE
             FROM SYS_PARAM_SCREEN_ELEMENTS E
            WHERE E.APP_NAME = B.APP_NAME
              AND (E.PROG_REF = B.SCREEN_ELEM_PROG_REF OR E.PROG_REF = (SELECT PARENT_REF FROM OPT WHERE PROG_REF = B.SCREEN_ELEM_PROG_REF AND APP_NAME =  #{currAppName,jdbcType=VARCHAR} AND PARENT_REF IS NOT NULL))
              AND E.FLD_IDENTIFIER = B.SCREEN_FLD_IDENTIFIER)
         ELSE
          '' 
       END) FROM_SOURCE,
       B.MAP_TYPE,
       B.MAP_DIRECTION,
       B.DELIMITER,
       B.SELECTION_TYPE,
       B.PROG_REF,
       S.APP_NAME,
       S.API_CODE,
       S.OP_TYPE,
       S.ARG_NAME,
       S.ARG_TYPE,
       S.PARENT_OP_ID,
       S.COND_EXPR,
       S.SCREEN_WIDTH,
       S.SCREEN_HEIGHT,
       S.SCREEN_TITLE,
       S.OP_DESC,
       S.PROCEDURE_NAME,
       S.SERVICE_TYPE,
       S.WS_ACCEPT_TYPE,
       S.WS_CONTENT_TYPE,
       S.SOAP_OPERATION,
       S.SOAP_OPERATION_LOCAL_PART,
       S.SOAP_MESSAGE_PREFIX,
       S.SOAP_NAMESPACES,
       S.SOAP_ACTION,
       S.STATUS,
       S.DEFAULT_VALUE,
       S.REQ_ARG,
       B.DYN_PARAM_TYPE
  FROM SYS_PARAM_GLOBAL_ACT_ARG_MAP B
  LEFT JOIN (SELECT M.BTN_ID,
                    M.APP_NAME,
                    M.PROG_REF,
                    M.API_CODE,
                    M.OP_ID,
                    M.OP_TYPE,
                    M.ARG_ID,
                    M.ARG_NAME,
                    M.ARG_TYPE,
                    M.PARENT_OP_ID,
                    M.COND_EXPR,
                    M.SCREEN_WIDTH,
                    M.SCREEN_HEIGHT,
                    M.SCREEN_TITLE,
                    M.OP_DESC,
                    M.PROCEDURE_NAME,
                    M.SERVICE_TYPE,
                    M.WS_ACCEPT_TYPE,
                    M.WS_CONTENT_TYPE,
                    M.SOAP_OPERATION,
                    M.SOAP_OPERATION_LOCAL_PART,
                    M.SOAP_MESSAGE_PREFIX,
                    M.SOAP_NAMESPACES,
                    M.SOAP_ACTION,
                    M.STATUS,
                    M.ARG_DESC,
                    M.DEFAULT_VALUE,
                    M.REQ_ARG,
                    M.API_TYPE
               FROM (
               
                    SELECT B.BTN_ID,
                            B.APP_NAME,
                            B.PROG_REF,
                            A.OP_ID,
                            A.OP_TYPE,
                            A.PARENT_OP_ID,
                            A.COND_EXPR,
                            A.SCREEN_WIDTH,
                            A.SCREEN_HEIGHT,
                            A.SCREEN_TITLE,
                            A.DESCRIPTION OP_DESC,
                            (CASE
                              WHEN C.SERVICE_TYPE = 'P' THEN
                               C.PROCEDURE_NAME
                              ELSE
                               C.WS_ENDPOINT
                            END) PROCEDURE_NAME,
                            (CASE
                              WHEN A.API_TYPE = '3' THEN
                               'D'
                              ELSE
                               C.SERVICE_TYPE
                            END) SERVICE_TYPE,
                            C.WS_ACCEPT_TYPE,
                            C.WS_CONTENT_TYPE,
                            A.API_CODE,
                            C.SOAP_OPERATION,
                            C.SOAP_OPERATION_LOCAL_PART,
                            C.SOAP_MESSAGE_PREFIX,
                            C.SOAP_NAMESPACES,
                            C.SOAP_ACTION,
                            A.API_TYPE,
                            R.REQ_ARG,
                            R.DESCRIPTION ARG_DESC,
                            R.DEFAULT_VALUE,
                            R.STATUS,
                            R.ARG_ID,
                            R.ARG_NAME,
                            R.ARG_TYPE
                       FROM SYS_PARAM_BTN_CUST B
                       LEFT OUTER JOIN SYS_PARAM_BTN_CUST_ACTIONS A ON B.BTN_ID =
                                                                       A.BTN_ID
                                                                   AND A.API_TYPE = '1'
                       LEFT JOIN IM_IMAL_API C ON A.API_CODE = C.API_CODE 
                       LEFT JOIN IM_API_ARGUMENT R ON R.API_CODE = C.API_CODE
                      WHERE B.BTN_ID = #{buttonId,jdbcType=NUMERIC}
                      
                      
                      
                      UNION ALL
                      
                      
                      SELECT B.BTN_ID,
                            B.APP_NAME,
                            B.PROG_REF,
                            A.OP_ID,
                            A.OP_TYPE,
                            A.PARENT_OP_ID,
                            A.COND_EXPR,
                            A.SCREEN_WIDTH,
                            A.SCREEN_HEIGHT,
                            A.SCREEN_TITLE,
                            A.DESCRIPTION OP_DESC,
                            NULL PROCEDURE_NAME,
                            'D' SERVICE_TYPE,
                            NULL WS_ACCEPT_TYPE,
                            NULL WS_CONTENT_TYPE,
                            A.API_CODE,
                            NULL SOAP_OPERATION,
                            NULL SOAP_OPERATION_LOCAL_PART,
                            NULL SOAP_MESSAGE_PREFIX,
                            NULL SOAP_NAMESPACES,
                            NULL SOAP_ACTION,
                            A.API_TYPE,
                            NULL REQ_ARG,
                            NULL ARG_DESC,
                            NULL DEFAULT_VALUE,
                            NULL STATUS,
                            R.ELEMENT_ID ARG_ID,
                            NULL ARG_NAME,
                            NULL ARG_TYPE
                       FROM SYS_PARAM_BTN_CUST B
                       LEFT OUTER JOIN SYS_PARAM_BTN_CUST_ACTIONS A ON B.BTN_ID =
                                                                       A.BTN_ID
                                                                   AND A.API_TYPE = '3'
                       LEFT JOIN SYS_DYN_SCREEN_DEF C ON A.API_CODE = C.DYN_SCREEN_ID
                       LEFT JOIN SYS_DYN_SCREEN_ELEMENTS R ON R.DYN_SCREEN_ID = C.DYN_SCREEN_ID 
                      WHERE B.BTN_ID = #{buttonId,jdbcType=NUMERIC}
                      
                      
                      UNION ALL
                      
                      
                      SELECT B.BTN_ID,
                            B.APP_NAME,
                            B.PROG_REF,
                            A.OP_ID,
                            A.OP_TYPE,
                            A.PARENT_OP_ID,
                            A.COND_EXPR,
                            A.SCREEN_WIDTH,
                            A.SCREEN_HEIGHT,
                            A.SCREEN_TITLE,
                            A.DESCRIPTION OP_DESC,
                            A.REPORT_PROG_REF PROCEDURE_NAME,
                            'I' SERVICE_TYPE,
                            NULL WS_ACCEPT_TYPE,
                            NULL WS_CONTENT_TYPE,
                            R.REPORT_ID API_CODE,
                            NULL SOAP_OPERATION,
                            NULL SOAP_OPERATION_LOCAL_PART,
                            NULL SOAP_MESSAGE_PREFIX,
                            NULL SOAP_NAMESPACES,
                            NULL SOAP_ACTION,
                            A.API_TYPE,
                            NULL REQ_ARG,
                            NULL ARG_DESC,
                            NULL DEFAULT_VALUE,
                            NULL STATUS,
                            R.ARGUMENT_ID ARG_ID,
                            R.ARGUMENT_NAME ARG_NAME,
                            (CASE
                 				WHEN R.ARGUMENT_TYPE = 'NUMBER' THEN
				                'N'
				                WHEN R.ARGUMENT_TYPE = 'VARCHAR2' THEN
				                'V'
				                WHEN R.ARGUMENT_TYPE = 'DATE' THEN
				                'T'
				                WHEN R.ARGUMENT_TYPE = 'DATETIME' THEN
				                'T'
				             END) ARG_TYPE
                       FROM SYS_PARAM_BTN_CUST B
                       LEFT OUTER JOIN SYS_PARAM_BTN_CUST_ACTIONS A ON B.BTN_ID =
                                                                       A.BTN_ID
                                                                   AND A.REPORT_PROG_REF IS NOT NULL
                                                                   AND A.API_TYPE = '2' 
                       LEFT JOIN IRP_AD_HOC_REPORT C ON C.PROG_REF =
                                                   A.REPORT_PROG_REF
                                                   AND (C.APP_NAME =
                                                        A.REPORT_APP_NAME or A.REPORT_APP_NAME = 'IMAL' )
                       LEFT JOIN IRP_REP_ARGUMENTS R ON R.REPORT_ID =
                                                              C.REPORT_ID
                      WHERE B.BTN_ID = #{buttonId,jdbcType=NUMERIC}
                      
                      
                      ) M
                ) S ON B.BTN_ID =
                        S.BTN_ID
                    and B.OP_ID =
                        S.OP_ID
                    and ( (B.ARG_ID = S.ARG_ID AND S.API_TYPE = '1') OR (B.DYN_ELEM_IDENTIFIER = S.ARG_ID AND S.API_TYPE = '3') OR
                          (B.ARG_ID = S.ARG_ID AND S.API_TYPE = '2'))                                                       
                                                                        
	WHERE B.BTN_ID = #{buttonId,jdbcType=NUMERIC}
	<choose>
			<when test='dynScreenId != null and dynElementId != null'> 
				AND B.DYN_SCREEN_ID  = #{dynScreenId,jdbcType=NUMERIC}
				AND B.DYN_SCREEN_ELEMENT_ID  = #{dynElementId,jdbcType=NUMERIC}
			</when>
			<otherwise> 
			  	AND B.APP_NAME = #{currAppName,jdbcType=VARCHAR}
			  	AND B.PROG_REF = #{btnProgRef,jdbcType=VARCHAR}
			  	<if test = 'fldIdentifier !=null'>
			  	AND B.ELEM_FLD_IDENTIFIER = #{fldIdentifier,jdbcType=NUMERIC}
			  	</if>
			  	AND B.ELEM_SEQUENCE_ID  = #{elemSequenceId,jdbcType=NUMERIC}
			</otherwise>
	</choose>

</select>
<select id="returnButtonCustReportData" resultMap="returnButtonCustActionDataMap" parameterType="buttonCustomizationSC">

  SELECT 'I' INITIAL_LOAD_PARAM, 
  		S.BTN_ID,
       S.OP_ID,
       S.OP_TYPE,
       S.PARENT_OP_ID,
       S.OP_DESC,
       S.API_CODE,
       S.ARG_ID,
       S.ARG_ORDER ARG_ORDER,
       S.ARG_DESC,
       S.DEFAULT_VALUE,
       S.REQ_ARG,
       S.ARG_NAME,
       (CASE
         WHEN P.MAP_TYPE = '1' THEN
          (SELECT DISTINCT E.FIELD_ID
             FROM SYS_PARAM_SCREEN_ELEMENTS E
            WHERE E.APP_NAME = S.APP_NAME
              AND (E.PROG_REF = #{progRef,jdbcType=VARCHAR} 
                OR E.PROG_REF = (SELECT PARENT_REF FROM OPT WHERE PROG_REF = #{progRef,jdbcType=VARCHAR} AND APP_NAME =  E.APP_NAME AND PARENT_REF IS NOT NULL)
                )
              <choose >
 				<when test="isSybase == 1" >
    				AND E.FLD_IDENTIFIER = CONVERT(NUMERIC,P.MAP_VALUE))
 				</when>
 				<otherwise >
    				AND E.FLD_IDENTIFIER = TO_NUMBER(P.MAP_VALUE))
				</otherwise>
		      </choose>
         ELSE
          P.MAP_VALUE
       END) MAP_VALUE,
       P.MAP_EXPRESSION
       <if test=' showArgDetails != null and "1".equals(showArgDetails) '>
       ,
       S.APP_NAME,
       S.PROG_REF,
       S.PROCEDURE_NAME,
       S.COMPONENT_ID,
       S.SERVICE_TYPE,
       S.ARG_TYPE,
       S.STATUS,
       P.MAP_TYPE,
       P.NESTED,
       P.LINK_OP_ID,
       P.LINK_ARG_ID
	   </if>

  FROM (SELECT M.BTN_ID,
               M.APP_NAME,
               M.PROG_REF,
               M.API_CODE,
               M.OP_ID,
               M.OP_TYPE,
               M.PARENT_OP_ID,
               M.OP_DESC,
               M.PROCEDURE_NAME,
               M.COMPONENT_ID,
               M.SERVICE_TYPE,
               R.ARGUMENT_ID ARG_ID,
               R.ARGUMENT_ORDER ARG_ORDER,
               R.ARGUMENT_NAME ARG_NAME,
               (CASE
                 WHEN R.ARGUMENT_TYPE = 'NUMBER' THEN
                  'N'
                 WHEN R.ARGUMENT_TYPE = 'VARCHAR2' THEN
                  'V'
                 WHEN R.ARGUMENT_TYPE = 'DATE' THEN
                  'T'
                 WHEN R.ARGUMENT_TYPE = 'DATETIME' THEN
                  'T'
               END) ARG_TYPE,
               'I' STATUS,
               R.ARGUMENT_LABEL ARG_DESC,
               R.ARGUMENT_VALUE DEFAULT_VALUE,
               NULL REQ_ARG
          FROM (SELECT B.BTN_ID,
                       A.REPORT_APP_NAME APP_NAME,
                       B.PROG_REF,
                       A.OP_ID,
                       A.OP_TYPE,
                       A.PARENT_OP_ID,
                       A.DESCRIPTION OP_DESC,
                       A.REPORT_PROG_REF PROCEDURE_NAME,
                       A.COMPONENT_ID COMPONENT_ID,
                       'I' SERVICE_TYPE,
                       C.REPORT_ID API_CODE
                  FROM SYS_PARAM_BTN_CUST B, SYS_PARAM_BTN_CUST_ACTIONS A
                  LEFT JOIN IRP_AD_HOC_REPORT C ON C.PROG_REF =
                                                   A.REPORT_PROG_REF
                                               AND (C.APP_NAME =
                                                   A.REPORT_APP_NAME or A.REPORT_APP_NAME = 'IMAL')
                 WHERE B.BTN_ID = #{buttonId,jdbcType=NUMERIC}
                   AND B.BTN_ID = A.BTN_ID
                   AND A.REPORT_PROG_REF IS NOT NULL
                   AND A.API_TYPE = '2'<!-- 2 means report action -->) M
          LEFT JOIN IRP_REP_ARGUMENTS R ON R.REPORT_ID = M.API_CODE) S
  LEFT JOIN SYS_PARAM_ACTION_ARG_MAP P ON P.ARG_ID = S.ARG_ID
                                      AND P.OP_ID = S.OP_ID
                                      AND P.BTN_ID = S.BTN_ID

	<if test=' onBtnLoad != null and !"".equals(onBtnLoad) '>
		WHERE ( P.MAP_TYPE = '1' OR S.OP_TYPE = 'C' ) 
	</if>    
 	ORDER BY S.PARENT_OP_ID DESC, S.OP_ID ASC, S.ARG_ORDER ASC

</select>


<resultMap type="com.path.dbmaps.vo.SYS_PARAM_SCREEN_ELEMENTSVO" id="returnButtonCustScreenElementMap">
	<result property="FLD_IDENTIFIER" column="FLD_IDENTIFIER"/>
	<result property="FIELD_ID" 	  column="FIELD_ID"/>
	<result property="FIELD_KEY_LABEL_CODE" 	  column="FIELD_KEY_LABEL_CODE"/>
</resultMap>

<select id="returnButtonCustScreenElement" resultMap="returnButtonCustScreenElementMap" parameterType="buttonCustomizationSC">
	SELECT FLD_IDENTIFIER, 
		   FIELD_ID, 
		   FIELD_KEY_LABEL_CODE
 		FROM SYS_PARAM_SCREEN_ELEMENTS
 	WHERE APP_NAME = #{currAppName,jdbcType=VARCHAR}
   		AND ( PROG_REF = #{progRef,jdbcType=VARCHAR}
   		      OR PROG_REF IN (
	   		      				SELECT M.PARENT_REF FROM 
		                          (
		                            SELECT O.PARENT_REF  
		                                      FROM OPT O
		                                      WHERE PROG_REF = #{progRef,jdbcType=VARCHAR}
		                                      AND APP_NAME = #{currAppName,jdbcType=VARCHAR}
		                                    
		                                      UNION
		                                      
		                                      SELECT CASE
		                                     WHEN OPTE.ADDITIONAL_PARENT_REF IS NOT NULL THEN
		                                      OPTE.ADDITIONAL_PARENT_REF
		                                     ELSE
		                                      OP.PARENT_REF
		                                   END PARENT_REF
		                              FROM OPT OP
		                              LEFT OUTER JOIN OPT_EXTENDED OPTE ON OPTE.APP_NAME = OP.APP_NAME
		                                                               AND OPTE.PROG_REF = OP.PROG_REF
		                             WHERE OP.PROG_REF = #{progRef,jdbcType=VARCHAR}
		            				 AND OP.APP_NAME = #{currAppName,jdbcType=VARCHAR}
								  ) M
   		      				 )
   		    )
   		AND FLD_IDENTIFIER IN <foreach item="item" index="index" open="(" close=")" separator="," collection="idList" > 
	         					#{item} 
	         			 	  </foreach>
</select>

<update id="updateClusterOperation" parameterType="com.path.dbmaps.vo.SYS_CLUSTER_OPERATION_CTRLVO">
	UPDATE SYS_CLUSTER_OPERATION_CTRL
	<set>
	    <if test="OPERATION_TIME==null ">
			OPERATION_TIME =<include refid="commonLibMapper.systemDate" />,
		</if>
		<if test="MACHINE_NAME!=null ">
			MACHINE_NAME = #{MACHINE_NAME,jdbcType=VARCHAR},
		</if>
		<if test="OPERATION_TYPE!=null ">
			OPERATION_TYPE = #{OPERATION_TYPE,jdbcType=VARCHAR},
		</if>
	</set>
	<where>
		<if test="OPERATION_NAME!=null">
			OPERATION_NAME = #{OPERATION_NAME,jdbcType=NUMERIC}
		</if>
			AND OPERATION_TYPE = (CASE WHEN #{OPERATION_TYPE,jdbcType=VARCHAR} = 'L' THEN 'R' ELSE OPERATION_TYPE END)
	</where>
</update>

<update id="updateClusterOperationTime" parameterType="com.path.vo.common.ClusterOperCtrlCO">
UPDATE SYS_CLUSTER_OPERATION_CTRL
    <set>
      <if test="MACHINE_NAME != null" >
        MACHINE_NAME = #{MACHINE_NAME},
      </if>
      <if test="OPERATION_TIME != null" >
        OPERATION_TIME = #{OPERATION_TIME},
      </if>
    </set>
    where OPERATION_NAME = #{OPERATION_NAME}
    AND (OPERATION_TIME <![CDATA[<]]> #{operationTime}) OR 
    (OPERATION_TIME <![CDATA[>=]]> #{operationTime} AND MACHINE_NAME = #{MACHINE_NAME}) 
</update>

<resultMap type="com.path.dbmaps.vo.DMS_SEARCH_INDEXVO" id="returnDMSIndexFieldNamesMap">
	<result property="PROG_REF" column="PROG_REF"/>
	<result property="APP_NAME" column="APP_NAME"/>
	<result property="ELEMENT_TYPE" column="ELEMENT_TYPE"/>
	<result property="COLUMN_NAME" 	  column="COLUMN_NAME"/>
	<result property="DMS_INDEX_NAME" 	  column="DMS_INDEX_NAME"/>
	<result property="IMAL_INDEX_NAME" 	  column="IMAL_INDEX_NAME"/>
	<result property="DMS_INDEX_NUM" 	  column="DMS_INDEX_NUM"/>
	<result property="SECTION" 	  column="SECTION"/>
</resultMap>

<select id="returnDMSIndexFieldNames" resultType="com.path.dbmaps.vo.DMS_SEARCH_INDEXVO" parameterType="com.path.vo.common.integration.DmsRequestSC">
	SELECT DMSSI.PROG_REF, DMSSI.APP_NAME, DMSSI.ELEMENT_TYPE, DMSSI.COLUMN_NAME, DMSSI.DMS_INDEX_NAME
	<if test="dmsDetailsParams == 1">, DMSSI.IMAL_INDEX_NAME, DMSSI.DMS_INDEX_NUM, DMSSI.SECTION, DMSSI.EXPRESSION_COLUMNS, DMSSI.ORDER_VALUE, DMSSI.SCREEN_ID</if>
	FROM DMS_SEARCH_INDEX DMSSI
	WHERE DMSSI.PROG_REF = #{progRef,jdbcType=VARCHAR}
	AND DMSSI.APP_NAME = #{appName,jdbcType=VARCHAR}
	ORDER BY DMSSI.ORDER_VALUE
</select>

<select id="returnDMSAccessRight" parameterType="commonLibSC" resultType="int">
SELECT count(1)
  FROM DMS_AXS_MAP
 WHERE USER_ID = #{userId}
   AND APP_NAME = #{appName}
   AND COMP_CODE = #{compCode}
   AND BRANCH_CODE = #{branchCode}
   AND PROG_REF = #{progRef,jdbcType=VARCHAR}
</select>
<select id="returnMaxChqNumLength"  resultType="BigDecimal">
	<choose>
       <when test="isSybase == 1"> 
         SELECT sc.prec
		 FROM syscolumns sc
		 INNER JOIN sysobjects so ON sc.id = so.id
		 WHERE so.name = 'CTSTRS'  and sc.name='CHQ_NUM'
       </when>
    <otherwise>
		select case  
	         when data_precision is not null and nvl(data_scale, 0) = 0 then
	          data_precision
	       end
	    from user_tab_columns
	    where table_name = 'CTSTRS'
	    and column_name = 'CHQ_NUM'
    </otherwise>
   </choose>
</select>
<resultMap id="entityTypeInfosMap" type="com.path.dbmaps.vo.SYS_PARAM_SCREEN_ENTITY_TYPEVO">
 <result property="ENTITY_TYPE"   column="ENTITY_TYPE"/>
 <result property="PROG_REF"      column="PROG_REF"/>
 <result property="APP_NAME"      column="APP_NAME"/>
 <result property="PROPERTY_NAME" column="PROPERTY_NAME"/>
 <result property="PROPERTY_DATA_TYPE" column="PROPERTY_DATA_TYPE"/>
</resultMap>
<select id="returnEntityTypeInfos" parameterType="com.path.dbmaps.vo.SYS_PARAM_SCREEN_ENTITY_TYPEVO" resultMap="entityTypeInfosMap">
SELECT  ENTITY_TYPE
	   ,PROG_REF
	   ,APP_NAME
	   ,PROPERTY_NAME
	   ,PROPERTY_DATA_TYPE
  FROM SYS_PARAM_SCREEN_ENTITY_TYPE 
 WHERE APP_NAME = #{APP_NAME,jdbcType=VARCHAR} 
   AND PROG_REF = #{PROG_REF,jdbcType=VARCHAR} 
</select>
<resultMap id="screenElementsMapResultMap" type="com.path.vo.common.ScreenElementsMapCO">
  <result property="PROG_REF"           column="PROG_REF"/>
  <result property="DISPLAY_FIELD_NAME" column="DISPLAY_FIELD_NAME"/>
  <result property="ELEMENT_NAME"       column="ELEMENT_NAME"/>
  <result property="ELEMENT_ID"         column="ELEMENT_ID"/>
  <result property="FIELD_DATA_TYPE"    column="FIELD_DATA_TYPE"/>
  <result property="FLD_IDENTIFIER"    column="FLD_IDENTIFIER"/>
</resultMap>
<select id="returnScreenElementsMap" parameterType="requiredFieldsSC" resultMap="screenElementsMapResultMap">
SELECT DISTINCT SE.PROG_REF
      ,SE.DISPLAY_FIELD_NAME
      ,FT.ELEMENT_NAME
      ,FT.ELEMENT_ID
      ,SE.FLD_IDENTIFIER
      ,SE.FIELD_DATA_TYPE
  FROM SYS_PARAM_SCREEN_ELEMENTS SE,FIELD_TECH_DETAILS FT 
 WHERE SE.FLD_IDENTIFIER = FT.FLD_IDENTIFIER
   AND SE.APP_NAME = #{appName} 
   AND ( SE.PROG_REF = #{progRef} <if test="originalProgRef != null">OR SE.PROG_REF = #{originalProgRef}</if> )
   AND SE.DISPLAY_FIELD_NAME IS NOT NULL
</select>
<resultMap id="currElementExpressionMap" type="com.path.vo.common.CurrElementExpressionsCO">
   <result property="FLD_IDENTIFIER"        column="FLD_IDENTIFIER"/>
   <result property="currElementName"       column="currElementName"/>
   <result property="currElementId"         column="currElementId"/>
   <result property="currElemDisplayName"   column="currElemDisplayName"/>
   <result property="ELEMENT_NAME"          column="ELEMENT_NAME"/>
   <result property="ELEMENT_ID"            column="ELEMENT_ID"/>
   <result property="DISPLAY_FIELD_NAME"    column="DISPLAY_FIELD_NAME"/>
   <result property="MANDATORY_EXPR"        column="MANDATORY_EXPR"/>
   <result property="VISIBILITY_EXPR"       column="VISIBILITY_EXPR"/>
   <result property="READONLY_EXPR"         column="READONLY_EXPR"/>
   <result property="ZERO_NOT_ALLOWED_EXPR" column="ZERO_NOT_ALLOWED_EXPR"/>
   <result property="DEFAULT_VALUE_EXPR"    column="DEFAULT_VALUE_EXPR"/>
   <result property="DFLT_VAL_EXPR_PRIORITY_YN" column="DFLT_VAL_EXPR_PRIORITY_YN"/>
</resultMap>
<select id="returnCurrElementExpression" parameterType="commonLibSC" resultMap="currElementExpressionMap">
SELECT TD.FLD_IDENTIFIER
      ,TD.ELEMENT_NAME AS currElementName
      ,SE.DISPLAY_FIELD_NAME AS currElemDisplayName
      ,SE.FIELD_ID AS currElementId
      ,(SELECT FD1.ELEMENT_NAME
          FROM FIELD_TECH_DETAILS FD1 
         WHERE FD1.FLD_IDENTIFIER = SD.FLD_IDENTIFIER) AS ELEMENT_NAME
      ,(SELECT SE1.FIELD_ID
          FROM SYS_PARAM_SCREEN_ELEMENTS SE1 
         WHERE SE1.FLD_IDENTIFIER = SD.FLD_IDENTIFIER
           AND SE1.APP_NAME  = #{appName}
           AND SE1.PROG_REF  = #{progRef}) AS ELEMENT_ID
      ,(SELECT SE1.DISPLAY_FIELD_NAME
          FROM SYS_PARAM_SCREEN_ELEMENTS SE1 
         WHERE SE1.FLD_IDENTIFIER = SD.FLD_IDENTIFIER
           AND SE1.APP_NAME  = #{appName}
           AND SE1.PROG_REF  = #{progRef}) AS DISPLAY_FIELD_NAME
      ,SD.MANDATORY_EXPR
      ,SD.VISIBILITY_EXPR
      ,SD.READONLY_EXPR
      ,SD.ZERO_NOT_ALLOWED_EXPR
      ,SD.DEFAULT_VALUE_EXPR
      ,SD.DFLT_VAL_EXPR_PRIORITY_YN
  FROM FIELD_TECH_DETAILS TD, SYS_PARAM_SCREEN_ELEMENTS SE,SYS_PARAM_SCREEN_DISPLAY SD 
 WHERE TD.ELEMENT_NAME LIKE #{currElementName}
   AND TD.FLD_IDENTIFIER = SE.FLD_IDENTIFIER
   AND (SD.MANDATORY_EXPR LIKE '%'||SE.DISPLAY_FIELD_NAME||'%')
   AND (
        (SD.PROG_REF = SE.PROG_REF
        AND EXISTS(SELECT 1 
                     FROM SYS_PARAM_SCREEN_DISPLAY SD1 
                    WHERE SD1.PROG_REF = SE.PROG_REF
                      AND SD1.APP_NAME = SE.APP_NAME
                      AND SD1.FLD_IDENTIFIER = SD.FLD_IDENTIFIER
                      AND (SD1.COMP_CODE = #{compCode} OR SD1.COMP_CODE = 0)) 
        )             
        OR
        (
        SD.PROG_REF = (SELECT O.PARENT_REF 
                         FROM OPT O 
                        WHERE O.PROG_REF = SE.PROG_REF 
                          AND O.APP_NAME = SE.APP_NAME)
        AND NOT EXISTS(SELECT 1
                         FROM SYS_PARAM_SCREEN_DISPLAY SD1 
                        WHERE SD1.PROG_REF = SE.PROG_REF
                          AND SD1.APP_NAME = SE.APP_NAME
                          AND SD1.FLD_IDENTIFIER = SD.FLD_IDENTIFIER
                          AND (SD1.COMP_CODE = #{compCode} OR SD1.COMP_CODE = 0))
        )
        )
   AND SD.APP_NAME = SE.APP_NAME
   AND SE.APP_NAME = #{appName}
   AND SE.PROG_REF = #{progRef}
   AND (SD.COMP_CODE = #{compCode} OR SD.COMP_CODE = 0)
</select>
<select id="returnMissingMessageCodes" parameterType="commonLibSC" resultType="BigDecimal" >
select tbl.CODE
  from (
  <foreach collection="msgCodesLst"  index="index" item="item" separator="UNION" >
      select #{item} CODE <if test="isOracle == 1"> from DUAL </if>
  </foreach>) tbl
 
 where not exists (SELECT CODE FROM CTSMESSAGES B where B.CODE = tbl.CODE)
</select>
<resultMap id="ctsMessagesResultMap" type="com.path.dbmaps.vo.CTSMESSAGESVO" >
       <result column="CODE" property="CODE" />
       <result column="ENG_TITLE" property="ENG_TITLE" />
       <result column="ENG_MESSAGE" property="ENG_MESSAGE" />
       <result column="ARAB_TITLE" property="ARAB_TITLE" />
       <result column="ARAB_MESSAGE" property="ARAB_MESSAGE" />
       <result column="FR_TITLE" property="FR_TITLE" />
       <result column="FR_MESSAGE" property="FR_MESSAGE" />
       <result column="FA_TITLE" property="FA_TITLE" />
       <result column="FA_MESSAGE" property="FA_MESSAGE" />
       <result column="RU_TITLE" property="RU_TITLE" />
       <result column="RU_MESSAGE" property="RU_MESSAGE" />
       <result column="TK_TITLE" property="TK_TITLE" />
       <result column="TK_MESSAGE" property="TK_MESSAGE" />
</resultMap> 
<select id="returnEmptyCtsMessages" parameterType="commonLibSC" resultMap="ctsMessagesResultMap">
  <foreach collection="elemIds"  index="index" item="item" separator="UNION" >
       select CODE, ENG_TITLE, ENG_MESSAGE, ARAB_TITLE, ARAB_MESSAGE, FR_TITLE, FR_MESSAGE, FA_TITLE, FA_MESSAGE, RU_TITLE, RU_MESSAGE, TK_TITLE, TK_MESSAGE 
       from CTSMESSAGES
       <if test=" item == 'EN' " >
        <if test="isOracle == 1">
              where (ENG_MESSAGE is null or nvl(length(ENG_MESSAGE),0) = 0) or (ENG_TITLE is null or nvl(length(ENG_TITLE),0) = 0)
        </if>
        <if test="isSybase == 1">
              where (ENG_MESSAGE is null or isnull(len(ENG_MESSAGE),0) = 0) or (ENG_TITLE is null or isnull(len(ENG_TITLE),0) = 0)
        </if>
       </if>
       <if test=" item == 'FR' " >
        <if test="isOracle == 1">
              where (FR_MESSAGE is null or nvl(length(FR_MESSAGE),0) = 0) or (FR_TITLE is null or nvl(length(FR_TITLE),0) = 0)
         </if>
        <if test="isSybase == 1">
              where (FR_MESSAGE is null or isnull(len(FR_MESSAGE),0) = 0) or (FR_TITLE is null or isnull(len(FR_TITLE),0) = 0)
        </if> 
       </if>
       <if test=" item == 'AR' " >
        <if test="isOracle == 1">
                     where (ARAB_MESSAGE is null or nvl(length(ARAB_MESSAGE),0) = 0) or (ARAB_TITLE is null or nvl(length(ARAB_TITLE),0) = 0)
        </if>
        <if test="isSybase == 1">
              where (ARAB_MESSAGE is null or isnull(len(ARAB_MESSAGE),0) = 0) or (ARAB_TITLE is null or isnull(len(ARAB_TITLE),0) = 0)
        </if>
       </if>  
       <if test=" item == 'FA' " > 
        <if test="isOracle == 1">
              where (FA_MESSAGE is null or nvl(length(FA_MESSAGE),0) = 0) or (FA_TITLE is null or nvl(length(FA_TITLE),0) = 0)
        </if>
        <if test="isSybase == 1">
              where (FA_MESSAGE is null or isnull(len(FA_MESSAGE),0) = 0) or (FA_TITLE is null or isnull(len(FA_TITLE),0) = 0)
        </if>
       </if>
       <if test=" item == 'RU' " >
        <if test="isOracle == 1">
              where (RU_MESSAGE is null or nvl(length(RU_MESSAGE),0) = 0) or (RU_TITLE is null or nvl(length(RU_TITLE),0) = 0)
         </if>
        <if test="isSybase == 1">
              where (RU_MESSAGE is null or isnull(len(RU_MESSAGE),0) = 0) or (RU_TITLE is null or isnull(len(RU_TITLE),0) = 0)
        </if> 
       </if>
       <if test=" item == 'TK' " >
        <if test="isOracle == 1">
                     where (TK_MESSAGE is null or nvl(length(TK_MESSAGE),0) = 0) or (TK_TITLE is null or nvl(length(TK_TITLE),0) = 0)
        </if>
        <if test="isSybase == 1">
              where (TK_MESSAGE is null or isnull(len(TK_MESSAGE),0) = 0) or (TK_TITLE is null or isnull(len(TK_TITLE),0) = 0)
        </if>
       </if>
  </foreach>
</select>

<select id="returnCorruptedCtsMessages" parameterType="commonLibSC" resultMap="ctsMessagesResultMap">
  <foreach collection="elemIds"  index="index" item="item" separator="UNION" >
       select t.CODE, t.ENG_MESSAGE, t.ENG_TITLE, t.ARAB_MESSAGE, t.ARAB_TITLE, t.FR_MESSAGE, t.FR_TITLE, FA_TITLE, FA_MESSAGE, RU_TITLE, RU_MESSAGE, TK_TITLE, TK_MESSAGE  
       from CTSMESSAGES t
       <if test=" item == 'EN' " >
        where ( (t.ENG_MESSAGE like '%??%'
          or t.ENG_MESSAGE like '%®%'
          or t.ENG_MESSAGE like '%?¹%'
          or t.ENG_MESSAGE like '%?†%'
          or t.ENG_MESSAGE like '%?§?%'
          or t.ENG_MESSAGE like '%¦%'
          or t.ENG_MESSAGE like '%©%'
          or t.ENG_MESSAGE like '%±%'
          or t.ENG_MESSAGE like '%€%'
          or t.ENG_MESSAGE like '%(_?_)%'
          or t.ENG_MESSAGE like '%(__?__)%'
          or t.ENG_MESSAGE like '%?g%' 
          or t.ENG_MESSAGE like '%?r%'
          or t.ENG_MESSAGE like '%?o%'
          or t.ENG_MESSAGE like '%?…?%'
          or t.ENG_MESSAGE like '_?%'
          or t.ENG_MESSAGE like '%.?%'
          or t.ENG_MESSAGE like '%"(_?__)%'
          or t.ENG_MESSAGE like '%(_?__)%'
          or t.ENG_MESSAGE like '%(_?__)%'
        )
      OR
             (t.ENG_TITLE like '%??%'
             or t.ENG_TITLE like '%®%'
             or t.ENG_TITLE like '%?¹%'
             or t.ENG_TITLE like '%?†%'
             or t.ENG_TITLE like '%?§?%'
             or t.ENG_TITLE like '%¦%'
             or t.ENG_TITLE like '%©%'
             or t.ENG_TITLE like '%±%'
             or t.ENG_TITLE like '%€%'
             or t.ENG_TITLE like '%(_?_)%'
             or t.ENG_TITLE like '%(__?__)%'
             or t.ENG_TITLE like '%?g%' 
             or t.ENG_TITLE like '%?r%'
             or t.ENG_TITLE like '%?o%'
             or t.ENG_TITLE like '%?…?%'
             or t.ENG_TITLE like '_?%'
             or t.ENG_TITLE like '%.?%'
             or t.ENG_TITLE like '%"(_?__)%'
             or t.ENG_TITLE like '%(_?__)%'
             or t.ENG_TITLE like '%(_?__)%'
             )
              )
       </if>
       <if test=" item == 'FR' " >
        where ( (t.FR_MESSAGE like '%??%'
               or t.FR_MESSAGE like '%®%'
               or t.FR_MESSAGE like '%?¹%'
               or t.FR_MESSAGE like '%?†%'
               or t.FR_MESSAGE like '%?§?%'
               or t.FR_MESSAGE like '%¦%'
               or t.FR_MESSAGE like '%©%'
               or t.FR_MESSAGE like '%±%'
               or t.FR_MESSAGE like '%€%'
               or t.FR_MESSAGE like '%(_?_)%'
               or t.FR_MESSAGE like '%(__?__)%'
               or t.FR_MESSAGE like '%?g%' 
               or t.FR_MESSAGE like '%?r%'
               or t.FR_MESSAGE like '%?o%'
               or t.FR_MESSAGE like '%?…?%'
               or t.FR_MESSAGE like '_?%'
               or t.FR_MESSAGE like '?%'
               or t.FR_MESSAGE like '%.?%'
               or t.FR_MESSAGE like '%"(_?__)%'
               or t.FR_MESSAGE like '%(_?__)%'
               or t.FR_MESSAGE like '%(_?__)%'
               )
              OR
              (t.FR_TITLE like '%??%'
               or t.FR_TITLE like '%®%'
               or t.FR_TITLE like '%?¹%'
               or t.FR_TITLE like '%?†%'
               or t.FR_TITLE like '%?§?%'
               or t.FR_TITLE like '%¦%'
               or t.FR_TITLE like '%©%'
               or t.FR_TITLE like '%±%'
               or t.FR_TITLE like '%€%'
               or t.FR_TITLE like '%(_?_)%'
               or t.FR_TITLE like '%(__?__)%'
               or t.FR_TITLE like '%?g%' 
               or t.FR_TITLE like '%?r%'
               or t.FR_TITLE like '%?o%'
               or t.FR_TITLE like '%?…?%'
               or t.FR_TITLE like '_?%'
               or t.FR_TITLE like '?%'
               or t.FR_TITLE like '%.?%'
               or t.FR_TITLE like '%"(_?__)%'
               or t.FR_TITLE like '%(_?__)%'
               or t.FR_TITLE like '%(_?__)%'
               )
              ) 
       </if>
       <if test=" item == 'AR' " >
        where ( (t.ARAB_MESSAGE like '%??%'
               or t.ARAB_MESSAGE like '%®%'
               or t.ARAB_MESSAGE like '%?¹%'
               or t.ARAB_MESSAGE like '%?†%'
               or t.ARAB_MESSAGE like '%?§?%'
               or t.ARAB_MESSAGE like '%?%'
               or t.ARAB_MESSAGE like '%¦%'
               or t.ARAB_MESSAGE like '%©%'
               or t.ARAB_MESSAGE like '%±%'
               or t.ARAB_MESSAGE like '%€%'
               or t.ARAB_MESSAGE like '%(_?_)%'
               or t.ARAB_MESSAGE like '%(__?__)%'
               or t.ARAB_MESSAGE like '%?g%' 
               or t.ARAB_MESSAGE like '%?r%'
               or t.ARAB_MESSAGE like '%?o%'
               or t.ARAB_MESSAGE like '%d?%'
               or t.ARAB_MESSAGE like '%?…?%'
               or t.ARAB_MESSAGE like '_?%'
               or t.ARAB_MESSAGE like '?%'
               or t.ARAB_MESSAGE like '%N?%'
               or t.ARAB_MESSAGE like '%.?%'
               or t.ARAB_MESSAGE like '%"(_?__)%'
               or t.ARAB_MESSAGE like '%(_?__)%'
               or t.ARAB_MESSAGE like '%(_?__)%'
               or t.ARAB_MESSAGE like '%?%'
               )
              OR
              (t.ARAB_TITLE like '%??%'
               or t.ARAB_TITLE like '%®%'
               or t.ARAB_TITLE like '%?¹%'
               or t.ARAB_TITLE like '%?†%'
               or t.ARAB_TITLE like '%?§?%'
               or t.ARAB_TITLE like '%?%'
               or t.ARAB_TITLE like '%¦%'
               or t.ARAB_TITLE like '%©%'
               or t.ARAB_TITLE like '%±%'
               or t.ARAB_TITLE like '%€%'
               or t.ARAB_TITLE like '%(_?_)%'
               or t.ARAB_TITLE like '%(__?__)%'
               or t.ARAB_TITLE like '%?g%' 
               or t.ARAB_TITLE like '%?r%'
               or t.ARAB_TITLE like '%?o%'
               or t.ARAB_TITLE like '%d?%'
               or t.ARAB_TITLE like '%?…?%'
               or t.ARAB_TITLE like '_?%'
               or t.ARAB_TITLE like '?%'
               or t.ARAB_TITLE like '%N?%'
               or t.ARAB_TITLE like '%.?%'
               or t.ARAB_TITLE like '%"(_?__)%'
               or t.ARAB_TITLE like '%(_?__)%'
               or t.ARAB_TITLE like '%(_?__)%'
               or t.ARAB_TITLE like '%?%'
               )
              )
       </if>
       <if test=" item == 'FA' ">
              where ( (t.FA_MESSAGE like '%??%'
               or t.FA_MESSAGE like '%®%'
               or t.FA_MESSAGE like '%?¹%'
               or t.FA_MESSAGE like '%?†%'
               or t.FA_MESSAGE like '%?§?%'
               or t.FA_MESSAGE like '%?%'
               or t.FA_MESSAGE like '%¦%'
               or t.FA_MESSAGE like '%©%'
               or t.FA_MESSAGE like '%±%'
               or t.FA_MESSAGE like '%€%'
               or t.FA_MESSAGE like '%(_?_)%'
               or t.FA_MESSAGE like '%(__?__)%'
               or t.FA_MESSAGE like '%?g%' 
               or t.FA_MESSAGE like '%?r%'
               or t.FA_MESSAGE like '%?o%'
               or t.FA_MESSAGE like '%d?%'
               or t.FA_MESSAGE like '%?…?%'
               or t.FA_MESSAGE like '_?%'
               or t.FA_MESSAGE like '?%'
               or t.FA_MESSAGE like '%N?%'
               or t.FA_MESSAGE like '%.?%'
               or t.FA_MESSAGE like '%"(_?__)%'
               or t.FA_MESSAGE like '%(_?__)%'
               or t.FA_MESSAGE like '%(_?__)%'
               or t.FA_MESSAGE like '%?%'
               )
              OR
              (t.FA_TITLE like '%??%'
               or t.FA_TITLE like '%®%'
               or t.FA_TITLE like '%?¹%'
               or t.FA_TITLE like '%?†%'
               or t.FA_TITLE like '%?§?%'
               or t.FA_TITLE like '%?%'
               or t.FA_TITLE like '%¦%'
               or t.FA_TITLE like '%©%'
               or t.FA_TITLE like '%±%'
               or t.FA_TITLE like '%€%'
               or t.FA_TITLE like '%(_?_)%'
               or t.FA_TITLE like '%(__?__)%'
               or t.FA_TITLE like '%?g%' 
               or t.FA_TITLE like '%?r%'
               or t.FA_TITLE like '%?o%'
               or t.FA_TITLE like '%d?%'
               or t.FA_TITLE like '%?…?%'
               or t.FA_TITLE like '_?%'
               or t.FA_TITLE like '?%'
               or t.FA_TITLE like '%N?%'
               or t.FA_TITLE like '%.?%'
               or t.FA_TITLE like '%"(_?__)%'
               or t.FA_TITLE like '%(_?__)%'
               or t.FA_TITLE like '%(_?__)%'
               or t.FA_TITLE like '%?%'
               )
              )
       </if>
       <if test=" item == 'RU' ">
              where ( (t.RU_MESSAGE like '%??%'
                 or t.RU_MESSAGE like '%®%'
                 or t.RU_MESSAGE like '%?¹%'
                 or t.RU_MESSAGE like '%?†%'
                 or t.RU_MESSAGE like '%?§?%'
                 or t.RU_MESSAGE like '%¦%'
                 or t.RU_MESSAGE like '%©%'
                 or t.RU_MESSAGE like '%±%'
                 or t.RU_MESSAGE like '%€%'
                 or t.RU_MESSAGE like '%(_?_)%'
                 or t.RU_MESSAGE like '%(__?__)%'
                 or t.RU_MESSAGE like '%?g%' 
                 or t.RU_MESSAGE like '%?r%'
                 or t.RU_MESSAGE like '%?o%'
                 or t.RU_MESSAGE like '%?…?%'
                 or t.RU_MESSAGE like '_?%'
                 or t.RU_MESSAGE like '%"(_?__)%'
                 or t.RU_MESSAGE like '%(_?__)%'
                 or t.RU_MESSAGE like '%(_?__)%'
        )
      OR
              (t.RU_TITLE like '%??%'
              or t.RU_TITLE like '%®%'
              or t.RU_TITLE like '%?¹%'
               or t.RU_TITLE like '%?†%'
               or t.RU_TITLE like '%?§?%'
               or t.RU_TITLE like '%¦%'
               or t.RU_TITLE like '%©%'
               or t.RU_TITLE like '%±%'
               or t.RU_TITLE like '%€%'
               or t.RU_TITLE like '%(_?_)%'
               or t.RU_TITLE like '%(__?__)%'
               or t.RU_TITLE like '%?g%' 
               or t.RU_TITLE like '%?r%'
               or t.RU_TITLE like '%?o%'
               or t.RU_TITLE like '%?…?%'
               or t.RU_TITLE like '_?%'
               or t.RU_TITLE like '%"(_?__)%'
               or t.RU_TITLE like '%(_?__)%'
               or t.RU_TITLE like '%(_?__)%'
               )
               )
       </if>
       <if test=" item == 'TK' ">
              where ( (t.TK_MESSAGE like '%??%'
                 or t.TK_MESSAGE like '%®%'
                 or t.TK_MESSAGE like '%?¹%'
                 or t.TK_MESSAGE like '%?†%'
                 or t.TK_MESSAGE like '%?§?%'
                 or t.TK_MESSAGE like '%¦%'
                 or t.TK_MESSAGE like '%©%'
                 or t.TK_MESSAGE like '%±%'
                 or t.TK_MESSAGE like '%€%'
                 or t.TK_MESSAGE like '%(_?_)%'
                 or t.TK_MESSAGE like '%(__?__)%'
                 or t.TK_MESSAGE like '%?g%' 
                 or t.TK_MESSAGE like '%?r%'
                 or t.TK_MESSAGE like '%?o%'
                 or t.TK_MESSAGE like '%?…?%'
                 or t.TK_MESSAGE like '_?%'
                 or t.TK_MESSAGE like '%.?%'
                 or t.TK_MESSAGE like '%"(_?__)%'
                 or t.TK_MESSAGE like '%(_?__)%'
                 or t.TK_MESSAGE like '%(_?__)%'
               )
             OR
                    (t.TK_TITLE like '%??%'
                    or t.TK_TITLE like '%®%'
                    or t.TK_TITLE like '%?¹%'
                    or t.TK_TITLE like '%?†%'
                    or t.TK_TITLE like '%?§?%'
                    or t.TK_TITLE like '%¦%'
                    or t.TK_TITLE like '%©%'
                    or t.TK_TITLE like '%±%'
                    or t.TK_TITLE like '%€%'
                    or t.TK_TITLE like '%(_?_)%'
                    or t.TK_TITLE like '%(__?__)%'
                    or t.TK_TITLE like '%?g%' 
                    or t.TK_TITLE like '%?r%'
                    or t.TK_TITLE like '%?o%'
                    or t.TK_TITLE like '%?…?%'
                    or t.TK_TITLE like '_?%'
                    or t.TK_TITLE like '%.?%'
                    or t.TK_TITLE like '%"(_?__)%'
                    or t.TK_TITLE like '%(_?__)%'
                    or t.TK_TITLE like '%(_?__)%'
                    )
                     )
       </if>
  </foreach>
</select>


	
	<insert id="insertProcArg" parameterType="com.path.vo.common.ProcArgSC" >
	<if test="isSybase != 1">begin</if>
	<foreach collection="argsList" item="procArgCO">
    INSERT INTO 
     <choose>
		<when test="isSybase == 1">
			#SYS_RUNTIME_PROC_ARG_TMP
		</when>
		<otherwise>
			SYS_RUNTIME_PROC_ARG_TMP
		</otherwise>
	</choose>
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="procArgCO.procName != null" >
        PROC_NAME,
      </if>
      <if test="procArgCO.argName != null" >
        ARG_NAME,
      </if>
      <if test="procArgCO.argValNumber != null and procArgCO.argValNumber != emptyBigDecimalValue" >
        ARG_VAL_NUMERIC,
      </if>
      <if test="procArgCO.argValString != null" >
        ARG_VAL_STRING,
      </if>
      <if test="procArgCO.argValDate != null" >
        ARG_VAL_DATE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="procArgCO.procName != null" >
        #{procArgCO.procName},
      </if>
      <if test="procArgCO.argName != null" >
        #{procArgCO.argName},
      </if>
      <if test="procArgCO.argValNumber != null and procArgCO.argValNumber != emptyBigDecimalValue" >
        #{procArgCO.argValNumber},
      </if>
      <if test="procArgCO.argValString != null" >
        #{procArgCO.argValString},
      </if>
      <if test="procArgCO.argValDate != null" >
        #{procArgCO.argValDate},
      </if>
    </trim>
			<if test="isSybase != 1">;</if>
		</foreach>
	<if test="isSybase != 1">end;</if>
  </insert>
    <update id="dropSYS_RUNTIME_PROC_ARG_TMP" statementType="STATEMENT">
    IF OBJECT_ID(<choose><when test="isSQLServer == 1">'tempdb..#SYS_RUNTIME_PROC_ARG_TMP'</when><otherwise>'#SYS_RUNTIME_PROC_ARG_TMP'</otherwise></choose>) IS NOT NULL
	BEGIN
	DROP TABLE #SYS_RUNTIME_PROC_ARG_TMP
	END
 </update>
  <update id="createSYS_RUNTIME_PROC_ARG_TMP" statementType="STATEMENT" parameterType="com.path.vo.common.ProcArgSC">
    CREATE TABLE #SYS_RUNTIME_PROC_ARG_TMP(
      PROC_NAME               VARCHAR(30) <if test="isSQLServer == 1">COLLATE DATABASE_DEFAULT</if>,
      ARG_NAME                VARCHAR(120) <if test="isSQLServer == 1">COLLATE DATABASE_DEFAULT</if>,
      ARG_VAL_NUMERIC         NUMERIC(24,6) NULL,
      ARG_VAL_STRING          VARCHAR(4000) <if test="isSQLServer == 1">COLLATE DATABASE_DEFAULT</if> NULL,
      ARG_VAL_DATE            DATE NULL)
  </update>
  
 	<insert id="deleteProcArg" parameterType="com.path.vo.common.ProcArgSC" >
	<if test="isSybase != 1">begin</if>
	<foreach collection="argsList" item="procArgCO">
    DELETE FROM 
     <choose>
		<when test="isSybase == 1">
			#SYS_RUNTIME_PROC_ARG_TMP
		</when>
		<otherwise>
			SYS_RUNTIME_PROC_ARG_TMP
		</otherwise>
	</choose>
	WHERE PROC_NAME = #{procArgCO.procName}
	AND ARG_NAME = #{procArgCO.argName} <if test="isSybase != 1">;</if>
	</foreach>
	<if test="isSybase != 1">end;</if>
  </insert>
  <select id="checkTempTableExistence" parameterType="String" resultType="String">
       		select object_id(#{tableName})
</select>

  <resultMap id="returnRequiredObjDataMap" type="com.path.dbmaps.vo.SYS_PARAM_OBJ_DISPLAYVO">
    <result property="OBJ_DISPLAY_ID"      column="OBJ_DISPLAY_ID"/>
    <result property="OBJECT_ID"           column="OBJECT_ID"/>
    <result property="OBJECT_TYPE"         column="OBJECT_TYPE"/>
    <result property="APP_NAME"            column="APP_NAME"/>
    <result property="IS_READONLY"         column="IS_READONLY"/>
    <result property="PROG_REF"            column="PROG_REF"/>
    <result property="READONLY_EXPR"       column="READONLY_EXPR"/>
    <result property="IS_VISIBLE"          column="IS_VISIBLE"/>
    <result property="VISIBILITY_EXPR"     column="VISIBILITY_EXPR"/>
    <result property="BUS_RELATED"         column="BUS_RELATED"/>
    <result property="IS_ADM_CUST_DIS_YN"  column="IS_ADM_CUST_DIS_YN"/>
    <result property="ADD_DELETE_ROW_YN"   column="ADD_DELETE_ROW_YN"/>
    <result property="ADD_DELETE_ROW_EXPR" column="ADD_DELETE_ROW_EXPR"/>
  </resultMap>
  
<select id="returnRequiredObjData" resultMap="returnRequiredObjDataMap" parameterType="RequiredFieldsSC">
	
select 	P.OBJ_DISPLAY_ID,
		P.OBJECT_ID,
		P.OBJECT_TYPE,
		P.APP_NAME,
		P.IS_READONLY,
		P.PROG_REF,
		P.READONLY_EXPR,
		P.IS_VISIBLE,
		P.VISIBILITY_EXPR,
		P.BUS_RELATED,
		P.IS_ADM_CUST_DIS_YN,
		P.ADD_DELETE_ROW_YN,
		P.ADD_DELETE_ROW_EXPR
from SYS_PARAM_OBJ_DISPLAY P, OPT O 
where P.PROG_REF    = O.PARENT_REF 
       AND P.APP_NAME    = O.APP_NAME
	   AND P.APP_NAME = #{appName}
	   AND NOT EXISTS(SELECT 1
		                       FROM SYS_PARAM_OBJ_DISPLAY S
		                      WHERE S.APP_NAME        = #{appName} 
		                        AND S.PROG_REF        = #{progRef,jdbcType=VARCHAR}
					            AND S.OBJECT_ID       = P.OBJECT_ID)
	<choose>
          <!-- in case of SAVEAS and there is BUS_RELATED = 1 at the current ProgRef we will get it 
               else we will check the BUS_RELATED at the original and parent of the original in order to get the needed value 
                    with priority for the original progref-->
          <when test="originalProgRef!=null">
		   AND (
		         <!-- return the data from the parent of the current progRef in case there is no Data with BUS_RELATED = 1
		              at the parent of the original progRef -->
		         (O.PROG_REF = #{progRef,jdbcType=VARCHAR}
		          AND 
		          NOT EXISTS(SELECT 1
		                        FROM SYS_PARAM_OBJ_DISPLAY SP2, OPT O2
		                       WHERE  SP2.PROG_REF       = O2.PARENT_REF
		                         AND SP2.APP_NAME       = O2.APP_NAME
		                         AND SP2.BUS_RELATED    = 1
		                         AND SP2.APP_NAME       = #{appName}
		                         AND SP2.PROG_REF       = #{originalProgRef})
		         )
		         OR
		         <!-- return data from the parent of the original progRef
		              in case there is data with BUS_RELATED = 1 -->
		         (O.PROG_REF = #{originalProgRef}
		           AND EXISTS(SELECT 1
		                        FROM SYS_PARAM_OBJ_DISPLAY SP2
		                       WHERE SP2.PROG_REF       = O.PARENT_REF
		                         AND SP2.APP_NAME       = O.APP_NAME
		                         AND SP2.BUS_RELATED    = 1
		                         AND SP2.APP_NAME       = #{appName}))
		       )
          </when>
          <otherwise>
           AND O.PROG_REF = #{progRef,jdbcType=VARCHAR}
          </otherwise>
       </choose>
       
       
       UNION ALL 
       
       
select 	P.OBJ_DISPLAY_ID,
		P.OBJECT_ID,
		P.OBJECT_TYPE,
		P.APP_NAME,
		P.IS_READONLY,
		P.PROG_REF,
		P.READONLY_EXPR,
		P.IS_VISIBLE,
		P.VISIBILITY_EXPR,
		P.BUS_RELATED,
		P.IS_ADM_CUST_DIS_YN,
		P.ADD_DELETE_ROW_YN,
		P.ADD_DELETE_ROW_EXPR
from SYS_PARAM_OBJ_DISPLAY P
where P.APP_NAME = #{appName}
	  <choose>
	          <!-- in case of SAVEAS and there is BUS_RELATED = 1 at the current ProgRef we will get it 
	               else we will check the BUS_RELATED at the original and parent of the original in order to get the needed value 
	                    with priority for the original progref-->
             <when test="originalProgRef!=null">
			   AND (
			         <!-- return information from the current progRef 
			              in case there is no data with BUS_RELATED = 1 at the Original ProgRef -->
			         (P.PROG_REF = #{progRef,jdbcType=VARCHAR}
			          AND 
			          NOT EXISTS(SELECT 1
			                       FROM SYS_PARAM_OBJ_DISPLAY SP1
			                      WHERE SP1.APP_NAME    = #{appName}
			                        AND SP1.BUS_RELATED = 1
			                        AND SP1.PROG_REF    = #{originalProgRef})
			         )
			         OR
			         <!-- return information from the Original progRef in case there is data at this level -->
			         (P.PROG_REF = #{originalProgRef} 
			          AND EXISTS(SELECT 1
			                       FROM SYS_PARAM_OBJ_DISPLAY SP1
			                      WHERE SP1.APP_NAME       = #{appName}
			                        AND SP1.BUS_RELATED    = 1
			                        AND SP1.PROG_REF       = #{originalProgRef}))
			       )
             </when>
             <otherwise>
              AND P.PROG_REF = #{progRef,jdbcType=VARCHAR}
             </otherwise>
            </choose>
</select>
  <resultMap id="returnRequiredObjDetailsDataMap" type="com.path.dbmaps.vo.SYS_PARAM_OBJ_DETAILS_DISPLAYVO">
     <result column="OBJ_DET_NAME" 				property="OBJ_DET_NAME" />
    <result column="OBJ_DISPLAY_ID" 			property="OBJ_DISPLAY_ID" />
    <result column="IS_READONLY" 				property="IS_READONLY" />
    <result column="IS_VISIBLE" 				property="IS_VISIBLE" />
    <result column="IS_MANDATORY" 				property="IS_MANDATORY" />
    <result column="LABEL_KEY" 					property="LABEL_KEY" />
    <result column="DEFAULT_VALUE" 				property="DEFAULT_VALUE" />
    <result column="MIN_LENGTH" 				property="MIN_LENGTH" />
    <result column="MAX_LENGTH" 				property="MAX_LENGTH" />
    <result column="DFLT_VAL_EXPR_PRIORITY_YN" 	property="DFLT_VAL_EXPR_PRIORITY_YN" />
    <result column="IS_ADM_CUST_DIS_YN" 		property="IS_ADM_CUST_DIS_YN" />
    <result column="ENABLE_FIELD_AUDIT_YN" 		property="ENABLE_FIELD_AUDIT_YN" />
    <result column="CREATED_BY" 				property="CREATED_BY" />
    <result column="CREATED_DATE" 				property="CREATED_DATE" />
    <result column="MODIFIED_BY" 				property="MODIFIED_BY" />
    <result column="MODIFIED_DATE" 				property="MODIFIED_DATE" />
    <result column="READONLY_EXPR" 				property="READONLY_EXPR" />
    <result column="VISIBILITY_EXPR" 			property="VISIBILITY_EXPR" />
    <result column="MANDATORY_EXPR" 			property="MANDATORY_EXPR" />
    <result column="LABEL_KEY_EXPR" 			property="LABEL_KEY_EXPR" />
    <result column="VALUE_VALID_EXPR" 			property="VALUE_VALID_EXPR" />
    <result column="DEFAULT_VALUE_EXPR" 		property="DEFAULT_VALUE_EXPR" />
  </resultMap>
  
<select id="returnRequiredObjDetailsData" resultMap="returnRequiredObjDetailsDataMap" parameterType="RequiredFieldsSC">
	
select 	OD.OBJ_DET_NAME,
		OD.OBJ_DISPLAY_ID,
		OD.IS_READONLY,
		OD.IS_VISIBLE,
		OD.IS_MANDATORY,
		OD.LABEL_KEY,
		OD.DEFAULT_VALUE,
		OD.MIN_LENGTH,
		OD.MAX_LENGTH,
		OD.DFLT_VAL_EXPR_PRIORITY_YN,
		OD.IS_ADM_CUST_DIS_YN,
		OD.ENABLE_FIELD_AUDIT_YN,
		OD.CREATED_BY,
		OD.CREATED_DATE,
		OD.MODIFIED_BY,
		OD.MODIFIED_DATE,
		OD.READONLY_EXPR,
		OD.VISIBILITY_EXPR,
		OD.MANDATORY_EXPR,
		OD.LABEL_KEY_EXPR,
		OD.VALUE_VALID_EXPR,
		OD.DEFAULT_VALUE_EXPR
		
from SYS_PARAM_OBJ_DISPLAY P, OPT O,SYS_PARAM_OBJ_DETAILS_DISPLAY OD
where P.PROG_REF    = O.PARENT_REF 
       AND P.APP_NAME    = O.APP_NAME
	   AND P.APP_NAME = #{appName}
	   AND NOT EXISTS(SELECT 1
		                       FROM SYS_PARAM_OBJ_DISPLAY S
		                      WHERE S.APP_NAME        = #{appName} 
		                        AND S.PROG_REF        = #{progRef,jdbcType=VARCHAR}
					            AND S.OBJECT_ID       = P.OBJECT_ID)
	<choose>
          <!-- in case of SAVEAS and there is BUS_RELATED = 1 at the current ProgRef we will get it 
               else we will check the BUS_RELATED at the original and parent of the original in order to get the needed value 
                    with priority for the original progref-->
          <when test="originalProgRef!=null">
		   AND (
		         <!-- return the data from the parent of the current progRef in case there is no Data with BUS_RELATED = 1
		              at the parent of the original progRef -->
		         (O.PROG_REF = #{progRef,jdbcType=VARCHAR}
		          AND 
		          NOT EXISTS(SELECT 1
		                        FROM SYS_PARAM_OBJ_DISPLAY SP2, OPT O2
		                       WHERE  SP2.PROG_REF       = O2.PARENT_REF
		                         AND SP2.APP_NAME       = O2.APP_NAME
		                         AND SP2.BUS_RELATED    = 1
		                         AND SP2.APP_NAME       = #{appName}
		                         AND SP2.PROG_REF       = #{originalProgRef})
		         )
		         OR
		         <!-- return data from the parent of the original progRef
		              in case there is data with BUS_RELATED = 1 -->
		         (O.PROG_REF = #{originalProgRef}
		           AND EXISTS(SELECT 1
		                        FROM SYS_PARAM_OBJ_DISPLAY SP2
		                       WHERE SP2.PROG_REF       = O.PARENT_REF
		                         AND SP2.APP_NAME       = O.APP_NAME
		                         AND SP2.BUS_RELATED    = 1
		                         AND SP2.APP_NAME       = #{appName}))
		       )
          </when>
          <otherwise>
           AND O.PROG_REF = #{progRef,jdbcType=VARCHAR}
          </otherwise>
       </choose>
       AND OD.OBJ_DISPLAY_ID = P.OBJ_DISPLAY_ID
       
       
       UNION ALL 
       
       
select 		OD.OBJ_DET_NAME,
		OD.OBJ_DISPLAY_ID,
		OD.IS_READONLY,
		OD.IS_VISIBLE,
		OD.IS_MANDATORY,
		OD.LABEL_KEY,
		OD.DEFAULT_VALUE,
		OD.MIN_LENGTH,
		OD.MAX_LENGTH,
		OD.DFLT_VAL_EXPR_PRIORITY_YN,
		OD.IS_ADM_CUST_DIS_YN,
		OD.ENABLE_FIELD_AUDIT_YN,
		OD.CREATED_BY,
		OD.CREATED_DATE,
		OD.MODIFIED_BY,
		OD.MODIFIED_DATE,
		OD.READONLY_EXPR,
		OD.VISIBILITY_EXPR,
		OD.MANDATORY_EXPR,
		OD.LABEL_KEY_EXPR,
		OD.VALUE_VALID_EXPR,
		OD.DEFAULT_VALUE_EXPR
from SYS_PARAM_OBJ_DISPLAY P,SYS_PARAM_OBJ_DETAILS_DISPLAY OD
where P.APP_NAME = #{appName}
	  <choose>
	          <!-- in case of SAVEAS and there is BUS_RELATED = 1 at the current ProgRef we will get it 
	               else we will check the BUS_RELATED at the original and parent of the original in order to get the needed value 
	                    with priority for the original progref-->
             <when test="originalProgRef!=null">
			   AND (
			         <!-- return information from the current progRef 
			              in case there is no data with BUS_RELATED = 1 at the Original ProgRef -->
			         (P.PROG_REF = #{progRef,jdbcType=VARCHAR}
			          AND 
			          NOT EXISTS(SELECT 1
			                       FROM SYS_PARAM_OBJ_DISPLAY SP1
			                      WHERE SP1.APP_NAME    = #{appName}
			                        AND SP1.BUS_RELATED = 1
			                        AND SP1.PROG_REF    = #{originalProgRef})
			         )
			         OR
			         <!-- return information from the Original progRef in case there is data at this level -->
			         (P.PROG_REF = #{originalProgRef} 
			          AND EXISTS(SELECT 1
			                       FROM SYS_PARAM_OBJ_DISPLAY SP1
			                      WHERE SP1.APP_NAME       = #{appName}
			                        AND SP1.BUS_RELATED    = 1
			                        AND SP1.PROG_REF       = #{originalProgRef}))
			       )
             </when>
             <otherwise>
              AND P.PROG_REF = #{progRef,jdbcType=VARCHAR}
             </otherwise>
            </choose>
      AND OD.OBJ_DISPLAY_ID = P.OBJ_DISPLAY_ID
</select>

<update id="forceLogoutUsers" parameterType="commonLibSC" >

UPDATE S_APPLOG SET USER_STS  = 'A',USER_STS_WEB = 'A', MACHINE_ID_WEB = NULL
, WEB_HTTP_SESSION_ID = NULL
     WHERE APP_NAME = #{appName}
     AND COMP_CODE = #{compCode}
     AND BRANCH_CODE = #{branchCode}
     AND NOT EXISTS 
            ( SELECT 1 FROM CTSCONTROL_EXCL_PEND_TRX_USERS CEPTU
                      WHERE CEPTU.COMP_CODE = #{compCode}  
                      AND CEPTU.BRANCH_CODE = #{branchCode}
                      AND CEPTU.USER_ID = S_APPLOG.USER_ID)
</update>

<resultMap id="unstldNotTransCashBalMap" type="com.path.vo.admin.user.UsrCO">
	<result column="USER_ID"              property="USER_ID"/>
	<result column="PRIVILEGE_LEVEL_DESC" property="PRIVILEGE_LEVEL_DESC"/>
	<result column="USR_FULL_NAME"        property="USR_FULL_NAME"/>
</resultMap> 
<select id="unstldNotTransCashBalChecking" parameterType="commonLibSC" resultMap="unstldNotTransCashBalMap">
SELECT
DISTINCT U.USER_ID USER_ID 
        ,LTRIM(RTRIM(U.FIRST_NAME)) || ' ' || LTRIM(RTRIM(U.MIDDLE_NAME)) || ' ' || LTRIM(RTRIM(U.LAST_NAME)) USR_FULL_NAME
        ,(SELECT (CASE WHEN #{language} = 'AR' THEN UL.DESC_ARAB ELSE UL.DESC_ENG END)
            FROM USR_LEVEL UL 
           WHERE UL.CODE = T.PRIVILEGE_LEVEL) AS  PRIVILEGE_LEVEL_DESC
  FROM CTSTELLER T,USR U
 WHERE T.USER_ID = U.USER_ID
   AND T.COMP_CODE   = #{compCode}
   AND T.BRANCH_CODE = #{branchCode}
   AND T.STATUS <![CDATA[<>]]> 'D'
  <if  test='"RET".equals(currAppName)' >
   AND T.CODE = #{tellerCode}
  </if> 
AND NOT EXISTS
	(
		SELECT 1
		  FROM CTSTELLER_CASH_BALANCE  
		 WHERE CTSTELLER_CASH_BALANCE.COMP_CODE = T.COMP_CODE
		   AND CTSTELLER_CASH_BALANCE.BRANCH_CODE = T.BRANCH_CODE
		   AND CTSTELLER_CASH_BALANCE.TELLER_CODE = T.CODE
		   <choose>
		       <when test="isOracle == 1">
		         AND TRUNC(CTSTELLER_CASH_BALANCE.TRADE_DATE) = TRUNC(#{runningDate})		       
		       </when>
		       <otherwise>
		         AND CONVERT(DATE,CTSTELLER_CASH_BALANCE.TRADE_DATE,103) = CONVERT(DATE,#{runningDate},103) 
		       </otherwise>
		   </choose>
		   AND CTSTELLER_CASH_BALANCE.STATUS = 'C' 
		   AND CTSTELLER_CASH_BALANCE.TRSFR_TYPE = 'TV'
	)
AND (
     EXISTS
	  (
		SELECT 1
		  FROM CTSTELLER_CASH_BALANCE  
		 WHERE CTSTELLER_CASH_BALANCE.COMP_CODE = T.COMP_CODE
		   AND CTSTELLER_CASH_BALANCE.BRANCH_CODE = T.BRANCH_CODE
		   AND (CTSTELLER_CASH_BALANCE.TELLER_CODE = T.CODE
		        OR 
		        CTSTELLER_CASH_BALANCE.VAULT_NO = T.CODE)
		   <choose>
		       <when test="isOracle == 1">
		         AND TRUNC(CTSTELLER_CASH_BALANCE.TRADE_DATE) = TRUNC(#{runningDate})		       
		       </when>
		       <otherwise>
		         AND CONVERT(DATE,CTSTELLER_CASH_BALANCE.TRADE_DATE,103) = CONVERT(DATE,#{runningDate},103) 
		       </otherwise>
		   </choose>

		   AND CTSTELLER_CASH_BALANCE.TRSFR_TYPE <![CDATA[<>]]> 'TV'
	  )
      OR EXISTS(
	             SELECT 1
	               FROM CTSTRS, CTSTRXTYPE
	              WHERE CTSTRS.TRS_TYPE    = 'R'
	                AND CTSTRS.BRANCH_CODE = #{branchCode}
	                AND CTSTRS.CB_IND      = 'C'
	                AND CTSTRS.COMP_CODE   = #{compCode}
				   <choose>
				       <when test="isOracle == 1">
				         AND TRUNC(CTSTRS.TRS_DATE) = TRUNC(#{runningDate})		       
				       </when>
				       <otherwise>
				         AND CONVERT(DATE,CTSTRS.TRS_DATE,103) = CONVERT(DATE,#{runningDate},103) 
				       </otherwise>
				   </choose>
	                AND CTSTRS.STATUS      = 'P'
	                AND CTSTRS.COMP_CODE   = CTSTRXTYPE.COMP_CODE
	                AND CTSTRS.TRX_TYPE    = CTSTRXTYPE.CODE
				    AND CTSTRS.TELLER_CODE = T.CODE
	                AND (CTSTRXTYPE.TYPE   = 'D' OR
	                     (CTSTRXTYPE.TYPE = 'T' AND CTSTRS.TRSFR_METHOD = 'C') OR
	                     (CTSTRS.CHARGE > 0 AND (CTSTRS.CASH_DEDUCT_IND = '0' OR CTSTRS.CASH_DEDUCT_IND = '4')))                   
              )

     )
     AND NOT EXISTS 
   	 (
         SELECT 1
         FROM CTSCONTROL_EXCL_PEND_TRX_USERS CEPTU
         WHERE CEPTU.COMP_CODE = #{compCode}
         AND CEPTU.BRANCH_CODE = #{branchCode}
         AND U.USER_ID = CEPTU.USER_ID
     )
</select>
<resultMap id="omniCurrenciesETLMap" type="com.path.dbmaps.vo.CURRENCIESVO" >
    <result column="COMP_CODE" property="COMP_CODE" />
    <result column="ADDITIONAL_REFERENCE" property="ADDITIONAL_REFERENCE" />
    <result column="CURRENCY_CODE" property="CURRENCY_CODE" />
    <result column="BRIEF_DESC_ARAB" property="BRIEF_DESC_ARAB" />
    <result column="BRIEF_DESC_ENG" property="BRIEF_DESC_ENG" />
    <result column="DECIMAL_POINTS" property="DECIMAL_POINTS" />
    <result column="FLAG_CTR" property="FLAG_CTR" />
    <result column="PT_METHOD" property="PT_METHOD" />
    <result column="UNIT" property="UNIT" />
    <result column="LONG_DESC_ARAB" property="LONG_DESC_ARAB" />
    <result column="LONG_DESC_ENG" property="LONG_DESC_ENG" />
    <result column="ISO_CODE" property="ISO_CODE" />
</resultMap>
<select id="returnOmniETLCurrency" resultMap="omniCurrenciesETLMap" parameterType="com.path.dbmaps.vo.CURRENCIESVOKey" >
    SELECT 
     COMP_CODE, ADDITIONAL_REFERENCE, CURRENCY_CODE, BRIEF_DESC_ARAB, BRIEF_DESC_ENG, 
    DECIMAL_POINTS, FLAG_CTR, PT_METHOD, UNIT, LONG_DESC_ARAB, LONG_DESC_ENG, ISO_CODE
    FROM OC_ETL_CURRENCIES
    WHERE COMP_CODE = #{COMP_CODE}
    AND CURRENCY_CODE = #{CURRENCY_CODE}
</select>

<resultMap id="comGlobActAfterExecMap" type="com.path.dbmaps.vo.COMMON_GLOB_ACT_ID_AFTER_EXECVO" >
    <result column="APP_NAME" 				property="APP_NAME" />
    <result column="SCREEN_REF" 			property="SCREEN_REF" />
    <result column="IV_CRUD" 				property="IV_CRUD" />
    <result column="GLOB_ACT_BUS" 			property="GLOB_ACT_BUS" />
    <result column="GLOB_ACT_ID" 			property="GLOB_ACT_ID" />
</resultMap>

<select id="retGlobalActivityAfterExec" resultMap="comGlobActAfterExecMap" parameterType="commonLibSC" >
    SELECT APP_NAME,SCREEN_REF,IV_CRUD,GLOB_ACT_BUS,GLOB_ACT_ID FROM COMMON_GLOB_ACT_ID_AFTER_EXEC
    <where>
    	  <if test="appName != null" >
        	AND APP_NAME =  #{appName}
      	  </if>
       	  <if test="progRef != null" >
        	AND SCREEN_REF = #{progRef}
      	  </if>
       	  <if test="crudMode != null" >
        	AND IV_CRUD = #{crudMode}
          </if>
    </where>
</select>
<resultMap id="screenElementsMap" type="com.path.vo.common.customization.button.ScreenElementCO" >
	<result property="fieldId"        column="FLD_IDENTIFIER" />
	<result property="fieldDataType"  column="FIELD_DATA_TYPE" />
	<result property="fieldRef"       column="VO_CO_REFERENCE" />
	<result property="propertyName"   column="VO_PROPERTY_NAME" />	
</resultMap>

	<select id="returnScreenElementsDetails" resultMap="screenElementsMap" parameterType="buttonCustomizationSC">
		SELECT 	S.FLD_IDENTIFIER,
		        S.FIELD_DATA_TYPE, 
		        F.VO_CO_REFERENCE,
		        F.VO_PROPERTY_NAME
		      FROM SYS_PARAM_SCREEN_ELEMENTS S INNER JOIN FIELD_TECH_DETAILS F
		           on S.FLD_IDENTIFIER = F. FLD_IDENTIFIER WHERE  PROG_REF= #{progRef} 
		           AND APP_NAME=  #{currAppName}
	</select>
</mapper>